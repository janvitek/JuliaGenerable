const Core.BuiltinInts = Union{Core.Bool, Core.Int32, Core.Int64, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8, Core.Int128, Core.Int16, Core.Int8, Core.UInt128}  [typealias @ Core.BuiltinInts]
const Core.Compiler.% = Core.Compiler.rem  [functionalias @ Core.Compiler.%]
const Core.Compiler.' = Core.Compiler.adjoint  [functionalias @ Core.Compiler.']
const Core.Compiler.: = Core.Compiler.Colon  [functionalias @ Core.Compiler.:]
const Core.Compiler.=> = Core.Pair  [typealias @ Core.Compiler.=>]
const Core.Compiler.AbstractMatrix = Core.AbstractArray{T, 2} where T  [typealias @ Core.Compiler.AbstractMatrix]
const Core.Compiler.AbstractVecOrMat = Union{Core.AbstractArray{T, 1}, Core.AbstractArray{T, 2}} where T  [typealias @ Core.Compiler.AbstractVecOrMat]
const Core.Compiler.AbstractVecOrTuple = Union{Tuple{Vararg{T}}, Base.AbstractVector{<:T}} where T  [typealias @ Core.Compiler.AbstractVecOrTuple]
const Core.Compiler.AbstractVector = Core.AbstractArray{T, 1} where T  [typealias @ Core.Compiler.AbstractVector]
const Core.Compiler.All32 = Tuple{T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, Vararg{T, N}} where {T, N}  [typealias @ Core.Compiler.All32]
const Core.Compiler.Any32 = Tuple{Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Vararg{Core.Any, N}} where N  [typealias @ Core.Compiler.Any32]
const Core.Compiler.AnyConditional = Union{Core.Compiler.Conditional, Core.InterConditional}  [typealias @ Core.Compiler.AnyConditional]
const Core.Compiler.AnyConditionalsLattice = Union{Core.Compiler.ConditionalsLattice{L}, Core.Compiler.InterConditionalsLattice{L}} where L  [typealias @ Core.Compiler.AnyConditionalsLattice]
const Core.Compiler.AnySSAValue = Union{Core.Compiler.NewSSAValue, Core.Compiler.OldSSAValue, Core.SSAValue}  [typealias @ Core.Compiler.AnySSAValue]
const Core.Compiler.ArgEscapeCache = Core.Compiler.EscapeAnalysis.ArgEscapeCache  [typealias @ Core.Compiler.ArgEscapeCache]
const Core.Compiler.BBNumber = Core.Int64  [typealias @ Core.Compiler.BBNumber]
const Core.Compiler.BaseInferenceLattice = Core.Compiler.ConditionalsLattice{Core.Compiler.PartialsLattice{Core.Compiler.ConstsLattice}}  [typealias @ Core.Compiler.BaseInferenceLattice]
const Core.Compiler.BitInteger = Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}  [typealias @ Core.Compiler.BitInteger]
const Core.Compiler.BitInteger32 = Union{Core.Int16, Core.Int32, Core.Int8, Core.UInt16, Core.UInt32, Core.UInt8}  [typealias @ Core.Compiler.BitInteger32]
const Core.Compiler.BitInteger64 = Union{Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}  [typealias @ Core.Compiler.BitInteger64]
const Core.Compiler.BitIntegerArray = Union{Core.Array{Core.Int128, N}, Core.Array{Core.Int16, N}, Core.Array{Core.Int32, N}, Core.Array{Core.Int64, N}, Core.Array{Core.Int8, N}, Core.Array{Core.UInt128, N}, Core.Array{Core.UInt16, N}, Core.Array{Core.UInt32, N}, Core.Array{Core.UInt64, N}, Core.Array{Core.UInt8, N}} where N  [typealias @ Core.Compiler.BitIntegerArray]
const Core.Compiler.BitIntegerSmall = Union{Core.Int16, Core.Int32, Core.Int8, Core.UInt16, Core.UInt32, Core.UInt8}  [typealias @ Core.Compiler.BitIntegerSmall]
const Core.Compiler.BitIntegerType = Union{Core.Type{Core.Int128}, Core.Type{Core.Int16}, Core.Type{Core.Int32}, Core.Type{Core.Int64}, Core.Type{Core.Int8}, Core.Type{Core.UInt128}, Core.Type{Core.UInt16}, Core.Type{Core.UInt32}, Core.Type{Core.UInt64}, Core.Type{Core.UInt8}}  [typealias @ Core.Compiler.BitIntegerType]
const Core.Compiler.BitMatrix = Core.Compiler.BitArray{2}  [typealias @ Core.Compiler.BitMatrix]
const Core.Compiler.BitSigned = Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8}  [typealias @ Core.Compiler.BitSigned]
const Core.Compiler.BitSigned32 = Union{Core.Int16, Core.Int32, Core.Int8}  [typealias @ Core.Compiler.BitSigned32]
const Core.Compiler.BitSigned64 = Union{Core.Int16, Core.Int32, Core.Int64, Core.Int8}  [typealias @ Core.Compiler.BitSigned64]
const Core.Compiler.BitSigned64T = Union{Core.Type{Core.Int16}, Core.Type{Core.Int32}, Core.Type{Core.Int64}, Core.Type{Core.Int8}}  [typealias @ Core.Compiler.BitSigned64T]
const Core.Compiler.BitSignedSmall = Union{Core.Int16, Core.Int32, Core.Int8}  [typealias @ Core.Compiler.BitSignedSmall]
const Core.Compiler.BitUnsigned = Union{Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}  [typealias @ Core.Compiler.BitUnsigned]
const Core.Compiler.BitUnsigned32 = Union{Core.UInt16, Core.UInt32, Core.UInt8}  [typealias @ Core.Compiler.BitUnsigned32]
const Core.Compiler.BitUnsigned64 = Union{Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}  [typealias @ Core.Compiler.BitUnsigned64]
const Core.Compiler.BitUnsigned64T = Union{Core.Type{Core.UInt16}, Core.Type{Core.UInt32}, Core.Type{Core.UInt64}, Core.Type{Core.UInt8}}  [typealias @ Core.Compiler.BitUnsigned64T]
const Core.Compiler.BitUnsignedSmall = Union{Core.UInt16, Core.UInt32, Core.UInt8}  [typealias @ Core.Compiler.BitUnsignedSmall]
const Core.Compiler.BitVector = Core.Compiler.BitArray{1}  [typealias @ Core.Compiler.BitVector]
const Core.Compiler.Bits = Core.Array{Core.UInt64, 1}  [typealias @ Core.Compiler.Bits]
const Core.Compiler.Builtin = Core.Builtin  [typealias @ Core.Compiler.Builtin]
const Core.Compiler.Callable = Union{Core.Function, Core.Type}  [typealias @ Core.Compiler.Callable]
const Core.Compiler.Cdouble = Core.Float64  [typealias @ Core.Compiler.Cdouble]
const Core.Compiler.Cfloat = Core.Float32  [typealias @ Core.Compiler.Cfloat]
const Core.Compiler.Cint = Core.Int32  [typealias @ Core.Compiler.Cint]
const Core.Compiler.Cintmax_t = Core.Int64  [typealias @ Core.Compiler.Cintmax_t]
const Core.Compiler.Clonglong = Core.Int64  [typealias @ Core.Compiler.Clonglong]
const Core.Compiler.CodeInfo = Core.CodeInfo  [typealias @ Core.Compiler.CodeInfo]
const Core.Compiler.CodeInstance = Core.CodeInstance  [typealias @ Core.Compiler.CodeInstance]
const Core.Compiler.CompilerTypes = Union{Core.Compiler.NotFound, Core.Compiler.Conditional, Core.Compiler.MaybeUndef, Core.Const, Core.PartialStruct}  [typealias @ Core.Compiler.CompilerTypes]
const Core.Compiler.Const = Core.Const  [typealias @ Core.Compiler.Const]
const Core.Compiler.ConstResult = Union{Core.Compiler.ConcreteResult, Core.Compiler.ConstPropResult, Core.Compiler.SemiConcreteResult}  [typealias @ Core.Compiler.ConstResult]
const Core.Compiler.CoreDocs.@nospecialize = Core.Compiler.@nospecialize  [functionalias @ Core.Compiler.CoreDocs.@nospecialize]
const Core.Compiler.CoreDocs.Csize_t = Core.UInt64  [typealias @ Core.Compiler.CoreDocs.Csize_t]
const Core.Compiler.CoreDocs.esc = Core.Compiler.esc  [functionalias @ Core.Compiler.CoreDocs.esc]
const Core.Compiler.CoreDocs.getindex = Core.Compiler.getindex  [functionalias @ Core.Compiler.CoreDocs.getindex]
const Core.Compiler.CoreDocs.push! = Core.Compiler.push!  [functionalias @ Core.Compiler.CoreDocs.push!]
const Core.Compiler.CoreDocs.unsafe_load = Core.Compiler.unsafe_load  [functionalias @ Core.Compiler.CoreDocs.unsafe_load]
const Core.Compiler.Cptrdiff_t = Core.Int64  [typealias @ Core.Compiler.Cptrdiff_t]
const Core.Compiler.Cshort = Core.Int16  [typealias @ Core.Compiler.Cshort]
const Core.Compiler.Csize_t = Core.UInt64  [typealias @ Core.Compiler.Csize_t]
const Core.Compiler.Cssize_t = Core.Int64  [typealias @ Core.Compiler.Cssize_t]
const Core.Compiler.Cuchar = Core.UInt8  [typealias @ Core.Compiler.Cuchar]
const Core.Compiler.Cuint = Core.UInt32  [typealias @ Core.Compiler.Cuint]
const Core.Compiler.Cuintmax_t = Core.UInt64  [typealias @ Core.Compiler.Cuintmax_t]
const Core.Compiler.Culonglong = Core.UInt64  [typealias @ Core.Compiler.Culonglong]
const Core.Compiler.Cushort = Core.UInt16  [typealias @ Core.Compiler.Cushort]
const Core.Compiler.DenseMatrix = Core.DenseArray{T, 2} where T  [typealias @ Core.Compiler.DenseMatrix]
const Core.Compiler.DenseVecOrMat = Union{Core.DenseArray{T, 1}, Core.DenseArray{T, 2}} where T  [typealias @ Core.Compiler.DenseVecOrMat]
const Core.Compiler.DenseVector = Core.DenseArray{T, 1} where T  [typealias @ Core.Compiler.DenseVector]
const Core.Compiler.DimOrInd = Union{Core.Integer, Core.Compiler.AbstractUnitRange}  [typealias @ Core.Compiler.DimOrInd]
const Core.Compiler.Dims = Tuple{Vararg{Core.Int64, N}} where N  [typealias @ Core.Compiler.Dims]
const Core.Compiler.DimsInteger = Tuple{Vararg{Core.Integer, N}} where N  [typealias @ Core.Compiler.DimsInteger]
const Core.Compiler.DimsOrInds = Tuple{Vararg{Union{Core.Integer, Core.Compiler.AbstractUnitRange}, N}} where N  [typealias @ Core.Compiler.DimsOrInds]
const Core.Compiler.DomTree = Core.Compiler.GenericDomTree{false}  [typealias @ Core.Compiler.DomTree]
const Core.Compiler.EscapeAnalysis.! = Core.Compiler.!  [functionalias @ Core.Compiler.EscapeAnalysis.!]
const Core.Compiler.EscapeAnalysis.!= = Core.Compiler.!=  [functionalias @ Core.Compiler.EscapeAnalysis.!=]
const Core.Compiler.EscapeAnalysis.!== = Core.Compiler.!==  [functionalias @ Core.Compiler.EscapeAnalysis.!==]
const Core.Compiler.EscapeAnalysis.& = Core.Compiler.&  [functionalias @ Core.Compiler.EscapeAnalysis.&]
const Core.Compiler.EscapeAnalysis.* = Core.Compiler.*  [functionalias @ Core.Compiler.EscapeAnalysis.*]
const Core.Compiler.EscapeAnalysis.+ = Core.Compiler.+  [functionalias @ Core.Compiler.EscapeAnalysis.+]
const Core.Compiler.EscapeAnalysis.- = Core.Compiler.-  [functionalias @ Core.Compiler.EscapeAnalysis.-]
const Core.Compiler.EscapeAnalysis.: = Core.Compiler.Colon  [functionalias @ Core.Compiler.EscapeAnalysis.:]
const Core.Compiler.EscapeAnalysis.< = Core.Compiler.<  [functionalias @ Core.Compiler.EscapeAnalysis.<]
const Core.Compiler.EscapeAnalysis.<< = Core.Compiler.<<  [functionalias @ Core.Compiler.EscapeAnalysis.<<]
const Core.Compiler.EscapeAnalysis.== = Core.Compiler.==  [functionalias @ Core.Compiler.EscapeAnalysis.==]
const Core.Compiler.EscapeAnalysis.=> = Core.Pair  [typealias @ Core.Compiler.EscapeAnalysis.=>]
const Core.Compiler.EscapeAnalysis.> = Core.Compiler.>  [functionalias @ Core.Compiler.EscapeAnalysis.>]
const Core.Compiler.EscapeAnalysis.@__MODULE__ = Core.Compiler.@__MODULE__  [functionalias @ Core.Compiler.EscapeAnalysis.@__MODULE__]
const Core.Compiler.EscapeAnalysis.@assert = Core.Compiler.@assert  [functionalias @ Core.Compiler.EscapeAnalysis.@assert]
const Core.Compiler.EscapeAnalysis.@eval = Core.Compiler.@eval  [functionalias @ Core.Compiler.EscapeAnalysis.@eval]
const Core.Compiler.EscapeAnalysis.@goto = Core.Compiler.@goto  [functionalias @ Core.Compiler.EscapeAnalysis.@goto]
const Core.Compiler.EscapeAnalysis.@inbounds = Core.Compiler.@inbounds  [functionalias @ Core.Compiler.EscapeAnalysis.@inbounds]
const Core.Compiler.EscapeAnalysis.@inline = Core.Compiler.@inline  [functionalias @ Core.Compiler.EscapeAnalysis.@inline]
const Core.Compiler.EscapeAnalysis.@label = Core.Compiler.@label  [functionalias @ Core.Compiler.EscapeAnalysis.@label]
const Core.Compiler.EscapeAnalysis.@noinline = Core.Compiler.@noinline  [functionalias @ Core.Compiler.EscapeAnalysis.@noinline]
const Core.Compiler.EscapeAnalysis.@nospecialize = Core.Compiler.@nospecialize  [functionalias @ Core.Compiler.EscapeAnalysis.@nospecialize]
const Core.Compiler.EscapeAnalysis.@specialize = Core.Compiler.@specialize  [functionalias @ Core.Compiler.EscapeAnalysis.@specialize]
const Core.Compiler.EscapeAnalysis.AInfo = Core.Compiler.IdSet{Core.Any}  [typealias @ Core.Compiler.EscapeAnalysis.AInfo]
const Core.Compiler.EscapeAnalysis.AliasSet = Core.Compiler.EscapeAnalysis.IntDisjointSet{Core.Int64}  [typealias @ Core.Compiler.EscapeAnalysis.AliasSet]
const Core.Compiler.EscapeAnalysis.Argument = Core.Argument  [typealias @ Core.Compiler.EscapeAnalysis.Argument]
const Core.Compiler.EscapeAnalysis.ArrayInfo = Core.Compiler.IdDict{Core.Int64, Base.Vector{Core.Int64}}  [typealias @ Core.Compiler.EscapeAnalysis.ArrayInfo]
const Core.Compiler.EscapeAnalysis.BitSet = Core.Compiler.BitSet  [typealias @ Core.Compiler.EscapeAnalysis.BitSet]
const Core.Compiler.EscapeAnalysis.CallInfo = Core.Compiler.CallInfo  [typealias @ Core.Compiler.EscapeAnalysis.CallInfo]
const Core.Compiler.EscapeAnalysis.Callable = Union{Core.Function, Core.Type}  [typealias @ Core.Compiler.EscapeAnalysis.Callable]
const Core.Compiler.EscapeAnalysis.Changes = Core.Array{Core.Compiler.EscapeAnalysis.Change, 1}  [typealias @ Core.Compiler.EscapeAnalysis.Changes]
const Core.Compiler.EscapeAnalysis.CodeInstance = Core.CodeInstance  [typealias @ Core.Compiler.EscapeAnalysis.CodeInstance]
const Core.Compiler.EscapeAnalysis.ConcreteResult = Core.Compiler.ConcreteResult  [typealias @ Core.Compiler.EscapeAnalysis.ConcreteResult]
const Core.Compiler.EscapeAnalysis.Const = Core.Const  [typealias @ Core.Compiler.EscapeAnalysis.Const]
const Core.Compiler.EscapeAnalysis.ConstCallInfo = Core.Compiler.ConstCallInfo  [typealias @ Core.Compiler.EscapeAnalysis.ConstCallInfo]
const Core.Compiler.EscapeAnalysis.ConstPropResult = Core.Compiler.ConstPropResult  [typealias @ Core.Compiler.EscapeAnalysis.ConstPropResult]
const Core.Compiler.EscapeAnalysis.Csize_t = Core.UInt64  [typealias @ Core.Compiler.EscapeAnalysis.Csize_t]
const Core.Compiler.EscapeAnalysis.GotoIfNot = Core.GotoIfNot  [typealias @ Core.Compiler.EscapeAnalysis.GotoIfNot]
const Core.Compiler.EscapeAnalysis.GotoNode = Core.GotoNode  [typealias @ Core.Compiler.EscapeAnalysis.GotoNode]
const Core.Compiler.EscapeAnalysis.IRCode = Core.Compiler.IRCode  [typealias @ Core.Compiler.EscapeAnalysis.IRCode]
const Core.Compiler.EscapeAnalysis.IdDict = Core.Compiler.IdDict  [typealias @ Core.Compiler.EscapeAnalysis.IdDict]
const Core.Compiler.EscapeAnalysis.IdSet = Core.Compiler.IdSet  [typealias @ Core.Compiler.EscapeAnalysis.IdSet]
const Core.Compiler.EscapeAnalysis.InferenceResult = Core.Compiler.InferenceResult  [typealias @ Core.Compiler.EscapeAnalysis.InferenceResult]
const Core.Compiler.EscapeAnalysis.InvokeCallInfo = Core.Compiler.InvokeCallInfo  [typealias @ Core.Compiler.EscapeAnalysis.InvokeCallInfo]
const Core.Compiler.EscapeAnalysis.Linfo = Union{Core.Compiler.InferenceResult, Core.MethodInstance}  [typealias @ Core.Compiler.EscapeAnalysis.Linfo]
const Core.Compiler.EscapeAnalysis.LivenessSet = Core.Compiler.BitSet  [typealias @ Core.Compiler.EscapeAnalysis.LivenessSet]
const Core.Compiler.EscapeAnalysis.MethodInstance = Core.MethodInstance  [typealias @ Core.Compiler.EscapeAnalysis.MethodInstance]
const Core.Compiler.EscapeAnalysis.MethodMatch = Core.MethodMatch  [typealias @ Core.Compiler.EscapeAnalysis.MethodMatch]
const Core.Compiler.EscapeAnalysis.MethodMatchInfo = Core.Compiler.MethodMatchInfo  [typealias @ Core.Compiler.EscapeAnalysis.MethodMatchInfo]
const Core.Compiler.EscapeAnalysis.MethodResultPure = Core.Compiler.MethodResultPure  [typealias @ Core.Compiler.EscapeAnalysis.MethodResultPure]
const Core.Compiler.EscapeAnalysis.NoCallInfo = Core.Compiler.NoCallInfo  [typealias @ Core.Compiler.EscapeAnalysis.NoCallInfo]
const Core.Compiler.EscapeAnalysis.OneTo = Core.Compiler.OneTo  [typealias @ Core.Compiler.EscapeAnalysis.OneTo]
const Core.Compiler.EscapeAnalysis.OptimizerLattice = Core.Compiler.OptimizerLattice  [typealias @ Core.Compiler.EscapeAnalysis.OptimizerLattice]
const Core.Compiler.EscapeAnalysis.PhiCNode = Core.PhiCNode  [typealias @ Core.Compiler.EscapeAnalysis.PhiCNode]
const Core.Compiler.EscapeAnalysis.PhiNode = Core.PhiNode  [typealias @ Core.Compiler.EscapeAnalysis.PhiNode]
const Core.Compiler.EscapeAnalysis.PiNode = Core.PiNode  [typealias @ Core.Compiler.EscapeAnalysis.PiNode]
const Core.Compiler.EscapeAnalysis.ReturnNode = Core.ReturnNode  [typealias @ Core.Compiler.EscapeAnalysis.ReturnNode]
const Core.Compiler.EscapeAnalysis.SSAValue = Core.SSAValue  [typealias @ Core.Compiler.EscapeAnalysis.SSAValue]
const Core.Compiler.EscapeAnalysis.SemiConcreteResult = Core.Compiler.SemiConcreteResult  [typealias @ Core.Compiler.EscapeAnalysis.SemiConcreteResult]
const Core.Compiler.EscapeAnalysis.Signature = Core.Compiler.Signature  [typealias @ Core.Compiler.EscapeAnalysis.Signature]
const Core.Compiler.EscapeAnalysis.SimpleVector = Core.SimpleVector  [typealias @ Core.Compiler.EscapeAnalysis.SimpleVector]
const Core.Compiler.EscapeAnalysis.UnionSplitInfo = Core.Compiler.UnionSplitInfo  [typealias @ Core.Compiler.EscapeAnalysis.UnionSplitInfo]
const Core.Compiler.EscapeAnalysis.UnitRange = Core.Compiler.UnitRange  [typealias @ Core.Compiler.EscapeAnalysis.UnitRange]
const Core.Compiler.EscapeAnalysis.UpsilonNode = Core.UpsilonNode  [typealias @ Core.Compiler.EscapeAnalysis.UpsilonNode]
const Core.Compiler.EscapeAnalysis.Vector = Core.Array{T, 1} where T  [typealias @ Core.Compiler.EscapeAnalysis.Vector]
const Core.Compiler.EscapeAnalysis._TOP_MOD = Core.Compiler  [modulealias @ Core.Compiler.EscapeAnalysis._TOP_MOD]
const Core.Compiler.EscapeAnalysis.alloc_array_ndims = Core.Compiler.alloc_array_ndims  [functionalias @ Core.Compiler.EscapeAnalysis.alloc_array_ndims]
const Core.Compiler.EscapeAnalysis.argextype = Core.Compiler.argextype  [functionalias @ Core.Compiler.EscapeAnalysis.argextype]
const Core.Compiler.EscapeAnalysis.argtypes_to_type = Core.Compiler.argtypes_to_type  [functionalias @ Core.Compiler.EscapeAnalysis.argtypes_to_type]
const Core.Compiler.EscapeAnalysis.array_builtin_common_typecheck = Core.Compiler.array_builtin_common_typecheck  [functionalias @ Core.Compiler.EscapeAnalysis.array_builtin_common_typecheck]
const Core.Compiler.EscapeAnalysis.arrayref = Core.arrayref  [functionalias @ Core.Compiler.EscapeAnalysis.arrayref]
const Core.Compiler.EscapeAnalysis.arrayset = Core.arrayset  [functionalias @ Core.Compiler.EscapeAnalysis.arrayset]
const Core.Compiler.EscapeAnalysis.arrayset_typecheck = Core.Compiler.arrayset_typecheck  [functionalias @ Core.Compiler.EscapeAnalysis.arrayset_typecheck]
const Core.Compiler.EscapeAnalysis.arraysize = Core.arraysize  [functionalias @ Core.Compiler.EscapeAnalysis.arraysize]
const Core.Compiler.EscapeAnalysis.call_sig = Core.Compiler.call_sig  [functionalias @ Core.Compiler.EscapeAnalysis.call_sig]
const Core.Compiler.EscapeAnalysis.check_effect_free! = Core.Compiler.check_effect_free!  [functionalias @ Core.Compiler.EscapeAnalysis.check_effect_free!]
const Core.Compiler.EscapeAnalysis.collect = Core.Compiler.collect  [functionalias @ Core.Compiler.EscapeAnalysis.collect]
const Core.Compiler.EscapeAnalysis.copy = Core.Compiler.copy  [functionalias @ Core.Compiler.EscapeAnalysis.copy]
const Core.Compiler.EscapeAnalysis.delete! = Core.Compiler.delete!  [functionalias @ Core.Compiler.EscapeAnalysis.delete!]
const Core.Compiler.EscapeAnalysis.eltype = Core.Compiler.eltype  [functionalias @ Core.Compiler.EscapeAnalysis.eltype]
const Core.Compiler.EscapeAnalysis.empty! = Core.Compiler.empty!  [functionalias @ Core.Compiler.EscapeAnalysis.empty!]
const Core.Compiler.EscapeAnalysis.enumerate = Core.Compiler.Iterators.enumerate  [functionalias @ Core.Compiler.EscapeAnalysis.enumerate]
const Core.Compiler.EscapeAnalysis.error = Core.Compiler.error  [functionalias @ Core.Compiler.EscapeAnalysis.error]
const Core.Compiler.EscapeAnalysis.fieldcount_noerror = Core.Compiler.fieldcount_noerror  [functionalias @ Core.Compiler.EscapeAnalysis.fieldcount_noerror]
const Core.Compiler.EscapeAnalysis.first = Core.Compiler.first  [functionalias @ Core.Compiler.EscapeAnalysis.first]
const Core.Compiler.EscapeAnalysis.get = Core.Compiler.get  [functionalias @ Core.Compiler.EscapeAnalysis.get]
const Core.Compiler.EscapeAnalysis.get! = Core.Compiler.get!  [functionalias @ Core.Compiler.EscapeAnalysis.get!]
const Core.Compiler.EscapeAnalysis.getindex = Core.Compiler.getindex  [functionalias @ Core.Compiler.EscapeAnalysis.getindex]
const Core.Compiler.EscapeAnalysis.hasintersect = Core.Compiler.hasintersect  [functionalias @ Core.Compiler.EscapeAnalysis.hasintersect]
const Core.Compiler.EscapeAnalysis.haskey = Core.Compiler.haskey  [functionalias @ Core.Compiler.EscapeAnalysis.haskey]
const Core.Compiler.EscapeAnalysis.ifelse = Core.ifelse  [functionalias @ Core.Compiler.EscapeAnalysis.ifelse]
const Core.Compiler.EscapeAnalysis.in = Core.Compiler.in  [functionalias @ Core.Compiler.EscapeAnalysis.in]
const Core.Compiler.EscapeAnalysis.intrinsic_nothrow = Core.Compiler.intrinsic_nothrow  [functionalias @ Core.Compiler.EscapeAnalysis.intrinsic_nothrow]
const Core.Compiler.EscapeAnalysis.invoke_rewrite = Core.Compiler.invoke_rewrite  [functionalias @ Core.Compiler.EscapeAnalysis.invoke_rewrite]
const Core.Compiler.EscapeAnalysis.is_builtin = Core.Compiler.is_builtin  [functionalias @ Core.Compiler.EscapeAnalysis.is_builtin]
const Core.Compiler.EscapeAnalysis.is_meta_expr_head = Core.Compiler.is_meta_expr_head  [functionalias @ Core.Compiler.EscapeAnalysis.is_meta_expr_head]
const Core.Compiler.EscapeAnalysis.is_return_type = Core.Compiler.is_return_type  [functionalias @ Core.Compiler.EscapeAnalysis.is_return_type]
const Core.Compiler.EscapeAnalysis.isassigned = Core.Compiler.isassigned  [functionalias @ Core.Compiler.EscapeAnalysis.isassigned]
const Core.Compiler.EscapeAnalysis.isbitstype = Core.Compiler.isbitstype  [functionalias @ Core.Compiler.EscapeAnalysis.isbitstype]
const Core.Compiler.EscapeAnalysis.isempty = Core.Compiler.isempty  [functionalias @ Core.Compiler.EscapeAnalysis.isempty]
const Core.Compiler.EscapeAnalysis.isexpr = Core.Compiler.isexpr  [functionalias @ Core.Compiler.EscapeAnalysis.isexpr]
const Core.Compiler.EscapeAnalysis.ismutabletype = Core.Compiler.ismutabletype  [functionalias @ Core.Compiler.EscapeAnalysis.ismutabletype]
const Core.Compiler.EscapeAnalysis.istopfunction = Core.Compiler.istopfunction  [functionalias @ Core.Compiler.EscapeAnalysis.istopfunction]
const Core.Compiler.EscapeAnalysis.keys = Core.Compiler.keys  [functionalias @ Core.Compiler.EscapeAnalysis.keys]
const Core.Compiler.EscapeAnalysis.last = Core.Compiler.last  [functionalias @ Core.Compiler.EscapeAnalysis.last]
const Core.Compiler.EscapeAnalysis.length = Core.Compiler.length  [functionalias @ Core.Compiler.EscapeAnalysis.length]
const Core.Compiler.EscapeAnalysis.max = Core.Compiler.max  [functionalias @ Core.Compiler.EscapeAnalysis.max]
const Core.Compiler.EscapeAnalysis.min = Core.Compiler.min  [functionalias @ Core.Compiler.EscapeAnalysis.min]
const Core.Compiler.EscapeAnalysis.one = Core.Compiler.one  [functionalias @ Core.Compiler.EscapeAnalysis.one]
const Core.Compiler.EscapeAnalysis.pop! = Core.Compiler.pop!  [functionalias @ Core.Compiler.EscapeAnalysis.pop!]
const Core.Compiler.EscapeAnalysis.println = Core.println  [functionalias @ Core.Compiler.EscapeAnalysis.println]
const Core.Compiler.EscapeAnalysis.push! = Core.Compiler.push!  [functionalias @ Core.Compiler.EscapeAnalysis.push!]
const Core.Compiler.EscapeAnalysis.pushfirst! = Core.Compiler.pushfirst!  [functionalias @ Core.Compiler.EscapeAnalysis.pushfirst!]
const Core.Compiler.EscapeAnalysis.setfield!_nothrow = Core.Compiler.setfield!_nothrow  [functionalias @ Core.Compiler.EscapeAnalysis.setfield!_nothrow]
const Core.Compiler.EscapeAnalysis.setindex! = Core.Compiler.setindex!  [functionalias @ Core.Compiler.EscapeAnalysis.setindex!]
const Core.Compiler.EscapeAnalysis.singleton_type = Core.Compiler.singleton_type  [functionalias @ Core.Compiler.EscapeAnalysis.singleton_type]
const Core.Compiler.EscapeAnalysis.sizeof = Core.sizeof  [functionalias @ Core.Compiler.EscapeAnalysis.sizeof]
const Core.Compiler.EscapeAnalysis.specialize_method = Core.Compiler.specialize_method  [functionalias @ Core.Compiler.EscapeAnalysis.specialize_method]
const Core.Compiler.EscapeAnalysis.stmt_effect_free = Core.Compiler.stmt_effect_free  [functionalias @ Core.Compiler.EscapeAnalysis.stmt_effect_free]
const Core.Compiler.EscapeAnalysis.try_compute_field = Core.Compiler.try_compute_field  [functionalias @ Core.Compiler.EscapeAnalysis.try_compute_field]
const Core.Compiler.EscapeAnalysis.try_compute_fieldidx = Core.Compiler.try_compute_fieldidx  [functionalias @ Core.Compiler.EscapeAnalysis.try_compute_fieldidx]
const Core.Compiler.EscapeAnalysis.typemax = Core.Compiler.typemax  [functionalias @ Core.Compiler.EscapeAnalysis.typemax]
const Core.Compiler.EscapeAnalysis.union! = Core.Compiler.union!  [functionalias @ Core.Compiler.EscapeAnalysis.union!]
const Core.Compiler.EscapeAnalysis.unwrap_unionall = Core.Compiler.unwrap_unionall  [functionalias @ Core.Compiler.EscapeAnalysis.unwrap_unionall]
const Core.Compiler.EscapeAnalysis.validate_sparams = Core.Compiler.validate_sparams  [functionalias @ Core.Compiler.EscapeAnalysis.validate_sparams]
const Core.Compiler.EscapeAnalysis.widenconst = Core.Compiler.widenconst  [functionalias @ Core.Compiler.EscapeAnalysis.widenconst]
const Core.Compiler.EscapeAnalysis.zero = Core.Compiler.zero  [functionalias @ Core.Compiler.EscapeAnalysis.zero]
const Core.Compiler.EscapeAnalysis.zeros = Core.Compiler.zeros  [functionalias @ Core.Compiler.EscapeAnalysis.zeros]
const Core.Compiler.EscapeAnalysis.| = Core.Compiler.|  [functionalias @ Core.Compiler.EscapeAnalysis.|]
const Core.Compiler.EscapeAnalysis.∈ = Core.Compiler.in  [functionalias @ Core.Compiler.EscapeAnalysis.∈]
const Core.Compiler.EscapeAnalysis.∉ = Core.Compiler.∉  [functionalias @ Core.Compiler.EscapeAnalysis.∉]
const Core.Compiler.EscapeAnalysis.∩ = Core.Compiler.intersect  [functionalias @ Core.Compiler.EscapeAnalysis.∩]
const Core.Compiler.EscapeAnalysis.∪ = Core.Compiler.union  [functionalias @ Core.Compiler.EscapeAnalysis.∪]
const Core.Compiler.EscapeAnalysis.≠ = Core.Compiler.!=  [functionalias @ Core.Compiler.EscapeAnalysis.≠]
const Core.Compiler.EscapeAnalysis.≤ = Core.Compiler.<=  [functionalias @ Core.Compiler.EscapeAnalysis.≤]
const Core.Compiler.EscapeAnalysis.≥ = Core.Compiler.>=  [functionalias @ Core.Compiler.EscapeAnalysis.≥]
const Core.Compiler.EscapeAnalysis.⊆ = Core.Compiler.issubset  [functionalias @ Core.Compiler.EscapeAnalysis.⊆]
const Core.Compiler.EscapeAnalysis.⊑ = Core.Compiler.⊑  [functionalias @ Core.Compiler.EscapeAnalysis.⊑]
const Core.Compiler.EscapeState = Core.Compiler.EscapeAnalysis.EscapeState  [typealias @ Core.Compiler.EscapeState]
const Core.Compiler.IPOResultLattice = Core.Compiler.InterConditionalsLattice{Core.Compiler.PartialsLattice{Core.Compiler.ConstsLattice}}  [typealias @ Core.Compiler.IPOResultLattice]
const Core.Compiler.Indices = Tuple{Vararg{Core.Compiler.AbstractUnitRange, N}} where N  [typealias @ Core.Compiler.Indices]
const Core.Compiler.InlineCostType = Core.UInt16  [typealias @ Core.Compiler.InlineCostType]
const Core.Compiler.IntOrInd = Union{Core.Int64, Core.Compiler.AbstractUnitRange}  [typealias @ Core.Compiler.IntOrInd]
const Core.Compiler.InterConditional = Core.InterConditional  [typealias @ Core.Compiler.InterConditional]
const Core.Compiler.IntrinsicFunction = Core.IntrinsicFunction  [typealias @ Core.Compiler.IntrinsicFunction]
const Core.Compiler.Iterators.@__MODULE__ = Core.Compiler.@__MODULE__  [functionalias @ Core.Compiler.Iterators.@__MODULE__]
const Core.Compiler.Iterators.Base = Core.Compiler  [modulealias @ Core.Compiler.Iterators.Base]
const Core.Compiler.Iterators.IteratorEltype = Core.Compiler.IteratorEltype  [typealias @ Core.Compiler.Iterators.IteratorEltype]
const Core.Compiler.Iterators.IteratorSize = Core.Compiler.IteratorSize  [typealias @ Core.Compiler.Iterators.IteratorSize]
const Core.Compiler.Iterators.axes = Core.Compiler.axes  [functionalias @ Core.Compiler.Iterators.axes]
const Core.Compiler.Iterators.eltype = Core.Compiler.eltype  [functionalias @ Core.Compiler.Iterators.eltype]
const Core.Compiler.Iterators.first = Core.Compiler.first  [functionalias @ Core.Compiler.Iterators.first]
const Core.Compiler.Iterators.get = Core.Compiler.get  [functionalias @ Core.Compiler.Iterators.get]
const Core.Compiler.Iterators.getindex = Core.Compiler.getindex  [functionalias @ Core.Compiler.Iterators.getindex]
const Core.Compiler.Iterators.haskey = Core.Compiler.haskey  [functionalias @ Core.Compiler.Iterators.haskey]
const Core.Compiler.Iterators.intersect = Core.Compiler.intersect  [functionalias @ Core.Compiler.Iterators.intersect]
const Core.Compiler.Iterators.isdone = Core.Compiler.isdone  [functionalias @ Core.Compiler.Iterators.isdone]
const Core.Compiler.Iterators.isempty = Core.Compiler.isempty  [functionalias @ Core.Compiler.Iterators.isempty]
const Core.Compiler.Iterators.iterate = Core.Compiler.iterate  [functionalias @ Core.Compiler.Iterators.iterate]
const Core.Compiler.Iterators.keys = Core.Compiler.keys  [functionalias @ Core.Compiler.Iterators.keys]
const Core.Compiler.Iterators.last = Core.Compiler.last  [functionalias @ Core.Compiler.Iterators.last]
const Core.Compiler.Iterators.length = Core.Compiler.length  [functionalias @ Core.Compiler.Iterators.length]
const Core.Compiler.Iterators.ndims = Core.Compiler.ndims  [functionalias @ Core.Compiler.Iterators.ndims]
const Core.Compiler.Iterators.pairs = Core.Compiler.pairs  [functionalias @ Core.Compiler.Iterators.pairs]
const Core.Compiler.Iterators.parentmodule = Core.Compiler.parentmodule  [functionalias @ Core.Compiler.Iterators.parentmodule]
const Core.Compiler.Iterators.peek = Core.Compiler.peek  [functionalias @ Core.Compiler.Iterators.peek]
const Core.Compiler.Iterators.popfirst! = Core.Compiler.popfirst!  [functionalias @ Core.Compiler.Iterators.popfirst!]
const Core.Compiler.Iterators.setindex! = Core.Compiler.setindex!  [functionalias @ Core.Compiler.Iterators.setindex!]
const Core.Compiler.Iterators.size = Core.Compiler.size  [functionalias @ Core.Compiler.Iterators.size]
const Core.Compiler.Iterators.values = Core.Compiler.values  [functionalias @ Core.Compiler.Iterators.values]
const Core.Compiler.LazyDomtree = Core.Compiler.LazyGenericDomtree{false}  [typealias @ Core.Compiler.LazyDomtree]
const Core.Compiler.LazyPostDomtree = Core.Compiler.LazyGenericDomtree{true}  [typealias @ Core.Compiler.LazyPostDomtree]
const Core.Compiler.LiftedLeaves = Core.Compiler.IdDict{Core.Any, Union{Core.Nothing, Core.Compiler.LiftedValue}}  [typealias @ Core.Compiler.LiftedLeaves]
const Core.Compiler.Matrix = Core.Array{T, 2} where T  [typealias @ Core.Compiler.Matrix]
const Core.Compiler.MaybeAbstractIterationInfo = Union{Core.Nothing, Core.Compiler.AbstractIterationInfo}  [typealias @ Core.Compiler.MaybeAbstractIterationInfo]
const Core.Compiler.MethodInstance = Core.MethodInstance  [typealias @ Core.Compiler.MethodInstance]
const Core.Compiler.MethodMatch = Core.MethodMatch  [typealias @ Core.Compiler.MethodMatch]
const Core.Compiler.NeedsShaping = Union{Tuple{Core.Integer, Vararg{Core.Integer}}, Tuple{Core.Compiler.OneTo, Vararg{Core.Compiler.OneTo}}}  [typealias @ Core.Compiler.NeedsShaping]
const Core.Compiler.Order.! = Core.Compiler.!  [functionalias @ Core.Compiler.Order.!]
const Core.Compiler.Order.& = Core.Compiler.&  [functionalias @ Core.Compiler.Order.&]
const Core.Compiler.Order.+ = Core.Compiler.+  [functionalias @ Core.Compiler.Order.+]
const Core.Compiler.Order.- = Core.Compiler.-  [functionalias @ Core.Compiler.Order.-]
const Core.Compiler.Order.< = Core.Compiler.<  [functionalias @ Core.Compiler.Order.<]
const Core.Compiler.Order.@__MODULE__ = Core.Compiler.@__MODULE__  [functionalias @ Core.Compiler.Order.@__MODULE__]
const Core.Compiler.Order.@propagate_inbounds = Core.Compiler.@propagate_inbounds  [functionalias @ Core.Compiler.Order.@propagate_inbounds]
const Core.Compiler.Order.AbstractVector = Core.AbstractArray{T, 1} where T  [typealias @ Core.Compiler.Order.AbstractVector]
const Core.Compiler.Order.Base = Core.Compiler  [modulealias @ Core.Compiler.Order.Base]
const Core.Compiler.Order.DirectOrdering = Union{Core.Compiler.Order.ForwardOrdering, Core.Compiler.Order.ReverseOrdering{Core.Compiler.Order.ForwardOrdering}}  [typealias @ Core.Compiler.Order.DirectOrdering]
const Core.Compiler.Order.getindex = Core.Compiler.getindex  [functionalias @ Core.Compiler.Order.getindex]
const Core.Compiler.Order.identity = Core.Compiler.identity  [functionalias @ Core.Compiler.Order.identity]
const Core.Compiler.Order.isless = Core.Compiler.isless  [functionalias @ Core.Compiler.Order.isless]
const Core.Compiler.Order.parentmodule = Core.Compiler.parentmodule  [functionalias @ Core.Compiler.Order.parentmodule]
const Core.Compiler.Order.reverse = Core.Compiler.reverse  [functionalias @ Core.Compiler.Order.reverse]
const Core.Compiler.Order.| = Core.Compiler.|  [functionalias @ Core.Compiler.Order.|]
const Core.Compiler.OverflowSafe = Union{Core.Bool, Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}  [typealias @ Core.Compiler.OverflowSafe]
const Core.Compiler.PartialOpaque = Core.PartialOpaque  [typealias @ Core.Compiler.PartialOpaque]
const Core.Compiler.PartialStruct = Core.PartialStruct  [typealias @ Core.Compiler.PartialStruct]
const Core.Compiler.PostDomTree = Core.Compiler.GenericDomTree{true}  [typealias @ Core.Compiler.PostDomTree]
const Core.Compiler.PostNumber = Core.Int64  [typealias @ Core.Compiler.PostNumber]
const Core.Compiler.PreNumber = Core.Int64  [typealias @ Core.Compiler.PreNumber]
const Core.Compiler.RangeIndex = Union{Core.Compiler.AbstractRange{<:Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}}, var"#s138"} where var"#s138"<:Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}  [typealias @ Core.Compiler.RangeIndex]
const Core.Compiler.RangeVecIntList = Union{Tuple{Vararg{Union{Base.AbstractVector{Core.Int64}, Core.Compiler.AbstractRange}}}, Base.AbstractVector{A}} where A<:Base.AbstractVector{Core.Int64}  [typealias @ Core.Compiler.RangeVecIntList]
const Core.Compiler.SPCSet = Core.Compiler.IdSet{Core.Int64}  [typealias @ Core.Compiler.SPCSet]
const Core.Compiler.SignedInt = Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8}  [typealias @ Core.Compiler.SignedInt]
const Core.Compiler.SimpleVector = Core.SimpleVector  [typealias @ Core.Compiler.SimpleVector]
const Core.Compiler.TP = Union{Core.Type{Core.Pair{K, V}}, Core.Type{Tuple{K, V}}} where {K, V}  [typealias @ Core.Compiler.TP]
const Core.Compiler.TypeofVararg = Core.TypeofVararg  [typealias @ Core.Compiler.TypeofVararg]
const Core.Compiler.UnsignedInt = Union{Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}  [typealias @ Core.Compiler.UnsignedInt]
const Core.Compiler.VarTable = Core.Array{Core.Compiler.VarState, 1}  [typealias @ Core.Compiler.VarTable]
const Core.Compiler.VecOrMat = Union{Core.Array{T, 1}, Core.Array{T, 2}} where T  [typealias @ Core.Compiler.VecOrMat]
const Core.Compiler.Vector = Core.Array{T, 1} where T  [typealias @ Core.Compiler.Vector]
const Core.Compiler._apply_iterate = Core._apply_iterate  [functionalias @ Core.Compiler._apply_iterate]
const Core.Compiler._return_type = Core.Compiler.return_type  [functionalias @ Core.Compiler._return_type]
const Core.Compiler._uncompressed_ast = Core.Compiler._uncompressed_ir  [functionalias @ Core.Compiler._uncompressed_ast]
const Core.Compiler.apply_type = Core.apply_type  [functionalias @ Core.Compiler.apply_type]
const Core.Compiler.arrayref = Core.arrayref  [functionalias @ Core.Compiler.arrayref]
const Core.Compiler.checked_add = Core.Compiler.+  [functionalias @ Core.Compiler.checked_add]
const Core.Compiler.checked_sub = Core.Compiler.-  [functionalias @ Core.Compiler.checked_sub]
const Core.Compiler.compilerbarrier = Core.compilerbarrier  [functionalias @ Core.Compiler.compilerbarrier]
const Core.Compiler.donotdelete = Core.donotdelete  [functionalias @ Core.Compiler.donotdelete]
const Core.Compiler.getproperty = Core.getfield  [functionalias @ Core.Compiler.getproperty]
const Core.Compiler.is_expr = Core.Compiler.isexpr  [functionalias @ Core.Compiler.is_expr]
const Core.Compiler.is_ipo_profitable = Core.Compiler.EscapeAnalysis.is_ipo_profitable  [functionalias @ Core.Compiler.is_ipo_profitable]
const Core.Compiler.modifyproperty! = Core.modifyfield!  [functionalias @ Core.Compiler.modifyproperty!]
const Core.Compiler.print = Core.print  [functionalias @ Core.Compiler.print]
const Core.Compiler.println = Core.println  [functionalias @ Core.Compiler.println]
const Core.Compiler.replaceproperty! = Core.replacefield!  [functionalias @ Core.Compiler.replaceproperty!]
const Core.Compiler.setproperty! = Core.setfield!  [functionalias @ Core.Compiler.setproperty!]
const Core.Compiler.show = Core.show  [functionalias @ Core.Compiler.show]
const Core.Compiler.svec = Core.svec  [functionalias @ Core.Compiler.svec]
const Core.Compiler.swapproperty! = Core.swapfield!  [functionalias @ Core.Compiler.swapproperty!]
const Core.Compiler.uncompressed_ast = Core.Compiler.uncompressed_ir  [functionalias @ Core.Compiler.uncompressed_ast]
const Core.Compiler.unsafe_write = Core.unsafe_write  [functionalias @ Core.Compiler.unsafe_write]
const Core.Compiler.write = Core.write  [functionalias @ Core.Compiler.write]
const Core.Compiler.÷ = Core.Compiler.div  [functionalias @ Core.Compiler.÷]
const Core.Compiler.∈ = Core.Compiler.in  [functionalias @ Core.Compiler.∈]
const Core.Compiler.∩ = Core.Compiler.intersect  [functionalias @ Core.Compiler.∩]
const Core.Compiler.∪ = Core.Compiler.union  [functionalias @ Core.Compiler.∪]
const Core.Compiler.≠ = Core.Compiler.!=  [functionalias @ Core.Compiler.≠]
const Core.Compiler.≡ = Core.===  [functionalias @ Core.Compiler.≡]
const Core.Compiler.≢ = Core.Compiler.!==  [functionalias @ Core.Compiler.≢]
const Core.Compiler.≤ = Core.Compiler.<=  [functionalias @ Core.Compiler.≤]
const Core.Compiler.≥ = Core.Compiler.>=  [functionalias @ Core.Compiler.≥]
const Core.Compiler.⊆ = Core.Compiler.issubset  [functionalias @ Core.Compiler.⊆]
const Core.Compiler.⊻ = Core.Compiler.xor  [functionalias @ Core.Compiler.⊻]
const Core.Compiler.⊼ = Core.Compiler.nand  [functionalias @ Core.Compiler.⊼]
const Core.Compiler.⊽ = Core.Compiler.nor  [functionalias @ Core.Compiler.⊽]
const Core.Cvoid = Core.Nothing  @soft  [typealias @ Core.Cvoid]
const Core.IR.Argument = Core.Argument  [typealias @ Core.IR.Argument]
const Core.IR.CodeInfo = Core.CodeInfo  [typealias @ Core.IR.CodeInfo]
const Core.IR.CodeInstance = Core.CodeInstance  [typealias @ Core.IR.CodeInstance]
const Core.IR.Const = Core.Const  [typealias @ Core.IR.Const]
const Core.IR.GotoIfNot = Core.GotoIfNot  [typealias @ Core.IR.GotoIfNot]
const Core.IR.GotoNode = Core.GotoNode  [typealias @ Core.IR.GotoNode]
const Core.IR.LineInfoNode = Core.LineInfoNode  [typealias @ Core.IR.LineInfoNode]
const Core.IR.MethodInstance = Core.MethodInstance  [typealias @ Core.IR.MethodInstance]
const Core.IR.NewvarNode = Core.NewvarNode  [typealias @ Core.IR.NewvarNode]
const Core.IR.PartialStruct = Core.PartialStruct  [typealias @ Core.IR.PartialStruct]
const Core.IR.PhiCNode = Core.PhiCNode  [typealias @ Core.IR.PhiCNode]
const Core.IR.PhiNode = Core.PhiNode  [typealias @ Core.IR.PhiNode]
const Core.IR.PiNode = Core.PiNode  [typealias @ Core.IR.PiNode]
const Core.IR.ReturnNode = Core.ReturnNode  [typealias @ Core.IR.ReturnNode]
const Core.IR.SSAValue = Core.SSAValue  [typealias @ Core.IR.SSAValue]
const Core.IR.Slot = Core.Slot  [typealias @ Core.IR.Slot]
const Core.IR.SlotNumber = Core.SlotNumber  [typealias @ Core.IR.SlotNumber]
const Core.IR.TypedSlot = Core.TypedSlot  [typealias @ Core.IR.TypedSlot]
const Core.IR.UpsilonNode = Core.UpsilonNode  [typealias @ Core.IR.UpsilonNode]
const Core.Int = Core.Int64  @soft  [typealias @ Core.Int]
const Core.Intrinsics.abs_float = Core.abs_float  [functionalias @ Core.Intrinsics.abs_float]
const Core.Intrinsics.add_float = Core.add_float  [functionalias @ Core.Intrinsics.add_float]
const Core.Intrinsics.add_float_fast = Core.add_float_fast  [functionalias @ Core.Intrinsics.add_float_fast]
const Core.Intrinsics.add_int = Core.add_int  [functionalias @ Core.Intrinsics.add_int]
const Core.Intrinsics.add_ptr = Core.add_ptr  [functionalias @ Core.Intrinsics.add_ptr]
const Core.Intrinsics.and_int = Core.and_int  [functionalias @ Core.Intrinsics.and_int]
const Core.Intrinsics.arraylen = Core.arraylen  [functionalias @ Core.Intrinsics.arraylen]
const Core.Intrinsics.ashr_int = Core.ashr_int  [functionalias @ Core.Intrinsics.ashr_int]
const Core.Intrinsics.atomic_fence = Core.atomic_fence  [functionalias @ Core.Intrinsics.atomic_fence]
const Core.Intrinsics.atomic_pointermodify = Core.atomic_pointermodify  [functionalias @ Core.Intrinsics.atomic_pointermodify]
const Core.Intrinsics.atomic_pointerref = Core.atomic_pointerref  [functionalias @ Core.Intrinsics.atomic_pointerref]
const Core.Intrinsics.atomic_pointerreplace = Core.atomic_pointerreplace  [functionalias @ Core.Intrinsics.atomic_pointerreplace]
const Core.Intrinsics.atomic_pointerset = Core.atomic_pointerset  [functionalias @ Core.Intrinsics.atomic_pointerset]
const Core.Intrinsics.atomic_pointerswap = Core.atomic_pointerswap  [functionalias @ Core.Intrinsics.atomic_pointerswap]
const Core.Intrinsics.bitcast = Core.bitcast  [functionalias @ Core.Intrinsics.bitcast]
const Core.Intrinsics.bswap_int = Core.bswap_int  [functionalias @ Core.Intrinsics.bswap_int]
const Core.Intrinsics.ceil_llvm = Core.ceil_llvm  [functionalias @ Core.Intrinsics.ceil_llvm]
const Core.Intrinsics.cglobal = Core.cglobal  [functionalias @ Core.Intrinsics.cglobal]
const Core.Intrinsics.checked_sadd_int = Core.checked_sadd_int  [functionalias @ Core.Intrinsics.checked_sadd_int]
const Core.Intrinsics.checked_sdiv_int = Core.checked_sdiv_int  [functionalias @ Core.Intrinsics.checked_sdiv_int]
const Core.Intrinsics.checked_smul_int = Core.checked_smul_int  [functionalias @ Core.Intrinsics.checked_smul_int]
const Core.Intrinsics.checked_srem_int = Core.checked_srem_int  [functionalias @ Core.Intrinsics.checked_srem_int]
const Core.Intrinsics.checked_ssub_int = Core.checked_ssub_int  [functionalias @ Core.Intrinsics.checked_ssub_int]
const Core.Intrinsics.checked_uadd_int = Core.checked_uadd_int  [functionalias @ Core.Intrinsics.checked_uadd_int]
const Core.Intrinsics.checked_udiv_int = Core.checked_udiv_int  [functionalias @ Core.Intrinsics.checked_udiv_int]
const Core.Intrinsics.checked_umul_int = Core.checked_umul_int  [functionalias @ Core.Intrinsics.checked_umul_int]
const Core.Intrinsics.checked_urem_int = Core.checked_urem_int  [functionalias @ Core.Intrinsics.checked_urem_int]
const Core.Intrinsics.checked_usub_int = Core.checked_usub_int  [functionalias @ Core.Intrinsics.checked_usub_int]
const Core.Intrinsics.copysign_float = Core.copysign_float  [functionalias @ Core.Intrinsics.copysign_float]
const Core.Intrinsics.ctlz_int = Core.ctlz_int  [functionalias @ Core.Intrinsics.ctlz_int]
const Core.Intrinsics.ctpop_int = Core.ctpop_int  [functionalias @ Core.Intrinsics.ctpop_int]
const Core.Intrinsics.cttz_int = Core.cttz_int  [functionalias @ Core.Intrinsics.cttz_int]
const Core.Intrinsics.div_float = Core.div_float  [functionalias @ Core.Intrinsics.div_float]
const Core.Intrinsics.div_float_fast = Core.div_float_fast  [functionalias @ Core.Intrinsics.div_float_fast]
const Core.Intrinsics.eq_float = Core.eq_float  [functionalias @ Core.Intrinsics.eq_float]
const Core.Intrinsics.eq_float_fast = Core.eq_float_fast  [functionalias @ Core.Intrinsics.eq_float_fast]
const Core.Intrinsics.eq_int = Core.eq_int  [functionalias @ Core.Intrinsics.eq_int]
const Core.Intrinsics.flipsign_int = Core.flipsign_int  [functionalias @ Core.Intrinsics.flipsign_int]
const Core.Intrinsics.floor_llvm = Core.floor_llvm  [functionalias @ Core.Intrinsics.floor_llvm]
const Core.Intrinsics.fma_float = Core.fma_float  [functionalias @ Core.Intrinsics.fma_float]
const Core.Intrinsics.fpext = Core.fpext  [functionalias @ Core.Intrinsics.fpext]
const Core.Intrinsics.fpiseq = Core.fpiseq  [functionalias @ Core.Intrinsics.fpiseq]
const Core.Intrinsics.fptosi = Core.fptosi  [functionalias @ Core.Intrinsics.fptosi]
const Core.Intrinsics.fptoui = Core.fptoui  [functionalias @ Core.Intrinsics.fptoui]
const Core.Intrinsics.fptrunc = Core.fptrunc  [functionalias @ Core.Intrinsics.fptrunc]
const Core.Intrinsics.have_fma = Core.have_fma  [functionalias @ Core.Intrinsics.have_fma]
const Core.Intrinsics.le_float = Core.le_float  [functionalias @ Core.Intrinsics.le_float]
const Core.Intrinsics.le_float_fast = Core.le_float_fast  [functionalias @ Core.Intrinsics.le_float_fast]
const Core.Intrinsics.llvmcall = Core.llvmcall  [functionalias @ Core.Intrinsics.llvmcall]
const Core.Intrinsics.lshr_int = Core.lshr_int  [functionalias @ Core.Intrinsics.lshr_int]
const Core.Intrinsics.lt_float = Core.lt_float  [functionalias @ Core.Intrinsics.lt_float]
const Core.Intrinsics.lt_float_fast = Core.lt_float_fast  [functionalias @ Core.Intrinsics.lt_float_fast]
const Core.Intrinsics.mul_float = Core.mul_float  [functionalias @ Core.Intrinsics.mul_float]
const Core.Intrinsics.mul_float_fast = Core.mul_float_fast  [functionalias @ Core.Intrinsics.mul_float_fast]
const Core.Intrinsics.mul_int = Core.mul_int  [functionalias @ Core.Intrinsics.mul_int]
const Core.Intrinsics.muladd_float = Core.muladd_float  [functionalias @ Core.Intrinsics.muladd_float]
const Core.Intrinsics.ne_float = Core.ne_float  [functionalias @ Core.Intrinsics.ne_float]
const Core.Intrinsics.ne_float_fast = Core.ne_float_fast  [functionalias @ Core.Intrinsics.ne_float_fast]
const Core.Intrinsics.ne_int = Core.ne_int  [functionalias @ Core.Intrinsics.ne_int]
const Core.Intrinsics.neg_float = Core.neg_float  [functionalias @ Core.Intrinsics.neg_float]
const Core.Intrinsics.neg_float_fast = Core.neg_float_fast  [functionalias @ Core.Intrinsics.neg_float_fast]
const Core.Intrinsics.neg_int = Core.neg_int  [functionalias @ Core.Intrinsics.neg_int]
const Core.Intrinsics.not_int = Core.not_int  [functionalias @ Core.Intrinsics.not_int]
const Core.Intrinsics.or_int = Core.or_int  [functionalias @ Core.Intrinsics.or_int]
const Core.Intrinsics.pointerref = Core.pointerref  [functionalias @ Core.Intrinsics.pointerref]
const Core.Intrinsics.pointerset = Core.pointerset  [functionalias @ Core.Intrinsics.pointerset]
const Core.Intrinsics.rem_float = Core.rem_float  [functionalias @ Core.Intrinsics.rem_float]
const Core.Intrinsics.rem_float_fast = Core.rem_float_fast  [functionalias @ Core.Intrinsics.rem_float_fast]
const Core.Intrinsics.rint_llvm = Core.rint_llvm  [functionalias @ Core.Intrinsics.rint_llvm]
const Core.Intrinsics.sdiv_int = Core.sdiv_int  [functionalias @ Core.Intrinsics.sdiv_int]
const Core.Intrinsics.sext_int = Core.sext_int  [functionalias @ Core.Intrinsics.sext_int]
const Core.Intrinsics.shl_int = Core.shl_int  [functionalias @ Core.Intrinsics.shl_int]
const Core.Intrinsics.sitofp = Core.sitofp  [functionalias @ Core.Intrinsics.sitofp]
const Core.Intrinsics.sle_int = Core.sle_int  [functionalias @ Core.Intrinsics.sle_int]
const Core.Intrinsics.slt_int = Core.slt_int  [functionalias @ Core.Intrinsics.slt_int]
const Core.Intrinsics.sqrt_llvm = Core.sqrt_llvm  [functionalias @ Core.Intrinsics.sqrt_llvm]
const Core.Intrinsics.sqrt_llvm_fast = Core.sqrt_llvm_fast  [functionalias @ Core.Intrinsics.sqrt_llvm_fast]
const Core.Intrinsics.srem_int = Core.srem_int  [functionalias @ Core.Intrinsics.srem_int]
const Core.Intrinsics.sub_float = Core.sub_float  [functionalias @ Core.Intrinsics.sub_float]
const Core.Intrinsics.sub_float_fast = Core.sub_float_fast  [functionalias @ Core.Intrinsics.sub_float_fast]
const Core.Intrinsics.sub_int = Core.sub_int  [functionalias @ Core.Intrinsics.sub_int]
const Core.Intrinsics.sub_ptr = Core.sub_ptr  [functionalias @ Core.Intrinsics.sub_ptr]
const Core.Intrinsics.trunc_int = Core.trunc_int  [functionalias @ Core.Intrinsics.trunc_int]
const Core.Intrinsics.trunc_llvm = Core.trunc_llvm  [functionalias @ Core.Intrinsics.trunc_llvm]
const Core.Intrinsics.udiv_int = Core.udiv_int  [functionalias @ Core.Intrinsics.udiv_int]
const Core.Intrinsics.uitofp = Core.uitofp  [functionalias @ Core.Intrinsics.uitofp]
const Core.Intrinsics.ule_int = Core.ule_int  [functionalias @ Core.Intrinsics.ule_int]
const Core.Intrinsics.ult_int = Core.ult_int  [functionalias @ Core.Intrinsics.ult_int]
const Core.Intrinsics.urem_int = Core.urem_int  [functionalias @ Core.Intrinsics.urem_int]
const Core.Intrinsics.xor_int = Core.xor_int  [functionalias @ Core.Intrinsics.xor_int]
const Core.Intrinsics.zext_int = Core.zext_int  [functionalias @ Core.Intrinsics.zext_int]
const Core.Main = Main  @soft  [modulealias @ Core.Main]
const Core.NTuple = Tuple{Vararg{T, N}} where {N, T}  @soft  [typealias @ Core.NTuple]
const Core.UInt = Core.UInt64  @soft  [typealias @ Core.UInt]
const Core._parse = Core.Compiler.fl_parse  [functionalias @ Core._parse]
const Core.atdoc = Base.Docs.docm  [functionalias @ Core.atdoc]
const Core.getproperty = Core.getfield  [functionalias @ Core.getproperty]
const Core.setproperty! = Core.setfield!  [functionalias @ Core.setproperty!]
const Base.% = Base.rem  @soft  [functionalias @ Base.%]
const Base.' = Base.adjoint  @soft  [functionalias @ Base.']
const Base.: = Base.Colon  @soft  [functionalias @ Base.:]
const Base.<: = Core.<:  @soft  [functionalias @ Base.<:]
const Base.=> = Core.Pair  @soft  [typealias @ Base.=>]
const Base.@MIME_str = Base.Multimedia.@MIME_str  @soft  [functionalias @ Base.@MIME_str]
const Base.@__doc__ = Core.@__doc__  [functionalias @ Base.@__doc__]
const Base.@__dot__ = Base.Broadcast.@__dot__  @soft  [functionalias @ Base.@__dot__]
const Base.@_inline_meta = Base.@inline  [functionalias @ Base.@_inline_meta]
const Base.@_noinline_meta = Base.@noinline  [functionalias @ Base.@_noinline_meta]
const Base.@big_str = Core.@big_str  @soft  [functionalias @ Base.@big_str]
const Base.@cmd = Core.@cmd  @soft  [functionalias @ Base.@cmd]
const Base.@debug = Base.CoreLogging.@debug  @soft  [functionalias @ Base.@debug]
const Base.@doc = Core.@doc  @soft  [functionalias @ Base.@doc]
const Base.@enum = Base.Enums.@enum  @soft  [functionalias @ Base.@enum]
const Base.@error = Base.CoreLogging.@error  @soft  [functionalias @ Base.@error]
const Base.@evalpoly = Base.Math.@evalpoly  @soft  [functionalias @ Base.@evalpoly]
const Base.@fastmath = Base.FastMath.@fastmath  @soft  [functionalias @ Base.@fastmath]
const Base.@html_str = Base.Docs.@html_str  @soft  [functionalias @ Base.@html_str]
const Base.@info = Base.CoreLogging.@info  @soft  [functionalias @ Base.@info]
const Base.@int128_str = Core.@int128_str  @soft  [functionalias @ Base.@int128_str]
const Base.@simd = Base.SimdLoop.@simd  @soft  [functionalias @ Base.@simd]
const Base.@text_str = Base.Docs.@text_str  @soft  [functionalias @ Base.@text_str]
const Base.@uint128_str = Core.@uint128_str  @soft  [functionalias @ Base.@uint128_str]
const Base.@warn = Base.CoreLogging.@warn  @soft  [functionalias @ Base.@warn]
const Base.AbstractArrayOrBroadcasted = Union{Base.AbstractBroadcasted, Core.AbstractArray}  [typealias @ Base.AbstractArrayOrBroadcasted]
const Base.AbstractDisplay = Base.Multimedia.AbstractDisplay  @soft  [typealias @ Base.AbstractDisplay]
const Base.AbstractMatrix = Core.AbstractArray{T, 2} where T  @soft  [typealias @ Base.AbstractMatrix]
const Base.AbstractVecOrMat = Union{Core.AbstractArray{T, 1}, Core.AbstractArray{T, 2}} where T  @soft  [typealias @ Base.AbstractVecOrMat]
const Base.AbstractVecOrTuple = Union{Tuple{Vararg{T}}, Base.AbstractVector{<:T}} where T  [typealias @ Base.AbstractVecOrTuple]
const Base.AbstractVector = Core.AbstractArray{T, 1} where T  @soft  [typealias @ Base.AbstractVector]
const Base.AbstractZeroDimArray = Core.AbstractArray{T, 0} where T  [typealias @ Base.AbstractZeroDimArray]
const Base.All16 = Tuple{T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, Vararg{T, N}} where {T, N}  [typealias @ Base.All16]
const Base.All32 = Tuple{T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, Vararg{T, N}} where {T, N}  [typealias @ Base.All32]
const Base.Any16 = Tuple{Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Vararg{Core.Any, N}} where N  [typealias @ Base.Any16]
const Base.Any32 = Tuple{Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Core.Any, Vararg{Core.Any, N}} where N  [typealias @ Base.Any32]
const Base.AnyDict = Base.Dict{Core.Any, Core.Any}  [typealias @ Base.AnyDict]
const Base.Array = Core.Array  @soft  [typealias @ Base.Array]
const Base.BigFloat = Base.MPFR.BigFloat  @soft  [typealias @ Base.BigFloat]
const Base.BigInt = Base.GMP.BigInt  @soft  [typealias @ Base.BigInt]
const Base.BinaryPlatforms.Libdl = Base.Libc.Libdl  [modulealias @ Base.BinaryPlatforms.Libdl]
const Base.BitInteger = Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}  [typealias @ Base.BitInteger]
const Base.BitInteger32 = Union{Core.Int16, Core.Int32, Core.Int8, Core.UInt16, Core.UInt32, Core.UInt8}  [typealias @ Base.BitInteger32]
const Base.BitInteger64 = Union{Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}  [typealias @ Base.BitInteger64]
const Base.BitIntegerArray = Union{Core.Array{Core.Int128, N}, Core.Array{Core.Int16, N}, Core.Array{Core.Int32, N}, Core.Array{Core.Int64, N}, Core.Array{Core.Int8, N}, Core.Array{Core.UInt128, N}, Core.Array{Core.UInt16, N}, Core.Array{Core.UInt32, N}, Core.Array{Core.UInt64, N}, Core.Array{Core.UInt8, N}} where N  [typealias @ Base.BitIntegerArray]
const Base.BitIntegerSmall = Union{Core.Int16, Core.Int32, Core.Int8, Core.UInt16, Core.UInt32, Core.UInt8}  [typealias @ Base.BitIntegerSmall]
const Base.BitIntegerType = Union{Core.Type{Core.Int128}, Core.Type{Core.Int16}, Core.Type{Core.Int32}, Core.Type{Core.Int64}, Core.Type{Core.Int8}, Core.Type{Core.UInt128}, Core.Type{Core.UInt16}, Core.Type{Core.UInt32}, Core.Type{Core.UInt64}, Core.Type{Core.UInt8}}  [typealias @ Base.BitIntegerType]
const Base.BitMatrix = Base.BitArray{2}  @soft  [typealias @ Base.BitMatrix]
const Base.BitSigned = Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8}  [typealias @ Base.BitSigned]
const Base.BitSigned32 = Union{Core.Int16, Core.Int32, Core.Int8}  [typealias @ Base.BitSigned32]
const Base.BitSigned64 = Union{Core.Int16, Core.Int32, Core.Int64, Core.Int8}  [typealias @ Base.BitSigned64]
const Base.BitSigned64T = Union{Core.Type{Core.Int16}, Core.Type{Core.Int32}, Core.Type{Core.Int64}, Core.Type{Core.Int8}}  [typealias @ Base.BitSigned64T]
const Base.BitSignedSmall = Union{Core.Int16, Core.Int32, Core.Int8}  [typealias @ Base.BitSignedSmall]
const Base.BitUnsigned = Union{Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}  [typealias @ Base.BitUnsigned]
const Base.BitUnsigned32 = Union{Core.UInt16, Core.UInt32, Core.UInt8}  [typealias @ Base.BitUnsigned32]
const Base.BitUnsigned64 = Union{Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}  [typealias @ Base.BitUnsigned64]
const Base.BitUnsigned64T = Union{Core.Type{Core.UInt16}, Core.Type{Core.UInt32}, Core.Type{Core.UInt64}, Core.Type{Core.UInt8}}  [typealias @ Base.BitUnsigned64T]
const Base.BitUnsignedSmall = Union{Core.UInt16, Core.UInt32, Core.UInt8}  [typealias @ Base.BitUnsignedSmall]
const Base.BitVector = Base.BitArray{1}  @soft  [typealias @ Base.BitVector]
const Base.Bits = Core.Array{Core.UInt64, 1}  [typealias @ Base.Bits]
const Base.Broadcast.BroadcastedChunkableOp = Base.Broadcast.Broadcasted{Style, Axes, F} where {Style<:Union{Core.Nothing, Base.Broadcast.BroadcastStyle}, Axes, F<:Union{typeof(Base.:!), typeof(Base.:&), typeof(Base.:*), typeof(Base.:(==)), typeof(Base.identity), typeof(Base.xor), typeof(Base.:|), typeof(Base.:~)}}  [typealias @ Base.Broadcast.BroadcastedChunkableOp]
const Base.Broadcast.ChunkableOp = Union{typeof(Base.:!), typeof(Base.:&), typeof(Base.:*), typeof(Base.:(==)), typeof(Base.identity), typeof(Base.xor), typeof(Base.:|), typeof(Base.:~)}  [typealias @ Base.Broadcast.ChunkableOp]
const Base.Broadcast.DefaultMatrixStyle = Base.Broadcast.DefaultArrayStyle{2}  [typealias @ Base.Broadcast.DefaultMatrixStyle]
const Base.Broadcast.DefaultVectorStyle = Base.Broadcast.DefaultArrayStyle{1}  [typealias @ Base.Broadcast.DefaultVectorStyle]
const Base.Broadcast.NestedTuple = Tuple{var"#s971", Vararg{Core.Any}} where var"#s971"<:Base.Broadcast.Broadcasted  [typealias @ Base.Broadcast.NestedTuple]
const Base.Broadcast.NonleafHandlingStyles = Union{Base.Broadcast.ArrayConflict, Base.Broadcast.DefaultArrayStyle}  [typealias @ Base.Broadcast.NonleafHandlingStyles]
const Base.Broadcast.axes = Base.axes  [functionalias @ Base.Broadcast.axes]
const Base.Broadcast.broadcast_axes = Base.axes  [functionalias @ Base.Broadcast.broadcast_axes]
const Base.Broadcast.copy = Base.copy  [functionalias @ Base.Broadcast.copy]
const Base.Broadcast.copyto! = Base.copyto!  [functionalias @ Base.Broadcast.copyto!]
const Base.ByteArray = Union{Base.CodeUnits{Core.UInt8, Core.String}, Base.Vector{Core.Int8}, Base.Vector{Core.UInt8}, Base.SubArray{Core.Int8, 1, Base.Vector{Core.Int8}, I, true} where I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}, Base.SubArray{Core.UInt8, 1, Base.CodeUnits{Core.UInt8, Core.String}, I, true} where I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}, Base.SubArray{Core.UInt8, 1, Base.Vector{Core.UInt8}, I, true} where I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}  [typealias @ Base.ByteArray]
const Base.Callable = Union{Core.Function, Core.Type}  [typealias @ Base.Callable]
const Base.CartesianIndex = Base.IteratorsMD.CartesianIndex  @soft  [typealias @ Base.CartesianIndex]
const Base.CartesianIndices = Base.IteratorsMD.CartesianIndices  @soft  [typealias @ Base.CartesianIndices]
const Base.Cchar = Core.Int8  @soft  [typealias @ Base.Cchar]
const Base.Cdouble = Core.Float64  @soft  [typealias @ Base.Cdouble]
const Base.Cfloat = Core.Float32  @soft  [typealias @ Base.Cfloat]
const Base.Chars = Union{Core.AbstractChar, Tuple{Vararg{Core.AbstractChar}}, Base.Set{<:Core.AbstractChar}, Base.AbstractVector{<:Core.AbstractChar}}  [typealias @ Base.Chars]
const Base.Checked.@inline = Base.@inline  [functionalias @ Base.Checked.@inline]
const Base.Checked.@noinline = Base.@noinline  [functionalias @ Base.Checked.@noinline]
const Base.Checked.BrokenSignedIntMul = Core.Int128  [typealias @ Base.Checked.BrokenSignedIntMul]
const Base.Checked.BrokenUnsignedIntMul = Core.UInt128  [typealias @ Base.Checked.BrokenUnsignedIntMul]
const Base.Checked.SignedInt = Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8}  [typealias @ Base.Checked.SignedInt]
const Base.Checked.UnsignedInt = Union{Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}  [typealias @ Base.Checked.UnsignedInt]
const Base.Checked.brokenSignedIntMul = Core.Int128  [typealias @ Base.Checked.brokenSignedIntMul]
const Base.Checked.brokenUnsignedIntMul = Core.UInt128  [typealias @ Base.Checked.brokenUnsignedIntMul]
const Base.Checked.checked_length = Base.checked_length  [functionalias @ Base.Checked.checked_length]
const Base.Checked.checked_sadd_int = Core.checked_sadd_int  [functionalias @ Base.Checked.checked_sadd_int]
const Base.Checked.checked_sdiv_int = Core.checked_sdiv_int  [functionalias @ Base.Checked.checked_sdiv_int]
const Base.Checked.checked_smul_int = Core.checked_smul_int  [functionalias @ Base.Checked.checked_smul_int]
const Base.Checked.checked_srem_int = Core.checked_srem_int  [functionalias @ Base.Checked.checked_srem_int]
const Base.Checked.checked_ssub_int = Core.checked_ssub_int  [functionalias @ Base.Checked.checked_ssub_int]
const Base.Checked.checked_uadd_int = Core.checked_uadd_int  [functionalias @ Base.Checked.checked_uadd_int]
const Base.Checked.checked_udiv_int = Core.checked_udiv_int  [functionalias @ Base.Checked.checked_udiv_int]
const Base.Checked.checked_umul_int = Core.checked_umul_int  [functionalias @ Base.Checked.checked_umul_int]
const Base.Checked.checked_urem_int = Core.checked_urem_int  [functionalias @ Base.Checked.checked_urem_int]
const Base.Checked.checked_usub_int = Core.checked_usub_int  [functionalias @ Base.Checked.checked_usub_int]
const Base.Checked.no_op_err = Base.no_op_err  [functionalias @ Base.Checked.no_op_err]
const Base.Cint = Core.Int32  @soft  [typealias @ Base.Cint]
const Base.Cintmax_t = Core.Int64  @soft  [typealias @ Base.Cintmax_t]
const Base.Clong = Core.Int64  @soft  [typealias @ Base.Clong]
const Base.Clonglong = Core.Int64  @soft  [typealias @ Base.Clonglong]
const Base.Cmode_t = Core.Int32  [typealias @ Base.Cmode_t]
const Base.CodeInfo = Core.CodeInfo  [typealias @ Base.CodeInfo]
const Base.CodeunitType = Union{Core.Type{Core.UInt16}, Core.Type{Core.UInt32}, Core.Type{Core.UInt8}}  [typealias @ Base.CodeunitType]
const Base.ColumnSlices = Base.Slices{P, Tuple{Base.Colon, Core.Int64}, AX, S, 1} where {P<:(Core.AbstractArray{T, 2} where T), AX, S<:(Core.AbstractArray{T, 1} where T)}  @soft  [typealias @ Base.ColumnSlices]
const Base.ComplexF16 = Base.Complex{Core.Float16}  @soft  [typealias @ Base.ComplexF16]
const Base.ComplexF32 = Base.Complex{Core.Float32}  @soft  [typealias @ Base.ComplexF32]
const Base.ComplexF64 = Base.Complex{Core.Float64}  @soft  [typealias @ Base.ComplexF64]
const Base.Condition = Base.GenericCondition{Base.AlwaysLockedST}  @soft  [typealias @ Base.Condition]
const Base.CoreDocs = Core.Compiler.CoreDocs  [modulealias @ Base.CoreDocs]
const Base.CoreLogging.+ = Base.+  [functionalias @ Base.CoreLogging.+]
const Base.CoreLogging.- = Base.-  [functionalias @ Base.CoreLogging.-]
const Base.CoreLogging.convert = Base.convert  [functionalias @ Base.CoreLogging.convert]
const Base.CoreLogging.isless = Base.isless  [functionalias @ Base.CoreLogging.isless]
const Base.CoreLogging.show = Base.show  [functionalias @ Base.CoreLogging.show]
const Base.Cptrdiff_t = Core.Int64  @soft  [typealias @ Base.Cptrdiff_t]
const Base.Cshort = Core.Int16  @soft  [typealias @ Base.Cshort]
const Base.Csize_t = Core.UInt64  @soft  [typealias @ Base.Csize_t]
const Base.Cssize_t = Core.Int64  @soft  [typealias @ Base.Cssize_t]
const Base.Cuchar = Core.UInt8  @soft  [typealias @ Base.Cuchar]
const Base.Cuint = Core.UInt32  @soft  [typealias @ Base.Cuint]
const Base.Cuintmax_t = Core.UInt64  @soft  [typealias @ Base.Cuintmax_t]
const Base.Culong = Core.UInt64  @soft  [typealias @ Base.Culong]
const Base.Culonglong = Core.UInt64  @soft  [typealias @ Base.Culonglong]
const Base.Cushort = Core.UInt16  @soft  [typealias @ Base.Cushort]
const Base.Cwchar_t = Core.Int32  @soft  [typealias @ Base.Cwchar_t]
const Base.DenseMatrix = Core.DenseArray{T, 2} where T  @soft  [typealias @ Base.DenseMatrix]
const Base.DenseVecOrMat = Union{Core.DenseArray{T, 1}, Core.DenseArray{T, 2}} where T  @soft  [typealias @ Base.DenseVecOrMat]
const Base.DenseVector = Core.DenseArray{T, 1} where T  @soft  [typealias @ Base.DenseVector]
const Base.DimOrInd = Union{Core.Integer, Base.AbstractUnitRange}  [typealias @ Base.DimOrInd]
const Base.Dims = Tuple{Vararg{Core.Int64, N}} where N  @soft  [typealias @ Base.Dims]
const Base.DimsInteger = Tuple{Vararg{Core.Integer, N}} where N  [typealias @ Base.DimsInteger]
const Base.DimsOrInds = Tuple{Vararg{Union{Core.Integer, Base.AbstractUnitRange}, N}} where N  [typealias @ Base.DimsOrInds]
const Base.Docs.== = Base.==  [functionalias @ Base.Docs.==]
const Base.Docs.Callable = Union{Core.Function, Core.Type}  [typealias @ Base.Docs.Callable]
const Base.Docs.METAType = Base.IdDict{Core.Any, Core.Any}  [typealias @ Base.Docs.METAType]
const Base.Docs.hash = Base.hash  [functionalias @ Base.Docs.hash]
const Base.Docs.isexpr = Base.isexpr  [functionalias @ Base.Docs.isexpr]
const Base.Docs.lazy_iterpolate = Core.Compiler.CoreDocs.lazy_iterpolate  [functionalias @ Base.Docs.lazy_iterpolate]
const Base.Docs.print = Base.print  [functionalias @ Base.Docs.print]
const Base.Docs.quot = Base.Meta.quot  [functionalias @ Base.Docs.quot]
const Base.Docs.show = Base.show  [functionalias @ Base.Docs.show]
const Base.Docs.with_output_color = Base.with_output_color  [functionalias @ Base.Docs.with_output_color]
const Base.Enum = Base.Enums.Enum  @soft  [typealias @ Base.Enum]
const Base.Enums.bitcast = Core.bitcast  [functionalias @ Base.Enums.bitcast]
const Base.ExprNode = Union{Core.GotoNode, Core.SSAValue, Core.Expr, Core.GlobalRef, Core.GotoIfNot, Core.LineNumberNode, Core.PhiCNode, Core.PhiNode, Core.QuoteNode, Core.ReturnNode, Core.Slot, Core.UpsilonNode}  [typealias @ Base.ExprNode]
const Base.F_or_FF = Union{Core.AbstractFloat, Tuple{Core.AbstractFloat, Core.AbstractFloat}}  [typealias @ Base.F_or_FF]
const Base.FastContiguousSubArray = Base.SubArray{T, N, P, I, true} where {T, N, P, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}  [typealias @ Base.FastContiguousSubArray]
const Base.FastMath.ComplexTypes = Union{Base.Complex{Core.Float32}, Base.Complex{Core.Float64}}  [typealias @ Base.FastMath.ComplexTypes]
const Base.FastMath.FloatTypes = Union{Core.Float16, Core.Float32, Core.Float64}  [typealias @ Base.FastMath.FloatTypes]
const Base.FastMath.add_float_fast = Core.add_float_fast  [functionalias @ Base.FastMath.add_float_fast]
const Base.FastMath.div_float_fast = Core.div_float_fast  [functionalias @ Base.FastMath.div_float_fast]
const Base.FastMath.eq_float_fast = Core.eq_float_fast  [functionalias @ Base.FastMath.eq_float_fast]
const Base.FastMath.le_float_fast = Core.le_float_fast  [functionalias @ Base.FastMath.le_float_fast]
const Base.FastMath.lt_float_fast = Core.lt_float_fast  [functionalias @ Base.FastMath.lt_float_fast]
const Base.FastMath.mul_float_fast = Core.mul_float_fast  [functionalias @ Base.FastMath.mul_float_fast]
const Base.FastMath.ne_float_fast = Core.ne_float_fast  [functionalias @ Base.FastMath.ne_float_fast]
const Base.FastMath.neg_float_fast = Core.neg_float_fast  [functionalias @ Base.FastMath.neg_float_fast]
const Base.FastMath.rem_float_fast = Core.rem_float_fast  [functionalias @ Base.FastMath.rem_float_fast]
const Base.FastMath.sqrt_llvm_fast = Core.sqrt_llvm_fast  [functionalias @ Base.FastMath.sqrt_llvm_fast]
const Base.FastMath.sub_float_fast = Core.sub_float_fast  [functionalias @ Base.FastMath.sub_float_fast]
const Base.FastSubArray = Base.SubArray{T, N, P, I, true} where {T, N, P, I}  [typealias @ Base.FastSubArray]
const Base.Filesystem.IOError = Base.IOError  [typealias @ Base.Filesystem.IOError]
const Base.Filesystem.OS_HANDLE = Base.Libc.RawFD  [typealias @ Base.Filesystem.OS_HANDLE]
const Base.Filesystem.RefValue = Base.RefValue  [typealias @ Base.Filesystem.RefValue]
const Base.Filesystem._UVError = Base._UVError  [functionalias @ Base.Filesystem._UVError]
const Base.Filesystem.bytesavailable = Base.bytesavailable  [functionalias @ Base.Filesystem.bytesavailable]
const Base.Filesystem.check_open = Base.check_open  [functionalias @ Base.Filesystem.check_open]
const Base.Filesystem.close = Base.close  [functionalias @ Base.Filesystem.close]
const Base.Filesystem.eof = Base.eof  [functionalias @ Base.Filesystem.eof]
const Base.Filesystem.eventloop = Base.eventloop  [functionalias @ Base.Filesystem.eventloop]
const Base.Filesystem.fd = Base.fd  [functionalias @ Base.Filesystem.fd]
const Base.Filesystem.filesize = Base.filesize  [functionalias @ Base.Filesystem.filesize]
const Base.Filesystem.isopen = Base.isopen  [functionalias @ Base.Filesystem.isopen]
const Base.Filesystem.position = Base.position  [functionalias @ Base.Filesystem.position]
const Base.Filesystem.rawhandle = Base.rawhandle  [functionalias @ Base.Filesystem.rawhandle]
const Base.Filesystem.read = Base.read  [functionalias @ Base.Filesystem.read]
const Base.Filesystem.read! = Base.read!  [functionalias @ Base.Filesystem.read!]
const Base.Filesystem.readavailable = Base.readavailable  [functionalias @ Base.Filesystem.readavailable]
const Base.Filesystem.seek = Base.seek  [functionalias @ Base.Filesystem.seek]
const Base.Filesystem.seekend = Base.seekend  [functionalias @ Base.Filesystem.seekend]
const Base.Filesystem.setup_stdio = Base.setup_stdio  [functionalias @ Base.Filesystem.setup_stdio]
const Base.Filesystem.show = Base.show  [functionalias @ Base.Filesystem.show]
const Base.Filesystem.skip = Base.skip  [functionalias @ Base.Filesystem.skip]
const Base.Filesystem.stat = Base.stat  [functionalias @ Base.Filesystem.stat]
const Base.Filesystem.transcode = Base.transcode  [functionalias @ Base.Filesystem.transcode]
const Base.Filesystem.unsafe_read = Base.unsafe_read  [functionalias @ Base.Filesystem.unsafe_read]
const Base.Filesystem.unsafe_write = Base.unsafe_write  [functionalias @ Base.Filesystem.unsafe_write]
const Base.Filesystem.uv_error = Base.uv_error  [functionalias @ Base.Filesystem.uv_error]
const Base.Filesystem.windowserror = Base.windowserror  [functionalias @ Base.Filesystem.windowserror]
const Base.Filesystem.write = Base.write  [functionalias @ Base.Filesystem.write]
const Base.GMP.& = Base.&  [functionalias @ Base.GMP.&]
const Base.GMP.* = Base.*  [functionalias @ Base.GMP.*]
const Base.GMP.+ = Base.+  [functionalias @ Base.GMP.+]
const Base.GMP.- = Base.-  [functionalias @ Base.GMP.-]
const Base.GMP./ = Base./  [functionalias @ Base.GMP./]
const Base.GMP.< = Base.<  [functionalias @ Base.GMP.<]
const Base.GMP.<< = Base.<<  [functionalias @ Base.GMP.<<]
const Base.GMP.<= = Base.<=  [functionalias @ Base.GMP.<=]
const Base.GMP.== = Base.==  [functionalias @ Base.GMP.==]
const Base.GMP.> = Base.>  [functionalias @ Base.GMP.>]
const Base.GMP.>= = Base.>=  [functionalias @ Base.GMP.>=]
const Base.GMP.>> = Base.>>  [functionalias @ Base.GMP.>>]
const Base.GMP.>>> = Base.>>>  [functionalias @ Base.GMP.>>>]
const Base.GMP.CdoubleMax = Union{Core.Float16, Core.Float32, Core.Float64}  [typealias @ Base.GMP.CdoubleMax]
const Base.GMP.ClongMax = Union{Core.Int16, Core.Int32, Core.Int64, Core.Int8}  [typealias @ Base.GMP.ClongMax]
const Base.GMP.CulongMax = Union{Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}  [typealias @ Base.GMP.CulongMax]
const Base.GMP.Limb = Core.UInt64  [typealias @ Base.GMP.Limb]
const Base.GMP.MPQ.BigInt = Base.GMP.BigInt  [typealias @ Base.GMP.MPQ.BigInt]
const Base.GMP.MPQ.Limb = Core.UInt64  [typealias @ Base.GMP.MPQ.Limb]
const Base.GMP.MPQ.MPZ = Base.GMP.MPZ  [modulealias @ Base.GMP.MPQ.MPZ]
const Base.GMP.MPZ.bitcnt_t = Core.UInt64  [typealias @ Base.GMP.MPZ.bitcnt_t]
const Base.GMP.MPZ.mpz_t = Core.Ref{Base.GMP.BigInt}  [typealias @ Base.GMP.MPZ.mpz_t]
const Base.GMP.MPQ.__throw_rational_argerror_zero = Base.__throw_rational_argerror_zero  [functionalias @ Base.GMP.MPQ.__throw_rational_argerror_zero]
const Base.GMP.MPQ.isneg = Base.GMP.isneg  [functionalias @ Base.GMP.MPQ.isneg]
const Base.GMP.MPQ.mpq_t = Core.Ref{Base.GMP.MPQ._MPQ}  [typealias @ Base.GMP.MPQ.mpq_t]
const Base.GMP.MPQ.unsafe_rational = Base.unsafe_rational  [functionalias @ Base.GMP.MPQ.unsafe_rational]
const Base.GMP.SLimbMax = Union{Core.Int16, Core.Int32, Core.Int64, Core.Int8}  [typealias @ Base.GMP.SLimbMax]
const Base.GMP.ULimbMax = Union{Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}  [typealias @ Base.GMP.ULimbMax]
const Base.GMP.^ = Base.^  [functionalias @ Base.GMP.^]
const Base.GMP._nextpow2 = Base._nextpow2  [functionalias @ Base.GMP._nextpow2]
const Base.GMP._prevpow2 = Base._prevpow2  [functionalias @ Base.GMP._prevpow2]
const Base.GMP.big = Base.big  [functionalias @ Base.GMP.big]
const Base.GMP.bin = Base.bin  [functionalias @ Base.GMP.bin]
const Base.GMP.binomial = Base.binomial  [functionalias @ Base.GMP.binomial]
const Base.GMP.cld = Base.cld  [functionalias @ Base.GMP.cld]
const Base.GMP.cmp = Base.cmp  [functionalias @ Base.GMP.cmp]
const Base.GMP.convert = Base.convert  [functionalias @ Base.GMP.convert]
const Base.GMP.count_ones = Base.count_ones  [functionalias @ Base.GMP.count_ones]
const Base.GMP.count_zeros = Base.count_zeros  [functionalias @ Base.GMP.count_zeros]
const Base.GMP.dec = Base.dec  [functionalias @ Base.GMP.dec]
const Base.GMP.digits! = Base.digits!  [functionalias @ Base.GMP.digits!]
const Base.GMP.div = Base.div  [functionalias @ Base.GMP.div]
const Base.GMP.divrem = Base.divrem  [functionalias @ Base.GMP.divrem]
const Base.GMP.factorial = Base.factorial  [functionalias @ Base.GMP.factorial]
const Base.GMP.fld = Base.fld  [functionalias @ Base.GMP.fld]
const Base.GMP.flipsign = Base.flipsign  [functionalias @ Base.GMP.flipsign]
const Base.GMP.gcd = Base.gcd  [functionalias @ Base.GMP.gcd]
const Base.GMP.gcdx = Base.gcdx  [functionalias @ Base.GMP.gcdx]
const Base.GMP.hash = Base.hash  [functionalias @ Base.GMP.hash]
const Base.GMP.hash_integer = Base.hash_integer  [functionalias @ Base.GMP.hash_integer]
const Base.GMP.hastypemax = Base.hastypemax  [functionalias @ Base.GMP.hastypemax]
const Base.GMP.hex = Base.hex  [functionalias @ Base.GMP.hex]
const Base.GMP.invmod = Base.invmod  [functionalias @ Base.GMP.invmod]
const Base.GMP.isequal = Base.isequal  [functionalias @ Base.GMP.isequal]
const Base.GMP.iseven = Base.iseven  [functionalias @ Base.GMP.iseven]
const Base.GMP.isodd = Base.isodd  [functionalias @ Base.GMP.isodd]
const Base.GMP.isone = Base.isone  [functionalias @ Base.GMP.isone]
const Base.GMP.isqrt = Base.isqrt  [functionalias @ Base.GMP.isqrt]
const Base.GMP.iszero = Base.iszero  [functionalias @ Base.GMP.iszero]
const Base.GMP.lcm = Base.lcm  [functionalias @ Base.GMP.lcm]
const Base.GMP.mod = Base.mod  [functionalias @ Base.GMP.mod]
const Base.GMP.nand = Base.nand  [functionalias @ Base.GMP.nand]
const Base.GMP.ndigits = Base.ndigits  [functionalias @ Base.GMP.ndigits]
const Base.GMP.ndigits0zpb = Base.ndigits0zpb  [functionalias @ Base.GMP.ndigits0zpb]
const Base.GMP.nor = Base.nor  [functionalias @ Base.GMP.nor]
const Base.GMP.oct = Base.oct  [functionalias @ Base.GMP.oct]
const Base.GMP.powermod = Base.powermod  [functionalias @ Base.GMP.powermod]
const Base.GMP.prod = Base.prod  [functionalias @ Base.GMP.prod]
const Base.GMP.promote_rule = Base.promote_rule  [functionalias @ Base.GMP.promote_rule]
const Base.GMP.rem = Base.rem  [functionalias @ Base.GMP.rem]
const Base.GMP.show = Base.show  [functionalias @ Base.GMP.show]
const Base.GMP.sign = Base.sign  [functionalias @ Base.GMP.sign]
const Base.GMP.signbit = Base.signbit  [functionalias @ Base.GMP.signbit]
const Base.GMP.signed = Base.signed  [functionalias @ Base.GMP.signed]
const Base.GMP.string = Base.string  [functionalias @ Base.GMP.string]
const Base.GMP.sum = Base.sum  [functionalias @ Base.GMP.sum]
const Base.GMP.trailing_ones = Base.trailing_ones  [functionalias @ Base.GMP.trailing_ones]
const Base.GMP.trailing_zeros = Base.trailing_zeros  [functionalias @ Base.GMP.trailing_zeros]
const Base.GMP.trunc = Base.trunc  [functionalias @ Base.GMP.trunc]
const Base.GMP.tryparse_internal = Base.tryparse_internal  [functionalias @ Base.GMP.tryparse_internal]
const Base.GMP.unsafe_trunc = Base.unsafe_trunc  [functionalias @ Base.GMP.unsafe_trunc]
const Base.GMP.widen = Base.widen  [functionalias @ Base.GMP.widen]
const Base.GMP.xor = Base.xor  [functionalias @ Base.GMP.xor]
const Base.GMP.| = Base.|  [functionalias @ Base.GMP.|]
const Base.GMP.~ = Base.~  [functionalias @ Base.GMP.~]
const Base.HTML = Base.Docs.HTML  @soft  [typealias @ Base.HTML]
const Base.HWNumber = Union{Core.Float32, Core.Float64, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8, Base.Complex{<:Union{Core.Float32, Core.Float64, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}}, Base.Rational{<:Union{Core.Float32, Core.Float64, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}}}  [typealias @ Base.HWNumber]
const Base.HWReal = Union{Core.Float32, Core.Float64, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}  [typealias @ Base.HWReal]
const Base.IEEEFloat = Union{Core.Float16, Core.Float32, Core.Float64}  [typealias @ Base.IEEEFloat]
const Base.IOBuffer = Base.GenericIOBuffer{Core.Array{Core.UInt8, 1}}  @soft  [typealias @ Base.IOBuffer]
const Base.IRShow.Argument = Core.Argument  [typealias @ Base.IRShow.Argument]
const Base.IRShow.Base = Base  [modulealias @ Base.IRShow.Base]
const Base.IRShow.CFG = Core.Compiler.CFG  [typealias @ Base.IRShow.CFG]
const Base.IRShow.Compiler = Core.Compiler  [modulealias @ Base.IRShow.Compiler]
const Base.IRShow.Effects = Core.Compiler.Effects  [typealias @ Base.IRShow.Effects]
const Base.IRShow.GotoIfNot = Core.GotoIfNot  [typealias @ Base.IRShow.GotoIfNot]
const Base.IRShow.IRCode = Core.Compiler.IRCode  [typealias @ Base.IRShow.IRCode]
const Base.IRShow.IncrementalCompact = Core.Compiler.IncrementalCompact  [typealias @ Base.IRShow.IncrementalCompact]
const Base.IRShow.ReturnNode = Core.ReturnNode  [typealias @ Base.IRShow.ReturnNode]
const Base.IRShow.block_for_inst = Core.Compiler.block_for_inst  [functionalias @ Base.IRShow.block_for_inst]
const Base.IRShow.compute_basic_blocks = Core.Compiler.compute_basic_blocks  [functionalias @ Base.IRShow.compute_basic_blocks]
const Base.IRShow.isexpr = Core.Compiler.isexpr  [functionalias @ Base.IRShow.isexpr]
const Base.IRShow.scan_ssa_use! = Core.Compiler.scan_ssa_use!  [functionalias @ Base.IRShow.scan_ssa_use!]
const Base.IRShow.show_unquoted = Base.show_unquoted  [functionalias @ Base.IRShow.show_unquoted]
const Base.Indices = Tuple{Vararg{Base.AbstractUnitRange, N}} where N  [typealias @ Base.Indices]
const Base.IntOrInd = Union{Core.Int64, Base.AbstractUnitRange}  [typealias @ Base.IntOrInd]
const Base.Iterators.@__MODULE__ = Base.@__MODULE__  [functionalias @ Base.Iterators.@__MODULE__]
const Base.Iterators.Base = Base  [modulealias @ Base.Iterators.Base]
const Base.Iterators.IteratorEltype = Base.IteratorEltype  [typealias @ Base.Iterators.IteratorEltype]
const Base.Iterators.IteratorSize = Base.IteratorSize  [typealias @ Base.Iterators.IteratorSize]
const Base.Iterators.axes = Base.axes  [functionalias @ Base.Iterators.axes]
const Base.Iterators.eltype = Base.eltype  [functionalias @ Base.Iterators.eltype]
const Base.Iterators.first = Base.first  [functionalias @ Base.Iterators.first]
const Base.Iterators.get = Base.get  [functionalias @ Base.Iterators.get]
const Base.Iterators.getindex = Base.getindex  [functionalias @ Base.Iterators.getindex]
const Base.Iterators.haskey = Base.haskey  [functionalias @ Base.Iterators.haskey]
const Base.Iterators.intersect = Base.intersect  [functionalias @ Base.Iterators.intersect]
const Base.Iterators.isdone = Base.isdone  [functionalias @ Base.Iterators.isdone]
const Base.Iterators.isempty = Base.isempty  [functionalias @ Base.Iterators.isempty]
const Base.Iterators.iterate = Base.iterate  [functionalias @ Base.Iterators.iterate]
const Base.Iterators.keys = Base.keys  [functionalias @ Base.Iterators.keys]
const Base.Iterators.last = Base.last  [functionalias @ Base.Iterators.last]
const Base.Iterators.length = Base.length  [functionalias @ Base.Iterators.length]
const Base.Iterators.ndims = Base.ndims  [functionalias @ Base.Iterators.ndims]
const Base.Iterators.pairs = Base.pairs  [functionalias @ Base.Iterators.pairs]
const Base.Iterators.parentmodule = Base.parentmodule  [functionalias @ Base.Iterators.parentmodule]
const Base.Iterators.peek = Base.peek  [functionalias @ Base.Iterators.peek]
const Base.Iterators.popfirst! = Base.popfirst!  [functionalias @ Base.Iterators.popfirst!]
const Base.Iterators.setindex! = Base.setindex!  [functionalias @ Base.Iterators.setindex!]
const Base.Iterators.size = Base.size  [functionalias @ Base.Iterators.size]
const Base.Iterators.values = Base.values  [functionalias @ Base.Iterators.values]
const Base.IteratorsMD.* = Base.*  [functionalias @ Base.IteratorsMD.*]
const Base.IteratorsMD.+ = Base.+  [functionalias @ Base.IteratorsMD.+]
const Base.IteratorsMD.- = Base.-  [functionalias @ Base.IteratorsMD.-]
const Base.IteratorsMD.: = Base.Colon  [functionalias @ Base.IteratorsMD.:]
const Base.IteratorsMD.CartesianPartition = Base.SubArray{T, 1, R, <:Tuple{Base.AbstractUnitRange{Core.Int64}}, false} where {T<:Base.IteratorsMD.CartesianIndex, P<:Base.IteratorsMD.CartesianIndices, R<:(Base.ReshapedArray{T, 1, P})}  [typealias @ Base.IteratorsMD.CartesianPartition]
const Base.IteratorsMD.IndexStyle = Base.IndexStyle  [typealias @ Base.IteratorsMD.IndexStyle]
const Base.IteratorsMD.IteratorSize = Base.IteratorSize  [typealias @ Base.IteratorsMD.IteratorSize]
const Base.IteratorsMD.OrdinalRangeInt = Base.OrdinalRange{Core.Int64, Core.Int64}  [typealias @ Base.IteratorsMD.OrdinalRangeInt]
const Base.IteratorsMD._cutdim = Base._cutdim  [functionalias @ Base.IteratorsMD._cutdim]
const Base.IteratorsMD._to_indices1 = Base._to_indices1  [functionalias @ Base.IteratorsMD._to_indices1]
const Base.IteratorsMD.convert = Base.convert  [functionalias @ Base.IteratorsMD.convert]
const Base.IteratorsMD.eachindex = Base.eachindex  [functionalias @ Base.IteratorsMD.eachindex]
const Base.IteratorsMD.eltype = Base.eltype  [functionalias @ Base.IteratorsMD.eltype]
const Base.IteratorsMD.first = Base.first  [functionalias @ Base.IteratorsMD.first]
const Base.IteratorsMD.getindex = Base.getindex  [functionalias @ Base.IteratorsMD.getindex]
const Base.IteratorsMD.in = Base.in  [functionalias @ Base.IteratorsMD.in]
const Base.IteratorsMD.isless = Base.isless  [functionalias @ Base.IteratorsMD.isless]
const Base.IteratorsMD.iterate = Base.iterate  [functionalias @ Base.IteratorsMD.iterate]
const Base.IteratorsMD.last = Base.last  [functionalias @ Base.IteratorsMD.last]
const Base.IteratorsMD.length = Base.length  [functionalias @ Base.IteratorsMD.length]
const Base.IteratorsMD.max = Base.max  [functionalias @ Base.IteratorsMD.max]
const Base.IteratorsMD.min = Base.min  [functionalias @ Base.IteratorsMD.min]
const Base.IteratorsMD.ndims = Base.ndims  [functionalias @ Base.IteratorsMD.ndims]
const Base.IteratorsMD.oneunit = Base.oneunit  [functionalias @ Base.IteratorsMD.oneunit]
const Base.IteratorsMD.promote_rule = Base.promote_rule  [functionalias @ Base.IteratorsMD.promote_rule]
const Base.IteratorsMD.setindex = Base.setindex  [functionalias @ Base.IteratorsMD.setindex]
const Base.IteratorsMD.setindex! = Base.setindex!  [functionalias @ Base.IteratorsMD.setindex!]
const Base.IteratorsMD.show = Base.show  [functionalias @ Base.IteratorsMD.show]
const Base.IteratorsMD.simd_index = Base.SimdLoop.simd_index  [functionalias @ Base.IteratorsMD.simd_index]
const Base.IteratorsMD.simd_inner_length = Base.SimdLoop.simd_inner_length  [functionalias @ Base.IteratorsMD.simd_inner_length]
const Base.IteratorsMD.simd_outer_range = Base.SimdLoop.simd_outer_range  [functionalias @ Base.IteratorsMD.simd_outer_range]
const Base.IteratorsMD.size = Base.size  [functionalias @ Base.IteratorsMD.size]
const Base.IteratorsMD.to_index = Base.to_index  [functionalias @ Base.IteratorsMD.to_index]
const Base.IteratorsMD.to_indices = Base.to_indices  [functionalias @ Base.IteratorsMD.to_indices]
const Base.IteratorsMD.zero = Base.zero  [functionalias @ Base.IteratorsMD.zero]
const Base.Libc.bitcast = Core.bitcast  [functionalias @ Base.Libc.bitcast]
const Base.Libc.show = Base.show  [functionalias @ Base.Libc.show]
const Base.Libc.transcode = Base.transcode  [functionalias @ Base.Libc.transcode]
const Base.Libc.windowserror = Base.windowserror  [functionalias @ Base.Libc.windowserror]
const Base.LinkedList = Base.IntrusiveLinkedList{Base.LinkedListItem{T}} where T  [typealias @ Base.LinkedList]
const Base.Linking.Libdl = Base.Libc.Libdl  [modulealias @ Base.Linking.Libdl]
const Base.MIME = Base.Multimedia.MIME  @soft  [typealias @ Base.MIME]
const Base.MPFR.* = Base.*  [functionalias @ Base.MPFR.*]
const Base.MPFR.+ = Base.+  [functionalias @ Base.MPFR.+]
const Base.MPFR.- = Base.-  [functionalias @ Base.MPFR.-]
const Base.MPFR./ = Base./  [functionalias @ Base.MPFR./]
const Base.MPFR.< = Base.<  [functionalias @ Base.MPFR.<]
const Base.MPFR.<= = Base.<=  [functionalias @ Base.MPFR.<=]
const Base.MPFR.== = Base.==  [functionalias @ Base.MPFR.==]
const Base.MPFR.> = Base.>  [functionalias @ Base.MPFR.>]
const Base.MPFR.>= = Base.>=  [functionalias @ Base.MPFR.>=]
const Base.MPFR.CdoubleMax = Union{Core.Float16, Core.Float32, Core.Float64}  [typealias @ Base.MPFR.CdoubleMax]
const Base.MPFR.ClongMax = Union{Core.Int16, Core.Int32, Core.Int64, Core.Int8}  [typealias @ Base.MPFR.ClongMax]
const Base.MPFR.CulongMax = Union{Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}  [typealias @ Base.MPFR.CulongMax]
const Base.MPFR.Limb = Core.UInt64  [typealias @ Base.MPFR.Limb]
const Base.MPFR.^ = Base.^  [functionalias @ Base.MPFR.^]
const Base.MPFR._precision = Base._precision  [functionalias @ Base.MPFR._precision]
const Base.MPFR._string_n = Base._string_n  [functionalias @ Base.MPFR._string_n]
const Base.MPFR.acos = Base.acos  [functionalias @ Base.MPFR.acos]
const Base.MPFR.acosh = Base.acosh  [functionalias @ Base.MPFR.acosh]
const Base.MPFR.asin = Base.asin  [functionalias @ Base.MPFR.asin]
const Base.MPFR.asinh = Base.asinh  [functionalias @ Base.MPFR.asinh]
const Base.MPFR.atan = Base.atan  [functionalias @ Base.MPFR.atan]
const Base.MPFR.atanh = Base.atanh  [functionalias @ Base.MPFR.atanh]
const Base.MPFR.big = Base.big  [functionalias @ Base.MPFR.big]
const Base.MPFR.cbrt = Base.Math.cbrt  [functionalias @ Base.MPFR.cbrt]
const Base.MPFR.ceil = Base.ceil  [functionalias @ Base.MPFR.ceil]
const Base.MPFR.cmp = Base.cmp  [functionalias @ Base.MPFR.cmp]
const Base.MPFR.convert = Base.convert  [functionalias @ Base.MPFR.convert]
const Base.MPFR.copysign = Base.copysign  [functionalias @ Base.MPFR.copysign]
const Base.MPFR.cos = Base.cos  [functionalias @ Base.MPFR.cos]
const Base.MPFR.cosh = Base.cosh  [functionalias @ Base.MPFR.cosh]
const Base.MPFR.cot = Base.Math.cot  [functionalias @ Base.MPFR.cot]
const Base.MPFR.coth = Base.Math.coth  [functionalias @ Base.MPFR.coth]
const Base.MPFR.csc = Base.Math.csc  [functionalias @ Base.MPFR.csc]
const Base.MPFR.csch = Base.Math.csch  [functionalias @ Base.MPFR.csch]
const Base.MPFR.decompose = Base.decompose  [functionalias @ Base.MPFR.decompose]
const Base.MPFR.div = Base.div  [functionalias @ Base.MPFR.div]
const Base.MPFR.eps = Base.eps  [functionalias @ Base.MPFR.eps]
const Base.MPFR.exp = Base.exp  [functionalias @ Base.MPFR.exp]
const Base.MPFR.exp10 = Base.exp10  [functionalias @ Base.MPFR.exp10]
const Base.MPFR.exp2 = Base.exp2  [functionalias @ Base.MPFR.exp2]
const Base.MPFR.expm1 = Base.expm1  [functionalias @ Base.MPFR.expm1]
const Base.MPFR.exponent = Base.Math.exponent  [functionalias @ Base.MPFR.exponent]
const Base.MPFR.factorial = Base.factorial  [functionalias @ Base.MPFR.factorial]
const Base.MPFR.float = Base.float  [functionalias @ Base.MPFR.float]
const Base.MPFR.floatmax = Base.floatmax  [functionalias @ Base.MPFR.floatmax]
const Base.MPFR.floatmin = Base.floatmin  [functionalias @ Base.MPFR.floatmin]
const Base.MPFR.floor = Base.floor  [functionalias @ Base.MPFR.floor]
const Base.MPFR.fma = Base.fma  [functionalias @ Base.MPFR.fma]
const Base.MPFR.frexp = Base.Math.frexp  [functionalias @ Base.MPFR.frexp]
const Base.MPFR.hypot = Base.Math.hypot  [functionalias @ Base.MPFR.hypot]
const Base.MPFR.inv = Base.inv  [functionalias @ Base.MPFR.inv]
const Base.MPFR.isfinite = Base.isfinite  [functionalias @ Base.MPFR.isfinite]
const Base.MPFR.isinf = Base.isinf  [functionalias @ Base.MPFR.isinf]
const Base.MPFR.isinteger = Base.isinteger  [functionalias @ Base.MPFR.isinteger]
const Base.MPFR.isnan = Base.isnan  [functionalias @ Base.MPFR.isnan]
const Base.MPFR.isone = Base.isone  [functionalias @ Base.MPFR.isone]
const Base.MPFR.iszero = Base.iszero  [functionalias @ Base.MPFR.iszero]
const Base.MPFR.ldexp = Base.Math.ldexp  [functionalias @ Base.MPFR.ldexp]
const Base.MPFR.lerpi = Base.lerpi  [functionalias @ Base.MPFR.lerpi]
const Base.MPFR.log = Base.log  [functionalias @ Base.MPFR.log]
const Base.MPFR.log10 = Base.log10  [functionalias @ Base.MPFR.log10]
const Base.MPFR.log1p = Base.log1p  [functionalias @ Base.MPFR.log1p]
const Base.MPFR.log2 = Base.log2  [functionalias @ Base.MPFR.log2]
const Base.MPFR.max = Base.max  [functionalias @ Base.MPFR.max]
const Base.MPFR.maxintfloat = Base.maxintfloat  [functionalias @ Base.MPFR.maxintfloat]
const Base.MPFR.min = Base.min  [functionalias @ Base.MPFR.min]
const Base.MPFR.minmax = Base.minmax  [functionalias @ Base.MPFR.minmax]
const Base.MPFR.mod = Base.mod  [functionalias @ Base.MPFR.mod]
const Base.MPFR.modf = Base.Math.modf  [functionalias @ Base.MPFR.modf]
const Base.MPFR.nextfloat = Base.nextfloat  [functionalias @ Base.MPFR.nextfloat]
const Base.MPFR.precision = Base.precision  [functionalias @ Base.MPFR.precision]
const Base.MPFR.prevfloat = Base.prevfloat  [functionalias @ Base.MPFR.prevfloat]
const Base.MPFR.print = Base.print  [functionalias @ Base.MPFR.print]
const Base.MPFR.promote_rule = Base.promote_rule  [functionalias @ Base.MPFR.promote_rule]
const Base.MPFR.rem = Base.rem  [functionalias @ Base.MPFR.rem]
const Base.MPFR.rem2pi = Base.Math.rem2pi  [functionalias @ Base.MPFR.rem2pi]
const Base.MPFR.round = Base.round  [functionalias @ Base.MPFR.round]
const Base.MPFR.rounding = Base.Rounding.rounding  [functionalias @ Base.MPFR.rounding]
const Base.MPFR.rounding_raw = Base.Rounding.rounding_raw  [functionalias @ Base.MPFR.rounding_raw]
const Base.MPFR.sec = Base.Math.sec  [functionalias @ Base.MPFR.sec]
const Base.MPFR.sech = Base.Math.sech  [functionalias @ Base.MPFR.sech]
const Base.MPFR.setrounding = Base.Rounding.setrounding  [functionalias @ Base.MPFR.setrounding]
const Base.MPFR.setrounding_raw = Base.Rounding.setrounding_raw  [functionalias @ Base.MPFR.setrounding_raw]
const Base.MPFR.show = Base.show  [functionalias @ Base.MPFR.show]
const Base.MPFR.sign = Base.sign  [functionalias @ Base.MPFR.sign]
const Base.MPFR.signbit = Base.signbit  [functionalias @ Base.MPFR.signbit]
const Base.MPFR.significand = Base.Math.significand  [functionalias @ Base.MPFR.significand]
const Base.MPFR.sin = Base.sin  [functionalias @ Base.MPFR.sin]
const Base.MPFR.sincos = Base.Math.sincos  [functionalias @ Base.MPFR.sincos]
const Base.MPFR.sincos_fast = Base.FastMath.sincos_fast  [functionalias @ Base.MPFR.sincos_fast]
const Base.MPFR.sinh = Base.sinh  [functionalias @ Base.MPFR.sinh]
const Base.MPFR.sqrt = Base.sqrt  [functionalias @ Base.MPFR.sqrt]
const Base.MPFR.string = Base.string  [functionalias @ Base.MPFR.string]
const Base.MPFR.sum = Base.sum  [functionalias @ Base.MPFR.sum]
const Base.MPFR.tan = Base.tan  [functionalias @ Base.MPFR.tan]
const Base.MPFR.tanh = Base.tanh  [functionalias @ Base.MPFR.tanh]
const Base.MPFR.trunc = Base.trunc  [functionalias @ Base.MPFR.trunc]
const Base.MPFR.tryparse = Base.tryparse  [functionalias @ Base.MPFR.tryparse]
const Base.MPFR.typemax = Base.typemax  [functionalias @ Base.MPFR.typemax]
const Base.MPFR.typemin = Base.typemin  [functionalias @ Base.MPFR.typemin]
const Base.MPFR.unsafe_trunc = Base.unsafe_trunc  [functionalias @ Base.MPFR.unsafe_trunc]
const Base.MPFR.widen = Base.widen  [functionalias @ Base.MPFR.widen]
const Base.Math.@assume_effects = Base.@assume_effects  [functionalias @ Base.Math.@assume_effects]
const Base.Math.@constprop = Base.@constprop  [functionalias @ Base.Math.@constprop]
const Base.Math.^ = Base.^  [functionalias @ Base.Math.^]
const Base.Math.acos = Base.acos  [functionalias @ Base.Math.acos]
const Base.Math.acosh = Base.acosh  [functionalias @ Base.Math.acosh]
const Base.Math.asin = Base.asin  [functionalias @ Base.Math.asin]
const Base.Math.asinh = Base.asinh  [functionalias @ Base.Math.asinh]
const Base.Math.atan = Base.atan  [functionalias @ Base.Math.atan]
const Base.Math.atanh = Base.atanh  [functionalias @ Base.Math.atanh]
const Base.Math.cos = Base.cos  [functionalias @ Base.Math.cos]
const Base.Math.cosh = Base.cosh  [functionalias @ Base.Math.cosh]
const Base.Math.exp = Base.exp  [functionalias @ Base.Math.exp]
const Base.Math.exp10 = Base.exp10  [functionalias @ Base.Math.exp10]
const Base.Math.exp2 = Base.exp2  [functionalias @ Base.Math.exp2]
const Base.Math.expm1 = Base.expm1  [functionalias @ Base.Math.expm1]
const Base.Math.log = Base.log  [functionalias @ Base.Math.log]
const Base.Math.log10 = Base.log10  [functionalias @ Base.Math.log10]
const Base.Math.log1p = Base.log1p  [functionalias @ Base.Math.log1p]
const Base.Math.log2 = Base.log2  [functionalias @ Base.Math.log2]
const Base.Math.max = Base.max  [functionalias @ Base.Math.max]
const Base.Math.min = Base.min  [functionalias @ Base.Math.min]
const Base.Math.minmax = Base.minmax  [functionalias @ Base.Math.minmax]
const Base.Math.muladd = Base.muladd  [functionalias @ Base.Math.muladd]
const Base.Math.rem = Base.rem  [functionalias @ Base.Math.rem]
const Base.Math.sin = Base.sin  [functionalias @ Base.Math.sin]
const Base.Math.sinh = Base.sinh  [functionalias @ Base.Math.sinh]
const Base.Math.sqrt = Base.sqrt  [functionalias @ Base.Math.sqrt]
const Base.Math.tan = Base.tan  [functionalias @ Base.Math.tan]
const Base.Math.tanh = Base.tanh  [functionalias @ Base.Math.tanh]
const Base.Math.unsafe_trunc = Base.unsafe_trunc  [functionalias @ Base.Math.unsafe_trunc]
const Base.Matrix = Core.Array{T, 2} where T  @soft  [typealias @ Base.Matrix]
const Base.Meta.isbinaryoperator = Base.isbinaryoperator  [functionalias @ Base.Meta.isbinaryoperator]
const Base.Meta.isexpr = Base.isexpr  [functionalias @ Base.Meta.isexpr]
const Base.Meta.isidentifier = Base.isidentifier  [functionalias @ Base.Meta.isidentifier]
const Base.Meta.isoperator = Base.isoperator  [functionalias @ Base.Meta.isoperator]
const Base.Meta.ispostfixoperator = Base.ispostfixoperator  [functionalias @ Base.Meta.ispostfixoperator]
const Base.Meta.isunaryoperator = Base.isunaryoperator  [functionalias @ Base.Meta.isunaryoperator]
const Base.Multimedia.close = Base.close  [functionalias @ Base.Multimedia.close]
const Base.Multimedia.convert = Base.convert  [functionalias @ Base.Multimedia.convert]
const Base.Multimedia.flush = Base.flush  [functionalias @ Base.Multimedia.flush]
const Base.Multimedia.print = Base.print  [functionalias @ Base.Multimedia.print]
const Base.Multimedia.repr = Base.repr  [functionalias @ Base.Multimedia.repr]
const Base.Multimedia.show = Base.show  [functionalias @ Base.Multimedia.show]
const Base.MultiplicativeInverses.div = Base.div  [functionalias @ Base.MultiplicativeInverses.div]
const Base.MultiplicativeInverses.divrem = Base.divrem  [functionalias @ Base.MultiplicativeInverses.divrem]
const Base.MultiplicativeInverses.rem = Base.rem  [functionalias @ Base.MultiplicativeInverses.rem]
const Base.MultiplicativeInverses.unsigned = Base.unsigned  [functionalias @ Base.MultiplicativeInverses.unsigned]
const Base.NTuple = Tuple{Vararg{T, N}} where {N, T}  @soft  [typealias @ Base.NTuple]
const Base.NeedsShaping = Union{Tuple{Core.Integer, Vararg{Core.Integer}}, Tuple{Base.OneTo, Vararg{Base.OneTo}}}  [typealias @ Base.NeedsShaping]
const Base.NonReshapedReinterpretArray = Base.ReinterpretArray{T, N, S, A, false} where {T, N, S, A<:Core.AbstractArray{S, N}}  [typealias @ Base.NonReshapedReinterpretArray]
const Base.OS_HANDLE = Base.Libc.RawFD  [typealias @ Base.OS_HANDLE]
const Base.Order.! = Base.!  [functionalias @ Base.Order.!]
const Base.Order.& = Base.&  [functionalias @ Base.Order.&]
const Base.Order.+ = Base.+  [functionalias @ Base.Order.+]
const Base.Order.- = Base.-  [functionalias @ Base.Order.-]
const Base.Order.< = Base.<  [functionalias @ Base.Order.<]
const Base.Order.@__MODULE__ = Base.@__MODULE__  [functionalias @ Base.Order.@__MODULE__]
const Base.Order.@propagate_inbounds = Base.@propagate_inbounds  [functionalias @ Base.Order.@propagate_inbounds]
const Base.Order.AbstractVector = Core.AbstractArray{T, 1} where T  [typealias @ Base.Order.AbstractVector]
const Base.Order.Base = Base  [modulealias @ Base.Order.Base]
const Base.Order.DirectOrdering = Union{Base.Order.ForwardOrdering, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}}  [typealias @ Base.Order.DirectOrdering]
const Base.Order.getindex = Base.getindex  [functionalias @ Base.Order.getindex]
const Base.Order.identity = Base.identity  [functionalias @ Base.Order.identity]
const Base.Order.isless = Base.isless  [functionalias @ Base.Order.isless]
const Base.Order.parentmodule = Base.parentmodule  [functionalias @ Base.Order.parentmodule]
const Base.Order.reverse = Base.reverse  [functionalias @ Base.Order.reverse]
const Base.Order.| = Base.|  [functionalias @ Base.Order.|]
const Base.OverflowSafe = Union{Core.Bool, Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}  [typealias @ Base.OverflowSafe]
const Base.PCRE.RefValue = Base.RefValue  [typealias @ Base.PCRE.RefValue]
const Base.Pair = Core.Pair  @soft  [typealias @ Base.Pair]
const Base.PartialQuickSort = Base.Sort.PartialQuickSort  @soft  [typealias @ Base.PartialQuickSort]
const Base.PartitionIterator = Base.Iterators.PartitionIterator  [typealias @ Base.PartitionIterator]
const Base.PermutedDimsArray = Base.PermutedDimsArrays.PermutedDimsArray  @soft  [typealias @ Base.PermutedDimsArray]
const Base.PermutedDimsArrays.CommutativeOps = Union{typeof(Base.:&), typeof(Base.:+), typeof(Base._extrema_rf), typeof(Base.add_sum), typeof(Base.max), typeof(Base.min), typeof(Base.:|)}  [typealias @ Base.PermutedDimsArrays.CommutativeOps]
const Base.PermutedDimsArrays.permutedims = Base.permutedims  [functionalias @ Base.PermutedDimsArrays.permutedims]
const Base.PermutedDimsArrays.permutedims! = Base.permutedims!  [functionalias @ Base.PermutedDimsArrays.permutedims!]
const Base.RangeIndex = Union{Base.AbstractRange{<:Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}}, var"#s92"} where var"#s92"<:Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}  [typealias @ Base.RangeIndex]
const Base.RangeVecIntList = Union{Tuple{Vararg{Union{Base.AbstractVector{Core.Int64}, Base.AbstractRange}}}, Base.AbstractVector{A}} where A<:Base.AbstractVector{Core.Int64}  [typealias @ Base.RangeVecIntList]
const Base.RawFD = Base.Libc.RawFD  @soft  [typealias @ Base.RawFD]
const Base.Redirectable = Union{Base.Libc.RawFD, Base.FileRedirect, Core.IO}  [typealias @ Base.Redirectable]
const Base.ReshapedArrayLF = Base.ReshapedArray{T, N, P, Tuple{}} where {T, N, P<:Core.AbstractArray}  [typealias @ Base.ReshapedArrayLF]
const Base.ReshapedRange = Base.ReshapedArray{T, N, A, Tuple{}} where {T, N, A<:Base.AbstractRange}  [typealias @ Base.ReshapedRange]
const Base.ReshapedReinterpretArray = Base.ReinterpretArray{T, N, S, A, true} where {T, N, S, A<:(Core.AbstractArray{S})}  [typealias @ Base.ReshapedReinterpretArray]
const Base.ReshapedUnitRange = Base.ReshapedArray{T, N, A, Tuple{}} where {T, N, A<:Base.AbstractUnitRange}  [typealias @ Base.ReshapedUnitRange]
const Base.RoundingMode = Base.Rounding.RoundingMode  @soft  [typealias @ Base.RoundingMode]
const Base.RowSlices = Base.Slices{P, Tuple{Core.Int64, Base.Colon}, AX, S, 1} where {P<:(Core.AbstractArray{T, 2} where T), AX, S<:(Core.AbstractArray{T, 1} where T)}  @soft  [typealias @ Base.RowSlices]
const Base.Ryu.exponent_bias = Base.exponent_bias  [functionalias @ Base.Ryu.exponent_bias]
const Base.Ryu.exponent_bits = Base.exponent_bits  [functionalias @ Base.Ryu.exponent_bits]
const Base.Ryu.exponent_mask = Base.exponent_mask  [functionalias @ Base.Ryu.exponent_mask]
const Base.Ryu.exponent_max = Base.exponent_max  [functionalias @ Base.Ryu.exponent_max]
const Base.Ryu.significand_bits = Base.significand_bits  [functionalias @ Base.Ryu.significand_bits]
const Base.Ryu.significand_mask = Base.significand_mask  [functionalias @ Base.Ryu.significand_mask]
const Base.Ryu.uinttype = Base.uinttype  [functionalias @ Base.Ryu.uinttype]
const Base.ScalarIndex = Core.Real  [typealias @ Base.ScalarIndex]
const Base.SimpleVector = Core.SimpleVector  [typealias @ Base.SimpleVector]
const Base.SlowSubArray = Base.SubArray{T, N, P, I, false} where {T, N, P, I}  [typealias @ Base.SlowSubArray]
const Base.SmallSigned = Union{Core.Int16, Core.Int32, Core.Int8}  [typealias @ Base.SmallSigned]
const Base.SmallUnsigned = Union{Core.UInt16, Core.UInt32, Core.UInt8}  [typealias @ Base.SmallUnsigned]
const Base.Sort.issorted = Base.issorted  [functionalias @ Base.Sort.issorted]
const Base.Sort.sort = Base.sort  [functionalias @ Base.Sort.sort]
const Base.Sort.sort! = Base.sort!  [functionalias @ Base.Sort.sort!]
const Base.Sort.sortperm = Base.sortperm  [functionalias @ Base.Sort.sortperm]
const Base.Sort.to_indices = Base.to_indices  [functionalias @ Base.Sort.to_indices]
const Base.SpawnIO = Union{Base.Libc.RawFD, Core.IO}  [typealias @ Base.SpawnIO]
const Base.SpawnIOs = Core.Array{Union{Base.Libc.RawFD, Core.IO}, 1}  [typealias @ Base.SpawnIOs]
const Base.StackTraces.== = Base.==  [functionalias @ Base.StackTraces.==]
const Base.StackTraces.CodeInfo = Core.CodeInfo  [typealias @ Base.StackTraces.CodeInfo]
const Base.StackTraces.MethodInstance = Core.MethodInstance  [typealias @ Base.StackTraces.MethodInstance]
const Base.StackTraces.StackTrace = Core.Array{Base.StackTraces.StackFrame, 1}  [typealias @ Base.StackTraces.StackTrace]
const Base.StackTraces.hash = Base.hash  [functionalias @ Base.StackTraces.hash]
const Base.StackTraces.show = Base.show  [functionalias @ Base.StackTraces.show]
const Base.StdIOSet = Tuple{Union{Base.Libc.RawFD, Base.FileRedirect, Core.IO}, Union{Base.Libc.RawFD, Base.FileRedirect, Core.IO}, Union{Base.Libc.RawFD, Base.FileRedirect, Core.IO}}  [typealias @ Base.StdIOSet]
const Base.StickyWorkqueue = Base.IntrusiveLinkedListSynchronized{Core.Task}  [typealias @ Base.StickyWorkqueue]
const Base.StridedArray = Union{Core.DenseArray{T, N}, Base.ReinterpretArray{T, N, S, A, IsReshaped} where {A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, Base.SubArray{T, N, A, I} where {A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {T, N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}}, Core.DenseArray}, I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Base.ReshapedArray{T, N, A, Tuple{}} where {T, N, A<:Base.AbstractUnitRange}, Union{Base.AbstractRange{<:Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}}, var"#s92"} where var"#s92"<:Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}}}}}} where {T, N}  @soft  [typealias @ Base.StridedArray]
const Base.StridedFastContiguousSubArray = Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}  [typealias @ Base.StridedFastContiguousSubArray]
const Base.StridedMatrix = Union{Core.DenseArray{T, 2}, Base.ReinterpretArray{T, 2, S, A, IsReshaped} where {A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, 2, A} where A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, Base.SubArray{T, 2, A, I} where {A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {T, N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}}, Core.DenseArray}, I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Base.ReshapedArray{T, N, A, Tuple{}} where {T, N, A<:Base.AbstractUnitRange}, Union{Base.AbstractRange{<:Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}}, var"#s92"} where var"#s92"<:Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}}}}}} where T  @soft  [typealias @ Base.StridedMatrix]
const Base.StridedReinterpretArray = Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}  [typealias @ Base.StridedReinterpretArray]
const Base.StridedReshapedArray = Base.ReshapedArray{T, N, A} where {T, N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}}  [typealias @ Base.StridedReshapedArray]
const Base.StridedSubArray = Base.SubArray{T, N, A, I} where {T, N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {T, N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}}, Core.DenseArray}, I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Base.ReshapedArray{T, N, A, Tuple{}} where {T, N, A<:Base.AbstractUnitRange}, Union{Base.AbstractRange{<:Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}}, var"#s92"} where var"#s92"<:Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}}}}}  [typealias @ Base.StridedSubArray]
const Base.StridedVecOrMat = Union{Core.DenseArray{T, 1}, Core.DenseArray{T, 2}, Base.ReinterpretArray{T, 1, S, A, IsReshaped} where {A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.ReinterpretArray{T, 2, S, A, IsReshaped} where {A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, 1, A} where A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, Base.ReshapedArray{T, 2, A} where A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, Base.SubArray{T, 1, A, I} where {A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {T, N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}}, Core.DenseArray}, I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Base.ReshapedArray{T, N, A, Tuple{}} where {T, N, A<:Base.AbstractUnitRange}, Union{Base.AbstractRange{<:Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}}, var"#s92"} where var"#s92"<:Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}}}}}, Base.SubArray{T, 2, A, I} where {A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {T, N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}}, Core.DenseArray}, I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Base.ReshapedArray{T, N, A, Tuple{}} where {T, N, A<:Base.AbstractUnitRange}, Union{Base.AbstractRange{<:Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}}, var"#s92"} where var"#s92"<:Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}}}}}} where T  @soft  [typealias @ Base.StridedVecOrMat]
const Base.StridedVector = Union{Core.DenseArray{T, 1}, Base.ReinterpretArray{T, 1, S, A, IsReshaped} where {A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, 1, A} where A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, Base.SubArray{T, 1, A, I} where {A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {T, N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}}, Core.DenseArray}, I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Base.ReshapedArray{T, N, A, Tuple{}} where {T, N, A<:Base.AbstractUnitRange}, Union{Base.AbstractRange{<:Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}}, var"#s92"} where var"#s92"<:Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}}}}}} where T  @soft  [typealias @ Base.StridedVector]
const Base.Sys.show = Base.show  [functionalias @ Base.Sys.show]
const Base.TOML.Err = Union{Base.TOML.ParserError, T} where T  [typealias @ Base.TOML.Err]
const Base.TOML.TOMLDict = Base.Dict{Core.String, Core.Any}  [typealias @ Base.TOML.TOMLDict]
const Base.TOML.ValidSigs = Union{typeof(Base.TOML.isvalid_binary), typeof(Base.TOML.isvalid_hex), typeof(Base.TOML.isvalid_oct), typeof(Base.Unicode.isdigit)}  [typealias @ Base.TOML.ValidSigs]
const Base.TP = Union{Core.Type{Core.Pair{K, V}}, Core.Type{Tuple{K, V}}} where {K, V}  [typealias @ Base.TP]
const Base.Text = Base.Docs.Text  @soft  [typealias @ Base.Text]
const Base.TextDisplay = Base.Multimedia.TextDisplay  @soft  [typealias @ Base.TextDisplay]
const Base.ThreadSynchronizer = Base.GenericCondition{Base.Threads.SpinLock}  [typealias @ Base.ThreadSynchronizer]
const Base.Threads.AbstractLock = Base.AbstractLock  [typealias @ Base.Threads.AbstractLock]
const Base.Threads.ArithmeticTypes = Union{Core.Float16, Core.Float32, Core.Float64, Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}  [typealias @ Base.Threads.ArithmeticTypes]
const Base.Threads.AtomicTypes = Union{Core.Bool, Core.Float16, Core.Float32, Core.Float64, Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}  [typealias @ Base.Threads.AtomicTypes]
const Base.Threads.Condition = Base.GenericCondition{Base.ReentrantLock}  [typealias @ Base.Threads.Condition]
const Base.Threads.Event = Base.Event  [typealias @ Base.Threads.Event]
const Base.Threads.FloatTypes = Union{Core.Float16, Core.Float32, Core.Float64}  [typealias @ Base.Threads.FloatTypes]
const Base.Threads.IntTypes = Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}  [typealias @ Base.Threads.IntTypes]
const Base.Threads.gc_alignment = Base.gc_alignment  [functionalias @ Base.Threads.gc_alignment]
const Base.Threads.getindex = Base.getindex  [functionalias @ Base.Threads.getindex]
const Base.Threads.islocked = Base.islocked  [functionalias @ Base.Threads.islocked]
const Base.Threads.lock = Base.lock  [functionalias @ Base.Threads.lock]
const Base.Threads.notify = Base.notify  [functionalias @ Base.Threads.notify]
const Base.Threads.setindex! = Base.setindex!  [functionalias @ Base.Threads.setindex!]
const Base.Threads.trylock = Base.trylock  [functionalias @ Base.Threads.trylock]
const Base.Threads.unlock = Base.unlock  [functionalias @ Base.Threads.unlock]
const Base.Threads.unsafe_convert = Base.unsafe_convert  [functionalias @ Base.Threads.unsafe_convert]
const Base.Threads.wait = Base.wait  [functionalias @ Base.Threads.wait]
const Base.Unicode.== = Base.==  [functionalias @ Base.Unicode.==]
const Base.Unicode.Symbol = Core.Symbol  [typealias @ Base.Unicode.Symbol]
const Base.Unicode.convert = Base.convert  [functionalias @ Base.Unicode.convert]
const Base.Unicode.eltype = Base.eltype  [functionalias @ Base.Unicode.eltype]
const Base.Unicode.hash = Base.hash  [functionalias @ Base.Unicode.hash]
const Base.Unicode.isless = Base.isless  [functionalias @ Base.Unicode.isless]
const Base.Unicode.ismalformed = Base.ismalformed  [functionalias @ Base.Unicode.ismalformed]
const Base.Unicode.isoverlong = Base.isoverlong  [functionalias @ Base.Unicode.isoverlong]
const Base.Unicode.isvalid = Base.isvalid  [functionalias @ Base.Unicode.isvalid]
const Base.Unicode.iterate = Base.iterate  [functionalias @ Base.Unicode.iterate]
const Base.Unicode.length = Base.length  [functionalias @ Base.Unicode.length]
const Base.Unicode.show = Base.show  [functionalias @ Base.Unicode.show]
const Base.Unicode.string = Base.string  [functionalias @ Base.Unicode.string]
const Base.VInt = Core.UInt32  [typealias @ Base.VInt]
const Base.VecOrMat = Union{Core.Array{T, 1}, Core.Array{T, 2}} where T  @soft  [typealias @ Base.VecOrMat]
const Base.Vector = Core.Array{T, 1} where T  @soft  [typealias @ Base.Vector]
const Base.VerTuple = Tuple{Vararg{Union{Core.UInt64, Core.String}}}  [typealias @ Base.VerTuple]
const Base.ViewIndex = Union{Core.Real, Core.AbstractArray}  [typealias @ Base.ViewIndex]
const Base.WrappedException = Core.WrappedException  [typealias @ Base.WrappedException]
const Base._return_type = Core.Compiler.return_type  [functionalias @ Base._return_type]
const Base._uncompressed_ast = Base._uncompressed_ir  [functionalias @ Base._uncompressed_ast]
const Base.abspath = Base.Filesystem.abspath  @soft  [functionalias @ Base.abspath]
const Base.acosd = Base.Math.acosd  @soft  [functionalias @ Base.acosd]
const Base.acot = Base.Math.acot  @soft  [functionalias @ Base.acot]
const Base.acotd = Base.Math.acotd  @soft  [functionalias @ Base.acotd]
const Base.acoth = Base.Math.acoth  @soft  [functionalias @ Base.acoth]
const Base.acsc = Base.Math.acsc  @soft  [functionalias @ Base.acsc]
const Base.acscd = Base.Math.acscd  @soft  [functionalias @ Base.acscd]
const Base.acsch = Base.Math.acsch  @soft  [functionalias @ Base.acsch]
const Base.add_with_overflow = Base.Checked.add_with_overflow  [functionalias @ Base.add_with_overflow]
const Base.arrayref = Core.arrayref  [functionalias @ Base.arrayref]
const Base.asec = Base.Math.asec  @soft  [functionalias @ Base.asec]
const Base.asecd = Base.Math.asecd  @soft  [functionalias @ Base.asecd]
const Base.asech = Base.Math.asech  @soft  [functionalias @ Base.asech]
const Base.asind = Base.Math.asind  @soft  [functionalias @ Base.asind]
const Base.atand = Base.Math.atand  @soft  [functionalias @ Base.atand]
const Base.basename = Base.Filesystem.basename  @soft  [functionalias @ Base.basename]
const Base.bitcast = Core.bitcast  [functionalias @ Base.bitcast]
const Base.broadcast = Base.Broadcast.broadcast  @soft  [functionalias @ Base.broadcast]
const Base.broadcast! = Base.Broadcast.broadcast!  @soft  [functionalias @ Base.broadcast!]
const Base.cbrt = Base.Math.cbrt  @soft  [functionalias @ Base.cbrt]
const Base.cd = Base.Filesystem.cd  @soft  [functionalias @ Base.cd]
const Base.cglobal = Core.cglobal  @soft  [functionalias @ Base.cglobal]
const Base.checktaskempty = Base.Partr.multiq_check_empty  [functionalias @ Base.checktaskempty]
const Base.chmod = Base.Filesystem.chmod  @soft  [functionalias @ Base.chmod]
const Base.chown = Base.Filesystem.chown  @soft  [functionalias @ Base.chown]
const Base.clamp = Base.Math.clamp  @soft  [functionalias @ Base.clamp]
const Base.clamp! = Base.Math.clamp!  @soft  [functionalias @ Base.clamp!]
const Base.compilerbarrier = Core.compilerbarrier  [functionalias @ Base.compilerbarrier]
const Base.contractuser = Base.Filesystem.contractuser  @soft  [functionalias @ Base.contractuser]
const Base.cosc = Base.Math.cosc  @soft  [functionalias @ Base.cosc]
const Base.cosd = Base.Math.cosd  @soft  [functionalias @ Base.cosd]
const Base.cospi = Base.Math.cospi  @soft  [functionalias @ Base.cospi]
const Base.cot = Base.Math.cot  @soft  [functionalias @ Base.cot]
const Base.cotd = Base.Math.cotd  @soft  [functionalias @ Base.cotd]
const Base.coth = Base.Math.coth  @soft  [functionalias @ Base.coth]
const Base.cp = Base.Filesystem.cp  @soft  [functionalias @ Base.cp]
const Base.csc = Base.Math.csc  @soft  [functionalias @ Base.csc]
const Base.cscd = Base.Math.cscd  @soft  [functionalias @ Base.cscd]
const Base.csch = Base.Math.csch  @soft  [functionalias @ Base.csch]
const Base.ctime = Base.Filesystem.ctime  @soft  [functionalias @ Base.ctime]
const Base.deg2rad = Base.Math.deg2rad  @soft  [functionalias @ Base.deg2rad]
const Base.dirname = Base.Filesystem.dirname  @soft  [functionalias @ Base.dirname]
const Base.diskstat = Base.Filesystem.diskstat  @soft  [functionalias @ Base.diskstat]
const Base.display = Base.Multimedia.display  @soft  [functionalias @ Base.display]
const Base.displayable = Base.Multimedia.displayable  @soft  [functionalias @ Base.displayable]
const Base.donotdelete = Core.donotdelete  [functionalias @ Base.donotdelete]
const Base.dup = Base.Libc.dup  [functionalias @ Base.dup]
const Base.enumerate = Base.Iterators.enumerate  @soft  [functionalias @ Base.enumerate]
const Base.evalpoly = Base.Math.evalpoly  @soft  [functionalias @ Base.evalpoly]
const Base.expanduser = Base.Filesystem.expanduser  @soft  [functionalias @ Base.expanduser]
const Base.exponent = Base.Math.exponent  @soft  [functionalias @ Base.exponent]
const Base.filemode = Base.Filesystem.filemode  @soft  [functionalias @ Base.filemode]
const Base.frexp = Base.Math.frexp  @soft  [functionalias @ Base.frexp]
const Base.get_zero_subnormals = Base.Rounding.get_zero_subnormals  @soft  [functionalias @ Base.get_zero_subnormals]
const Base.gethostname = Base.Libc.gethostname  @soft  [functionalias @ Base.gethostname]
const Base.getpid = Base.Libc.getpid  @soft  [functionalias @ Base.getpid]
const Base.gperm = Base.Filesystem.gperm  @soft  [functionalias @ Base.gperm]
const Base.hardlink = Base.Filesystem.hardlink  @soft  [functionalias @ Base.hardlink]
const Base.homedir = Base.Filesystem.homedir  @soft  [functionalias @ Base.homedir]
const Base.hypot = Base.Math.hypot  @soft  [functionalias @ Base.hypot]
const Base.insorted = Base.Sort.insorted  @soft  [functionalias @ Base.insorted]
const Base.is_expr = Base.isexpr  [functionalias @ Base.is_expr]
const Base.isabspath = Base.Filesystem.isabspath  @soft  [functionalias @ Base.isabspath]
const Base.isblockdev = Base.Filesystem.isblockdev  @soft  [functionalias @ Base.isblockdev]
const Base.ischardev = Base.Filesystem.ischardev  @soft  [functionalias @ Base.ischardev]
const Base.iscntrl = Base.Unicode.iscntrl  @soft  [functionalias @ Base.iscntrl]
const Base.isdigit = Base.Unicode.isdigit  @soft  [functionalias @ Base.isdigit]
const Base.isdir = Base.Filesystem.isdir  @soft  [functionalias @ Base.isdir]
const Base.isdirpath = Base.Filesystem.isdirpath  @soft  [functionalias @ Base.isdirpath]
const Base.isfifo = Base.Filesystem.isfifo  @soft  [functionalias @ Base.isfifo]
const Base.isfile = Base.Filesystem.isfile  @soft  [functionalias @ Base.isfile]
const Base.isletter = Base.Unicode.isletter  @soft  [functionalias @ Base.isletter]
const Base.islink = Base.Filesystem.islink  @soft  [functionalias @ Base.islink]
const Base.islowercase = Base.Unicode.islowercase  @soft  [functionalias @ Base.islowercase]
const Base.ismount = Base.Filesystem.ismount  @soft  [functionalias @ Base.ismount]
const Base.isnumeric = Base.Unicode.isnumeric  @soft  [functionalias @ Base.isnumeric]
const Base.ispath = Base.Filesystem.ispath  @soft  [functionalias @ Base.ispath]
const Base.isprint = Base.Unicode.isprint  @soft  [functionalias @ Base.isprint]
const Base.ispunct = Base.Unicode.ispunct  @soft  [functionalias @ Base.ispunct]
const Base.issetgid = Base.Filesystem.issetgid  @soft  [functionalias @ Base.issetgid]
const Base.issetuid = Base.Filesystem.issetuid  @soft  [functionalias @ Base.issetuid]
const Base.issocket = Base.Filesystem.issocket  @soft  [functionalias @ Base.issocket]
const Base.isspace = Base.Unicode.isspace  @soft  [functionalias @ Base.isspace]
const Base.issticky = Base.Filesystem.issticky  @soft  [functionalias @ Base.issticky]
const Base.istextmime = Base.Multimedia.istextmime  @soft  [functionalias @ Base.istextmime]
const Base.isuppercase = Base.Unicode.isuppercase  @soft  [functionalias @ Base.isuppercase]
const Base.isxdigit = Base.Unicode.isxdigit  @soft  [functionalias @ Base.isxdigit]
const Base.joinpath = Base.Filesystem.joinpath  @soft  [functionalias @ Base.joinpath]
const Base.ldexp = Base.Math.ldexp  @soft  [functionalias @ Base.ldexp]
const Base.lowercase = Base.Unicode.lowercase  @soft  [functionalias @ Base.lowercase]
const Base.lowercasefirst = Base.Unicode.lowercasefirst  @soft  [functionalias @ Base.lowercasefirst]
const Base.lstat = Base.Filesystem.lstat  @soft  [functionalias @ Base.lstat]
const Base.mkdir = Base.Filesystem.mkdir  @soft  [functionalias @ Base.mkdir]
const Base.mkpath = Base.Filesystem.mkpath  @soft  [functionalias @ Base.mkpath]
const Base.mktemp = Base.Filesystem.mktemp  @soft  [functionalias @ Base.mktemp]
const Base.mktempdir = Base.Filesystem.mktempdir  @soft  [functionalias @ Base.mktempdir]
const Base.mod2pi = Base.Math.mod2pi  @soft  [functionalias @ Base.mod2pi]
const Base.modf = Base.Math.modf  @soft  [functionalias @ Base.modf]
const Base.mtime = Base.Filesystem.mtime  @soft  [functionalias @ Base.mtime]
const Base.mul_with_overflow = Base.Checked.mul_with_overflow  [functionalias @ Base.mul_with_overflow]
const Base.mv = Base.Filesystem.mv  @soft  [functionalias @ Base.mv]
const Base.normpath = Base.Filesystem.normpath  @soft  [functionalias @ Base.normpath]
const Base.only = Base.Iterators.only  @soft  [functionalias @ Base.only]
const Base.operm = Base.Filesystem.operm  @soft  [functionalias @ Base.operm]
const Base.partialsort = Base.Sort.partialsort  @soft  [functionalias @ Base.partialsort]
const Base.partialsort! = Base.Sort.partialsort!  @soft  [functionalias @ Base.partialsort!]
const Base.partialsortperm = Base.Sort.partialsortperm  @soft  [functionalias @ Base.partialsortperm]
const Base.partialsortperm! = Base.Sort.partialsortperm!  @soft  [functionalias @ Base.partialsortperm!]
const Base.popdisplay = Base.Multimedia.popdisplay  @soft  [functionalias @ Base.popdisplay]
const Base.pushdisplay = Base.Multimedia.pushdisplay  @soft  [functionalias @ Base.pushdisplay]
const Base.pwd = Base.Filesystem.pwd  @soft  [functionalias @ Base.pwd]
const Base.rad2deg = Base.Math.rad2deg  @soft  [functionalias @ Base.rad2deg]
const Base.readdir = Base.Filesystem.readdir  @soft  [functionalias @ Base.readdir]
const Base.readlink = Base.Filesystem.readlink  @soft  [functionalias @ Base.readlink]
const Base.realpath = Base.Filesystem.realpath  @soft  [functionalias @ Base.realpath]
const Base.redirect_stderr = Base.RedirectStdStream  @soft  [functionalias @ Base.redirect_stderr]
const Base.redirect_stdin = Base.RedirectStdStream  @soft  [functionalias @ Base.redirect_stdin]
const Base.redirect_stdout = Base.RedirectStdStream  @soft  [functionalias @ Base.redirect_stdout]
const Base.redisplay = Base.Multimedia.redisplay  @soft  [functionalias @ Base.redisplay]
const Base.relpath = Base.Filesystem.relpath  @soft  [functionalias @ Base.relpath]
const Base.rem2pi = Base.Math.rem2pi  @soft  [functionalias @ Base.rem2pi]
const Base.rm = Base.Filesystem.rm  @soft  [functionalias @ Base.rm]
const Base.rounding = Base.Rounding.rounding  @soft  [functionalias @ Base.rounding]
const Base.samefile = Base.Filesystem.samefile  @soft  [functionalias @ Base.samefile]
const Base.searchsorted = Base.Sort.searchsorted  @soft  [functionalias @ Base.searchsorted]
const Base.searchsortedfirst = Base.Sort.searchsortedfirst  @soft  [functionalias @ Base.searchsortedfirst]
const Base.searchsortedlast = Base.Sort.searchsortedlast  @soft  [functionalias @ Base.searchsortedlast]
const Base.sec = Base.Math.sec  @soft  [functionalias @ Base.sec]
const Base.secd = Base.Math.secd  @soft  [functionalias @ Base.secd]
const Base.sech = Base.Math.sech  @soft  [functionalias @ Base.sech]
const Base.set_zero_subnormals = Base.Rounding.set_zero_subnormals  @soft  [functionalias @ Base.set_zero_subnormals]
const Base.setprecision = Base.MPFR.setprecision  @soft  [functionalias @ Base.setprecision]
const Base.setrounding = Base.Rounding.setrounding  @soft  [functionalias @ Base.setrounding]
const Base.showable = Base.Multimedia.showable  @soft  [functionalias @ Base.showable]
const Base.significand = Base.Math.significand  @soft  [functionalias @ Base.significand]
const Base.sinc = Base.Math.sinc  @soft  [functionalias @ Base.sinc]
const Base.sincos = Base.Math.sincos  @soft  [functionalias @ Base.sincos]
const Base.sincosd = Base.Math.sincosd  @soft  [functionalias @ Base.sincosd]
const Base.sincospi = Base.Math.sincospi  @soft  [functionalias @ Base.sincospi]
const Base.sind = Base.Math.sind  @soft  [functionalias @ Base.sind]
const Base.sinpi = Base.Math.sinpi  @soft  [functionalias @ Base.sinpi]
const Base.sortperm! = Base.Sort.sortperm!  @soft  [functionalias @ Base.sortperm!]
const Base.splitdir = Base.Filesystem.splitdir  @soft  [functionalias @ Base.splitdir]
const Base.splitdrive = Base.Filesystem.splitdrive  @soft  [functionalias @ Base.splitdrive]
const Base.splitext = Base.Filesystem.splitext  @soft  [functionalias @ Base.splitext]
const Base.splitpath = Base.Filesystem.splitpath  @soft  [functionalias @ Base.splitpath]
const Base.stacktrace = Base.StackTraces.stacktrace  @soft  [functionalias @ Base.stacktrace]
const Base.symlink = Base.Filesystem.symlink  @soft  [functionalias @ Base.symlink]
const Base.tand = Base.Math.tand  @soft  [functionalias @ Base.tand]
const Base.tempdir = Base.Filesystem.tempdir  @soft  [functionalias @ Base.tempdir]
const Base.tempname = Base.Filesystem.tempname  @soft  [functionalias @ Base.tempname]
const Base.textwidth = Base.Unicode.textwidth  @soft  [functionalias @ Base.textwidth]
const Base.time = Base.Libc.time  @soft  [functionalias @ Base.time]
const Base.titlecase = Base.Unicode.titlecase  @soft  [functionalias @ Base.titlecase]
const Base.touch = Base.Filesystem.touch  @soft  [functionalias @ Base.touch]
const Base.uncompressed_ast = Base.uncompressed_ir  [functionalias @ Base.uncompressed_ast]
const Base.uperm = Base.Filesystem.uperm  @soft  [functionalias @ Base.uperm]
const Base.uppercase = Base.Unicode.uppercase  @soft  [functionalias @ Base.uppercase]
const Base.uppercasefirst = Base.Unicode.uppercasefirst  @soft  [functionalias @ Base.uppercasefirst]
const Base.walkdir = Base.Filesystem.walkdir  @soft  [functionalias @ Base.walkdir]
const Base.zip = Base.Iterators.zip  @soft  [functionalias @ Base.zip]
const Base.÷ = Base.div  @soft  [functionalias @ Base.÷]
const Base.∈ = Base.in  @soft  [functionalias @ Base.∈]
const Base.√ = Base.sqrt  @soft  [functionalias @ Base.√]
const Base.∛ = Base.Math.cbrt  @soft  [functionalias @ Base.∛]
const Base.∩ = Base.intersect  @soft  [functionalias @ Base.∩]
const Base.∪ = Base.union  @soft  [functionalias @ Base.∪]
const Base.≈ = Base.isapprox  @soft  [functionalias @ Base.≈]
const Base.≠ = Base.!=  @soft  [functionalias @ Base.≠]
const Base.≡ = Core.===  @soft  [functionalias @ Base.≡]
const Base.≢ = Base.!==  @soft  [functionalias @ Base.≢]
const Base.≤ = Base.<=  @soft  [functionalias @ Base.≤]
const Base.≥ = Base.>=  @soft  [functionalias @ Base.≥]
const Base.⊆ = Base.issubset  @soft  [functionalias @ Base.⊆]
const Base.⊻ = Base.xor  @soft  [functionalias @ Base.⊻]
const Base.⊼ = Base.nand  @soft  [functionalias @ Base.⊼]
const Base.⊽ = Base.nor  @soft  [functionalias @ Base.⊽]
const Main.Core = Core  [modulealias @ Main.Core]
const Main.TypeDiscover = TypeDiscover  [modulealias @ Main.TypeDiscover]
const ArgTools.AbstractCmd = Base.AbstractCmd  [typealias @ ArgTools.AbstractCmd]
const ArgTools.ArgRead = Union{Base.AbstractCmd, Core.AbstractString, Core.IO}  [typealias @ ArgTools.ArgRead]
const ArgTools.ArgWrite = Union{Base.AbstractCmd, Core.AbstractString, Core.IO}  [typealias @ ArgTools.ArgWrite]
const ArgTools.CmdRedirect = Base.CmdRedirect  [typealias @ ArgTools.CmdRedirect]
const ArgTools.Process = Base.Process  [typealias @ ArgTools.Process]
const Artifacts.SHA1 = Base.SHA1  [typealias @ Artifacts.SHA1]
const Artifacts.get = Base.get  [functionalias @ Artifacts.get]
const CRC32c.FastContiguousSubArray = Base.SubArray{T, N, P, I, true} where {T, N, P, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}  [typealias @ CRC32c.FastContiguousSubArray]
const FileWatching.@handle_as = Base.@handle_as  [functionalias @ FileWatching.@handle_as]
const FileWatching.IOError = Base.IOError  [typealias @ FileWatching.IOError]
const FileWatching.StatStruct = Base.Filesystem.StatStruct  [typealias @ FileWatching.StatStruct]
const FileWatching._UVError = Base._UVError  [functionalias @ FileWatching._UVError]
const FileWatching._uv_hook_close = Base._uv_hook_close  [functionalias @ FileWatching._uv_hook_close]
const FileWatching.associate_julia_struct = Base.associate_julia_struct  [functionalias @ FileWatching.associate_julia_struct]
const FileWatching.close = Base.close  [functionalias @ FileWatching.close]
const FileWatching.disassociate_julia_struct = Base.disassociate_julia_struct  [functionalias @ FileWatching.disassociate_julia_struct]
const FileWatching.eventloop = Base.eventloop  [functionalias @ FileWatching.eventloop]
const FileWatching.getproperty = Base.getproperty  [functionalias @ FileWatching.getproperty]
const FileWatching.iolock_begin = Base.iolock_begin  [functionalias @ FileWatching.iolock_begin]
const FileWatching.iolock_end = Base.iolock_end  [functionalias @ FileWatching.iolock_end]
const FileWatching.isopen = Base.isopen  [functionalias @ FileWatching.isopen]
const FileWatching.isreadable = Base.isreadable  [functionalias @ FileWatching.isreadable]
const FileWatching.iswritable = Base.iswritable  [functionalias @ FileWatching.iswritable]
const FileWatching.mkpidlock = FileWatching.Pidfile.mkpidlock  [functionalias @ FileWatching.mkpidlock]
const FileWatching.notify_error = Base.notify_error  [functionalias @ FileWatching.notify_error]
const FileWatching.preserve_handle = Base.preserve_handle  [functionalias @ FileWatching.preserve_handle]
const FileWatching.propertynames = Base.propertynames  [functionalias @ FileWatching.propertynames]
const FileWatching.unpreserve_handle = Base.unpreserve_handle  [functionalias @ FileWatching.unpreserve_handle]
const FileWatching.uv_error = Base.uv_error  [functionalias @ FileWatching.uv_error]
const FileWatching.wait = Base.wait  [functionalias @ FileWatching.wait]
const FileWatching.| = Base.|  [functionalias @ FileWatching.|]
const Libdl.dlclose = Base.Libc.Libdl.dlclose  [functionalias @ Libdl.dlclose]
const Libdl.dllist = Base.Libc.Libdl.dllist  [functionalias @ Libdl.dllist]
const Libdl.dlopen = Base.Libc.Libdl.dlopen  [functionalias @ Libdl.dlopen]
const Libdl.dlopen_e = Base.Libc.Libdl.dlopen_e  [functionalias @ Libdl.dlopen_e]
const Libdl.dlpath = Base.Libc.Libdl.dlpath  [functionalias @ Libdl.dlpath]
const Libdl.dlsym = Base.Libc.Libdl.dlsym  [functionalias @ Libdl.dlsym]
const Libdl.dlsym_e = Base.Libc.Libdl.dlsym_e  [functionalias @ Libdl.dlsym_e]
const Libdl.find_library = Base.Libc.Libdl.find_library  [functionalias @ Libdl.find_library]
const Logging.@debug = Base.CoreLogging.@debug  [functionalias @ Logging.@debug]
const Logging.@error = Base.CoreLogging.@error  [functionalias @ Logging.@error]
const Logging.@info = Base.CoreLogging.@info  [functionalias @ Logging.@info]
const Logging.@logmsg = Base.CoreLogging.@logmsg  [functionalias @ Logging.@logmsg]
const Logging.@warn = Base.CoreLogging.@warn  [functionalias @ Logging.@warn]
const Logging.AbstractLogger = Base.CoreLogging.AbstractLogger  [typealias @ Logging.AbstractLogger]
const Logging.LogLevel = Base.CoreLogging.LogLevel  [typealias @ Logging.LogLevel]
const Logging.NullLogger = Base.CoreLogging.NullLogger  [typealias @ Logging.NullLogger]
const Logging.SimpleLogger = Base.CoreLogging.SimpleLogger  [typealias @ Logging.SimpleLogger]
const Logging.catch_exceptions = Base.CoreLogging.catch_exceptions  [functionalias @ Logging.catch_exceptions]
const Logging.current_logger = Base.CoreLogging.current_logger  [functionalias @ Logging.current_logger]
const Logging.disable_logging = Base.CoreLogging.disable_logging  [functionalias @ Logging.disable_logging]
const Logging.global_logger = Base.CoreLogging.global_logger  [functionalias @ Logging.global_logger]
const Logging.handle_message = Base.CoreLogging.handle_message  [functionalias @ Logging.handle_message]
const Logging.min_enabled_level = Base.CoreLogging.min_enabled_level  [functionalias @ Logging.min_enabled_level]
const Logging.shouldlog = Base.CoreLogging.shouldlog  [functionalias @ Logging.shouldlog]
const Logging.with_logger = Base.CoreLogging.with_logger  [functionalias @ Logging.with_logger]
const Mmap.OS_HANDLE = Base.Libc.RawFD  [typealias @ Mmap.OS_HANDLE]
const SHA.AbstractBytes = Union{Tuple{Vararg{Core.UInt8, N}} where N, Base.AbstractVector{Core.UInt8}}  [typealias @ SHA.AbstractBytes]
const SHA.SHA224_CTX = SHA.SHA2_224_CTX  [typealias @ SHA.SHA224_CTX]
const SHA.SHA256_CTX = SHA.SHA2_256_CTX  [typealias @ SHA.SHA256_CTX]
const SHA.SHA384_CTX = SHA.SHA2_384_CTX  [typealias @ SHA.SHA384_CTX]
const SHA.SHA512_CTX = SHA.SHA2_512_CTX  [typealias @ SHA.SHA512_CTX]
const SHA.copy = Base.copy  [functionalias @ SHA.copy]
const SHA.show = Base.show  [functionalias @ SHA.show]
const Serialization.GMP = Base.GMP  [modulealias @ Serialization.GMP]
const Serialization.OtherInt = Core.Int32  [typealias @ Serialization.OtherInt]
const Serialization.SimpleVector = Core.SimpleVector  [typealias @ Serialization.SimpleVector]
const Serialization.svec = Core.svec  [functionalias @ Serialization.svec]
const Serialization.uncompressed_ast = Base.uncompressed_ir  [functionalias @ Serialization.uncompressed_ast]
const Serialization.unsafe_convert = Base.unsafe_convert  [functionalias @ Serialization.unsafe_convert]
const Sockets._uv_hook_close = Base._uv_hook_close  [functionalias @ Sockets._uv_hook_close]
const Sockets.alloc_buf_hook = Base.alloc_buf_hook  [functionalias @ Sockets.alloc_buf_hook]
const Sockets.bind = Base.bind  [functionalias @ Sockets.bind]
const Sockets.convert = Base.convert  [functionalias @ Sockets.convert]
const Sockets.isless = Base.isless  [functionalias @ Sockets.isless]
const Sockets.isreadable = Base.isreadable  [functionalias @ Sockets.isreadable]
const Sockets.iswritable = Base.iswritable  [functionalias @ Sockets.iswritable]
const Sockets.parse = Base.parse  [functionalias @ Sockets.parse]
const Sockets.print = Base.print  [functionalias @ Sockets.print]
const Sockets.show = Base.show  [functionalias @ Sockets.show]
const LinearAlgebra.* = Base.*  [functionalias @ LinearAlgebra.*]
const LinearAlgebra.+ = Base.+  [functionalias @ LinearAlgebra.+]
const LinearAlgebra.- = Base.-  [functionalias @ LinearAlgebra.-]
const LinearAlgebra./ = Base./  [functionalias @ LinearAlgebra./]
const LinearAlgebra.== = Base.==  [functionalias @ LinearAlgebra.==]
const LinearAlgebra.AdjOrTrans = Union{LinearAlgebra.Adjoint{T, S}, LinearAlgebra.Transpose{T, S}} where {T, S}  [typealias @ LinearAlgebra.AdjOrTrans]
const LinearAlgebra.AdjOrTransAbsMat = Union{LinearAlgebra.Adjoint{T, var"#s971"}, LinearAlgebra.Transpose{T, var"#s971"}} where {T, var"#s971"<:(Base.AbstractMatrix)}  [typealias @ LinearAlgebra.AdjOrTransAbsMat]
const LinearAlgebra.AdjOrTransAbsVec = Union{LinearAlgebra.Adjoint{T, var"#s971"}, LinearAlgebra.Transpose{T, var"#s971"}} where {T, var"#s971"<:(Base.AbstractVector)}  [typealias @ LinearAlgebra.AdjOrTransAbsVec]
const LinearAlgebra.AdjOrTransStridedMat = Union{LinearAlgebra.Adjoint{T, <:Base.StridedMatrix{T} where T}, LinearAlgebra.Transpose{T, <:Base.StridedMatrix{T} where T}} where T  [typealias @ LinearAlgebra.AdjOrTransStridedMat]
const LinearAlgebra.AdjointAbsMat = LinearAlgebra.Adjoint{T, <:Base.AbstractMatrix} where T  [typealias @ LinearAlgebra.AdjointAbsMat]
const LinearAlgebra.AdjointAbsVec = LinearAlgebra.Adjoint{T, <:Base.AbstractVector} where T  [typealias @ LinearAlgebra.AdjointAbsVec]
const LinearAlgebra.BLAS.copyto! = Base.copyto!  [functionalias @ LinearAlgebra.BLAS.copyto!]
const LinearAlgebra.BiTri = Union{LinearAlgebra.Bidiagonal, LinearAlgebra.Tridiagonal}  [typealias @ LinearAlgebra.BiTri]
const LinearAlgebra.BiTriSym = Union{LinearAlgebra.Bidiagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Tridiagonal}  [typealias @ LinearAlgebra.BiTriSym]
const LinearAlgebra.BlasComplex = Union{Base.Complex{Core.Float32}, Base.Complex{Core.Float64}}  [typealias @ LinearAlgebra.BlasComplex]
const LinearAlgebra.BlasFloat = Union{Core.Float32, Core.Float64, Base.ComplexF64, Base.ComplexF32}  [typealias @ LinearAlgebra.BlasFloat]
const LinearAlgebra.BlasHessenbergQ = LinearAlgebra.HessenbergQ{T, <:Base.StridedMatrix{T}, <:Base.StridedVector{T}, sym} where {T<:Union{Core.Float32, Core.Float64, Base.ComplexF64, Base.ComplexF32}, sym}  [typealias @ LinearAlgebra.BlasHessenbergQ]
const LinearAlgebra.BlasInt = Core.Int64  [typealias @ LinearAlgebra.BlasInt]
const LinearAlgebra.BlasReal = Union{Core.Float32, Core.Float64}  [typealias @ LinearAlgebra.BlasReal]
const LinearAlgebra.Broadcast = Base.Broadcast  [modulealias @ LinearAlgebra.Broadcast]
const LinearAlgebra.ConvertibleSpecialMatrix = Union{LinearAlgebra.AbstractTriangular, LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Tridiagonal}  [typealias @ LinearAlgebra.ConvertibleSpecialMatrix]
const LinearAlgebra.DenseLike = Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}}, Core.DenseArray{T}} where T  [typealias @ LinearAlgebra.DenseLike]
const LinearAlgebra.HermOrSym = Union{LinearAlgebra.Hermitian{T, S}, LinearAlgebra.Symmetric{T, S}} where {T, S}  [typealias @ LinearAlgebra.HermOrSym]
const LinearAlgebra.IndexStyle = Base.IndexStyle  [typealias @ LinearAlgebra.IndexStyle]
const LinearAlgebra.LAPACKFactorizations = Union{LinearAlgebra.Cholesky{T, S}, LinearAlgebra.BunchKaufman{T, S}, LinearAlgebra.LQ{T, S, C} where C<:Base.AbstractVector{T}, LinearAlgebra.LU{T, S}, LinearAlgebra.QR{T, S, C} where C<:Base.AbstractVector{T}, LinearAlgebra.QRCompactWY{T, S, C} where C<:Base.AbstractMatrix{T}, LinearAlgebra.QRPivoted{T, S, C} where C<:Base.AbstractVector{T}, LinearAlgebra.SVD{T, var"#s971", S, C} where {var"#s971"<:Core.Real, C<:Base.AbstractVector{var"#s971"}}} where {T, S}  [typealias @ LinearAlgebra.LAPACKFactorizations]
const LinearAlgebra.Libdl = Libdl  [modulealias @ LinearAlgebra.Libdl]
const LinearAlgebra.LowerOrUnitLowerTriangular = Union{LinearAlgebra.LowerTriangular{T, S} where S<:Base.AbstractMatrix{T}, LinearAlgebra.UnitLowerTriangular{T, S} where S<:Base.AbstractMatrix{T}} where T  [typealias @ LinearAlgebra.LowerOrUnitLowerTriangular]
const LinearAlgebra.NumberArray = Core.AbstractArray{T} where T<:Core.Number  [typealias @ LinearAlgebra.NumberArray]
const LinearAlgebra.PossibleTriangularMatrix = Union{LinearAlgebra.AbstractTriangular, LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal}  [typealias @ LinearAlgebra.PossibleTriangularMatrix]
const LinearAlgebra.RealHermSym = Union{LinearAlgebra.Hermitian{T, S}, LinearAlgebra.Symmetric{T, S}} where {T<:Core.Real, S}  [typealias @ LinearAlgebra.RealHermSym]
const LinearAlgebra.RealHermSymComplexHerm = Union{LinearAlgebra.Hermitian{T, S}, LinearAlgebra.Hermitian{Base.Complex{T}, S}, LinearAlgebra.Symmetric{T, S}} where {T<:Core.Real, S}  [typealias @ LinearAlgebra.RealHermSymComplexHerm]
const LinearAlgebra.RealHermSymComplexSym = Union{LinearAlgebra.Hermitian{T, S}, LinearAlgebra.Symmetric{T, S}, LinearAlgebra.Symmetric{Base.Complex{T}, S}} where {T<:Core.Real, S}  [typealias @ LinearAlgebra.RealHermSymComplexSym]
const LinearAlgebra.RealOrComplex = Union{Core.Real, Base.Complex}  [typealias @ LinearAlgebra.RealOrComplex]
const LinearAlgebra.StridedMaybeAdjOrTransMat = Union{LinearAlgebra.Adjoint{T, <:Base.StridedMatrix{T} where T}, LinearAlgebra.Transpose{T, <:Base.StridedMatrix{T} where T}, Base.StridedArray{T, 2}} where T  [typealias @ LinearAlgebra.StridedMaybeAdjOrTransMat]
const LinearAlgebra.StridedVecLike = Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}}, Base.SubArray{T, var"#s971", var"#s970", I, true} where {var"#s971", var"#s970"<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}}, Core.DenseArray{T}}, I}, Core.DenseArray{T}} where T  [typealias @ LinearAlgebra.StridedVecLike]
const LinearAlgebra.StructuredMatrix = Union{LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.LowerTriangular, LinearAlgebra.SymTridiagonal, LinearAlgebra.Tridiagonal, LinearAlgebra.UnitLowerTriangular, LinearAlgebra.UnitUpperTriangular, LinearAlgebra.UpperTriangular}  [typealias @ LinearAlgebra.StructuredMatrix]
const LinearAlgebra.TransposeAbsMat = LinearAlgebra.Transpose{T, <:Base.AbstractMatrix} where T  [typealias @ LinearAlgebra.TransposeAbsMat]
const LinearAlgebra.TransposeAbsVec = LinearAlgebra.Transpose{T, <:Base.AbstractVector} where T  [typealias @ LinearAlgebra.TransposeAbsVec]
const LinearAlgebra.TypeFuncs = Union{typeof(Base.ceil), typeof(Base.floor), typeof(Base.round), typeof(Base.trunc)}  [typealias @ LinearAlgebra.TypeFuncs]
const LinearAlgebra.UpperOrLowerTriangular = Union{LinearAlgebra.LowerTriangular{T, S} where S<:Base.AbstractMatrix{T}, LinearAlgebra.UnitLowerTriangular{T, S} where S<:Base.AbstractMatrix{T}, LinearAlgebra.UnitUpperTriangular{T, S} where S<:Base.AbstractMatrix{T}, LinearAlgebra.UpperTriangular{T, S} where S<:Base.AbstractMatrix{T}} where T  [typealias @ LinearAlgebra.UpperOrLowerTriangular]
const LinearAlgebra.UpperOrUnitUpperTriangular = Union{LinearAlgebra.UnitUpperTriangular{T, S} where S<:Base.AbstractMatrix{T}, LinearAlgebra.UpperTriangular{T, S} where S<:Base.AbstractMatrix{T}} where T  [typealias @ LinearAlgebra.UpperOrUnitUpperTriangular]
const LinearAlgebra.\ = Base.\  [functionalias @ LinearAlgebra.\]
const LinearAlgebra.^ = Base.^  [functionalias @ LinearAlgebra.^]
const LinearAlgebra._Annotated_DenseArrays = Union{LinearAlgebra.AbstractTriangular{T, A} where {T, A<:(Base.Matrix)}, LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.Hermitian{T, A} where {T, A<:(Base.Matrix)}, LinearAlgebra.SymTridiagonal, LinearAlgebra.Symmetric{T, A} where {T, A<:(Base.Matrix)}, LinearAlgebra.Tridiagonal}  [typealias @ LinearAlgebra._Annotated_DenseArrays]
const LinearAlgebra._Annotated_Typed_DenseArrays = Union{LinearAlgebra.AbstractTriangular{T, A} where A<:(Base.Matrix), LinearAlgebra.Hermitian{T, A} where A<:(Base.Matrix), LinearAlgebra.Symmetric{T, A} where A<:(Base.Matrix)} where T  [typealias @ LinearAlgebra._Annotated_Typed_DenseArrays]
const LinearAlgebra._DenseConcatGroup = Union{Core.Number, LinearAlgebra.AbstractTriangular{T, A} where {T, A<:(Base.Matrix)}, LinearAlgebra.Adjoint{<:Core.Any, <:Base.Vector}, LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.Hermitian{T, A} where {T, A<:(Base.Matrix)}, LinearAlgebra.SymTridiagonal, LinearAlgebra.Symmetric{T, A} where {T, A<:(Base.Matrix)}, LinearAlgebra.Transpose{<:Core.Any, <:Base.Vector}, LinearAlgebra.Tridiagonal, Base.Vector, Base.Matrix}  [typealias @ LinearAlgebra._DenseConcatGroup]
const LinearAlgebra._Hermitian_DenseArrays = LinearAlgebra.Hermitian{T, A} where {T, A<:(Base.Matrix)}  [typealias @ LinearAlgebra._Hermitian_DenseArrays]
const LinearAlgebra._SpecialArrays = Union{LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Tridiagonal}  [typealias @ LinearAlgebra._SpecialArrays]
const LinearAlgebra._Symmetric_DenseArrays = LinearAlgebra.Symmetric{T, A} where {T, A<:(Base.Matrix)}  [typealias @ LinearAlgebra._Symmetric_DenseArrays]
const LinearAlgebra._Triangular_DenseArrays = LinearAlgebra.AbstractTriangular{T, A} where {T, A<:(Base.Matrix)}  [typealias @ LinearAlgebra._Triangular_DenseArrays]
const LinearAlgebra._TypedDenseConcatGroup = Union{Base.Vector{T}, Base.Matrix{T}, LinearAlgebra.Adjoint{T, Base.Vector{T}}, LinearAlgebra.Transpose{T, Base.Vector{T}}, LinearAlgebra.AbstractTriangular{T, A} where A<:(Base.Matrix), LinearAlgebra.Hermitian{T, A} where A<:(Base.Matrix), LinearAlgebra.Symmetric{T, A} where A<:(Base.Matrix)} where T  [typealias @ LinearAlgebra._TypedDenseConcatGroup]
const LinearAlgebra.abs = Base.abs  [functionalias @ LinearAlgebra.abs]
const LinearAlgebra.acos = Base.acos  [functionalias @ LinearAlgebra.acos]
const LinearAlgebra.acosh = Base.acosh  [functionalias @ LinearAlgebra.acosh]
const LinearAlgebra.acot = Base.Math.acot  [functionalias @ LinearAlgebra.acot]
const LinearAlgebra.acoth = Base.Math.acoth  [functionalias @ LinearAlgebra.acoth]
const LinearAlgebra.acsc = Base.Math.acsc  [functionalias @ LinearAlgebra.acsc]
const LinearAlgebra.acsch = Base.Math.acsch  [functionalias @ LinearAlgebra.acsch]
const LinearAlgebra.adjoint = Base.adjoint  [functionalias @ LinearAlgebra.adjoint]
const LinearAlgebra.asec = Base.Math.asec  [functionalias @ LinearAlgebra.asec]
const LinearAlgebra.asech = Base.Math.asech  [functionalias @ LinearAlgebra.asech]
const LinearAlgebra.asin = Base.asin  [functionalias @ LinearAlgebra.asin]
const LinearAlgebra.asinh = Base.asinh  [functionalias @ LinearAlgebra.asinh]
const LinearAlgebra.atan = Base.atan  [functionalias @ LinearAlgebra.atan]
const LinearAlgebra.atanh = Base.atanh  [functionalias @ LinearAlgebra.atanh]
const LinearAlgebra.axes = Base.axes  [functionalias @ LinearAlgebra.axes]
const LinearAlgebra.big = Base.big  [functionalias @ LinearAlgebra.big]
const LinearAlgebra.broadcast = Base.Broadcast.broadcast  [functionalias @ LinearAlgebra.broadcast]
const LinearAlgebra.ceil = Base.ceil  [functionalias @ LinearAlgebra.ceil]
const LinearAlgebra.cis = Base.cis  [functionalias @ LinearAlgebra.cis]
const LinearAlgebra.conj = Base.conj  [functionalias @ LinearAlgebra.conj]
const LinearAlgebra.convert = Base.convert  [functionalias @ LinearAlgebra.convert]
const LinearAlgebra.copy = Base.copy  [functionalias @ LinearAlgebra.copy]
const LinearAlgebra.copymutable = Base.copymutable  [functionalias @ LinearAlgebra.copymutable]
const LinearAlgebra.copyto! = Base.copyto!  [functionalias @ LinearAlgebra.copyto!]
const LinearAlgebra.cos = Base.cos  [functionalias @ LinearAlgebra.cos]
const LinearAlgebra.cosh = Base.cosh  [functionalias @ LinearAlgebra.cosh]
const LinearAlgebra.cot = Base.Math.cot  [functionalias @ LinearAlgebra.cot]
const LinearAlgebra.coth = Base.Math.coth  [functionalias @ LinearAlgebra.coth]
const LinearAlgebra.csc = Base.Math.csc  [functionalias @ LinearAlgebra.csc]
const LinearAlgebra.csch = Base.Math.csch  [functionalias @ LinearAlgebra.csch]
const LinearAlgebra.eltype = Base.eltype  [functionalias @ LinearAlgebra.eltype]
const LinearAlgebra.exp = Base.exp  [functionalias @ LinearAlgebra.exp]
const LinearAlgebra.fill! = Base.fill!  [functionalias @ LinearAlgebra.fill!]
const LinearAlgebra.floor = Base.floor  [functionalias @ LinearAlgebra.floor]
const LinearAlgebra.getindex = Base.getindex  [functionalias @ LinearAlgebra.getindex]
const LinearAlgebra.getproperty = Base.getproperty  [functionalias @ LinearAlgebra.getproperty]
const LinearAlgebra.hcat = Base.hcat  [functionalias @ LinearAlgebra.hcat]
const LinearAlgebra.hvcat = Base.hvcat  [functionalias @ LinearAlgebra.hvcat]
const LinearAlgebra.imag = Base.imag  [functionalias @ LinearAlgebra.imag]
const LinearAlgebra.inv = Base.inv  [functionalias @ LinearAlgebra.inv]
const LinearAlgebra.isapprox = Base.isapprox  [functionalias @ LinearAlgebra.isapprox]
const LinearAlgebra.isequal = Base.isequal  [functionalias @ LinearAlgebra.isequal]
const LinearAlgebra.isone = Base.isone  [functionalias @ LinearAlgebra.isone]
const LinearAlgebra.iszero = Base.iszero  [functionalias @ LinearAlgebra.iszero]
const LinearAlgebra.kron = Base.kron  [functionalias @ LinearAlgebra.kron]
const LinearAlgebra.kron! = Base.kron!  [functionalias @ LinearAlgebra.kron!]
const LinearAlgebra.length = Base.length  [functionalias @ LinearAlgebra.length]
const LinearAlgebra.log = Base.log  [functionalias @ LinearAlgebra.log]
const LinearAlgebra.map = Base.map  [functionalias @ LinearAlgebra.map]
const LinearAlgebra.ndims = Base.ndims  [functionalias @ LinearAlgebra.ndims]
const LinearAlgebra.one = Base.one  [functionalias @ LinearAlgebra.one]
const LinearAlgebra.oneunit = Base.oneunit  [functionalias @ LinearAlgebra.oneunit]
const LinearAlgebra.parent = Base.parent  [functionalias @ LinearAlgebra.parent]
const LinearAlgebra.permutedims = Base.permutedims  [functionalias @ LinearAlgebra.permutedims]
const LinearAlgebra.power_by_squaring = Base.power_by_squaring  [functionalias @ LinearAlgebra.power_by_squaring]
const LinearAlgebra.print_matrix = Base.print_matrix  [functionalias @ LinearAlgebra.print_matrix]
const LinearAlgebra.promote_rule = Base.promote_rule  [functionalias @ LinearAlgebra.promote_rule]
const LinearAlgebra.real = Base.real  [functionalias @ LinearAlgebra.real]
const LinearAlgebra.round = Base.round  [functionalias @ LinearAlgebra.round]
const LinearAlgebra.sec = Base.Math.sec  [functionalias @ LinearAlgebra.sec]
const LinearAlgebra.sech = Base.Math.sech  [functionalias @ LinearAlgebra.sech]
const LinearAlgebra.setindex! = Base.setindex!  [functionalias @ LinearAlgebra.setindex!]
const LinearAlgebra.show = Base.show  [functionalias @ LinearAlgebra.show]
const LinearAlgebra.similar = Base.similar  [functionalias @ LinearAlgebra.similar]
const LinearAlgebra.sin = Base.sin  [functionalias @ LinearAlgebra.sin]
const LinearAlgebra.sincos = Base.Math.sincos  [functionalias @ LinearAlgebra.sincos]
const LinearAlgebra.sinh = Base.sinh  [functionalias @ LinearAlgebra.sinh]
const LinearAlgebra.size = Base.size  [functionalias @ LinearAlgebra.size]
const LinearAlgebra.sqrt = Base.sqrt  [functionalias @ LinearAlgebra.sqrt]
const LinearAlgebra.stride = Base.stride  [functionalias @ LinearAlgebra.stride]
const LinearAlgebra.strides = Base.strides  [functionalias @ LinearAlgebra.strides]
const LinearAlgebra.tan = Base.tan  [functionalias @ LinearAlgebra.tan]
const LinearAlgebra.tanh = Base.tanh  [functionalias @ LinearAlgebra.tanh]
const LinearAlgebra.transpose = Base.transpose  [functionalias @ LinearAlgebra.transpose]
const LinearAlgebra.trunc = Base.trunc  [functionalias @ LinearAlgebra.trunc]
const LinearAlgebra.typed_hcat = Base.typed_hcat  [functionalias @ LinearAlgebra.typed_hcat]
const LinearAlgebra.vcat = Base.vcat  [functionalias @ LinearAlgebra.vcat]
const LinearAlgebra.vec = Base.vec  [functionalias @ LinearAlgebra.vec]
const LinearAlgebra.zero = Base.zero  [functionalias @ LinearAlgebra.zero]
const LinearAlgebra.× = LinearAlgebra.cross  [functionalias @ LinearAlgebra.×]
const LinearAlgebra.⋅ = LinearAlgebra.dot  [functionalias @ LinearAlgebra.⋅]
const Markdown.#4930#f = Markdown.hashheader  [functionalias @ Markdown.#4930#f]
const Markdown.#4934#f = Markdown.blockquote  [functionalias @ Markdown.#4934#f]
const Markdown.#4936#f = Markdown.admonition  [functionalias @ Markdown.#4936#f]
const Markdown.#4938#f = Markdown.list  [functionalias @ Markdown.#4938#f]
const Markdown.#4941#f = Markdown.asterisk_italic  [functionalias @ Markdown.#4941#f]
const Markdown.#4942#f = Markdown.underscore_italic  [functionalias @ Markdown.#4942#f]
const Markdown.#4944#f = Markdown.asterisk_bold  [functionalias @ Markdown.#4944#f]
const Markdown.#4945#f = Markdown.underscore_bold  [functionalias @ Markdown.#4945#f]
const Markdown.#4946#f = Markdown.inline_code  [functionalias @ Markdown.#4946#f]
const Markdown.#4948#f = Markdown.image  [functionalias @ Markdown.#4948#f]
const Markdown.#4950#f = Markdown.link  [functionalias @ Markdown.#4950#f]
const Markdown.#4951#f = Markdown.footnote_link  [functionalias @ Markdown.#4951#f]
const Markdown.#4952#f = Markdown.autolink  [functionalias @ Markdown.#4952#f]
const Markdown.#4954#f = Markdown.linebreak  [functionalias @ Markdown.#4954#f]
const Markdown.#4955#f = Markdown.en_dash  [functionalias @ Markdown.#4955#f]
const Markdown.#4956#f = Markdown.escapes  [functionalias @ Markdown.#4956#f]
const Markdown.#4959#f = Markdown.fencedcode  [functionalias @ Markdown.#4959#f]
const Markdown.#4961#f = Markdown.tex  [functionalias @ Markdown.#4961#f]
const Markdown.#4962#f = Markdown.interp  [functionalias @ Markdown.#4962#f]
const Markdown.== = Base.==  [functionalias @ Markdown.==]
const Markdown.InnerConfig = Base.Dict{Core.Char, Base.Vector{Core.Function}}  [typealias @ Markdown.InnerConfig]
const Markdown.catdoc = Base.Docs.catdoc  [functionalias @ Markdown.catdoc]
const Markdown.mapany = Base.mapany  [functionalias @ Markdown.mapany]
const Markdown.show = Base.show  [functionalias @ Markdown.show]
const Markdown.with_output_color = Base.with_output_color  [functionalias @ Markdown.with_output_color]
const Printf.Chars = Union{Base.Val{'c'}, Base.Val{'C'}}  [typealias @ Printf.Chars]
const Printf.Floats = Union{Base.Val{'e'}, Base.Val{'E'}, Base.Val{'f'}, Base.Val{'F'}, Base.Val{'g'}, Base.Val{'G'}, Base.Val{'a'}, Base.Val{'A'}}  [typealias @ Printf.Floats]
const Printf.HexBases = Union{Base.Val{'x'}, Base.Val{'X'}, Base.Val{'a'}, Base.Val{'A'}}  [typealias @ Printf.HexBases]
const Printf.Ints = Union{Base.Val{'d'}, Base.Val{'i'}, Base.Val{'u'}, Base.Val{'x'}, Base.Val{'X'}, Base.Val{'o'}}  [typealias @ Printf.Ints]
const Printf.Pointer = Base.Val{'p'}  [typealias @ Printf.Pointer]
const Printf.PositionCounter = Base.Val{'n'}  [typealias @ Printf.PositionCounter]
const Printf.Strings = Union{Base.Val{'s'}, Base.Val{'S'}}  [typealias @ Printf.Strings]
const Random.== = Base.==  [functionalias @ Random.==]
const Random.BitFloatType = Union{Core.Type{Core.Float16}, Core.Type{Core.Float32}, Core.Type{Core.Float64}}  [typealias @ Random.BitFloatType]
const Random.CloseOpen01_64 = Random.CloseOpen01{Core.Float64}  [typealias @ Random.CloseOpen01_64]
const Random.CloseOpen12_64 = Random.CloseOpen12{Core.Float64}  [typealias @ Random.CloseOpen12_64]
const Random.DSFMT.== = Base.==  [functionalias @ Random.DSFMT.==]
const Random.DSFMT.copy = Base.copy  [functionalias @ Random.DSFMT.copy]
const Random.DSFMT.copy! = Base.copy!  [functionalias @ Random.DSFMT.copy!]
const Random.DSFMT.hash = Base.hash  [functionalias @ Random.DSFMT.hash]
const Random.FloatInterval_64 = Random.FloatInterval{Core.Float64}  [typealias @ Random.FloatInterval_64]
const Random.Repetition = Union{Base.Val{1}, Base.Val{Inf}}  [typealias @ Random.Repetition]
const Random.SHA = SHA  [modulealias @ Random.SHA]
const Random.SamplerBoolBitInteger = Union{Random.SamplerType{Core.Bool}, Random.SamplerType{Core.Int128}, Random.SamplerType{Core.Int16}, Random.SamplerType{Core.Int32}, Random.SamplerType{Core.Int64}, Random.SamplerType{Core.Int8}, Random.SamplerType{Core.UInt128}, Random.SamplerType{Core.UInt16}, Random.SamplerType{Core.UInt32}, Random.SamplerType{Core.UInt64}, Random.SamplerType{Core.UInt8}}  [typealias @ Random.SamplerBoolBitInteger]
const Random.XoshiroSimd.CloseOpen01 = Random.CloseOpen01  [typealias @ Random.XoshiroSimd.CloseOpen01]
const Random.XoshiroSimd.SamplerTrivial = Random.SamplerTrivial  [typealias @ Random.XoshiroSimd.SamplerTrivial]
const Random.XoshiroSimd.SamplerType = Random.SamplerType  [typealias @ Random.XoshiroSimd.SamplerType]
const Random.XoshiroSimd.TaskLocalRNG = Random.TaskLocalRNG  [typealias @ Random.XoshiroSimd.TaskLocalRNG]
const Random.XoshiroSimd.UnsafeView = Random.UnsafeView  [typealias @ Random.XoshiroSimd.UnsafeView]
const Random.XoshiroSimd.Xoshiro = Random.Xoshiro  [typealias @ Random.XoshiroSimd.Xoshiro]
const Random.XoshiroSimd.rand = Base.rand  [functionalias @ Random.XoshiroSimd.rand]
const Random.XoshiroSimd.rand! = Random.rand!  [functionalias @ Random.XoshiroSimd.rand!]
const Random.convert = Base.convert  [functionalias @ Random.convert]
const Random.copy = Base.copy  [functionalias @ Random.copy]
const Random.copy! = Base.copy!  [functionalias @ Random.copy!]
const Random.copymutable = Base.copymutable  [functionalias @ Random.copymutable]
const Random.hash = Base.hash  [functionalias @ Random.hash]
const Random.rand = Base.rand  [functionalias @ Random.rand]
const Random.randn = Base.randn  [functionalias @ Random.randn]
const Random.show = Base.show  [functionalias @ Random.show]
const Tar.SHA = SHA  [modulealias @ Tar.SHA]
const Tar.Str = Union{Base.SubString{Core.String}, Core.String}  [typealias @ Tar.Str]
const Tar.true_predicate = Tar.#1  [functionalias @ Tar.true_predicate]
const Dates.% = Base.rem  [functionalias @ Dates.%]
const Dates.* = Base.*  [functionalias @ Dates.*]
const Dates.+ = Base.+  [functionalias @ Dates.+]
const Dates.- = Base.-  [functionalias @ Dates.-]
const Dates./ = Base./  [functionalias @ Dates./]
const Dates.== = Base.==  [functionalias @ Dates.==]
const Dates.ConvertiblePeriod = Union{Dates.Day, Dates.Week, Dates.TimePeriod}  [typealias @ Dates.ConvertiblePeriod]
const Dates.FixedPeriod = Union{Dates.Day, Dates.Hour, Dates.Microsecond, Dates.Millisecond, Dates.Minute, Dates.Nanosecond, Dates.Second, Dates.Week}  [typealias @ Dates.FixedPeriod]
const Dates.GeneralPeriod = Union{Dates.CompoundPeriod, Dates.Period}  [typealias @ Dates.GeneralPeriod]
const Dates.Locale = Union{Core.String, Dates.DateLocale}  [typealias @ Dates.Locale]
const Dates.OtherPeriod = Union{Dates.Month, Dates.Quarter, Dates.Year}  [typealias @ Dates.OtherPeriod]
const Dates.TimeTypeOrPeriod = Union{Dates.Day, Dates.Week, Dates.TimePeriod, Dates.TimeType}  [typealias @ Dates.TimeTypeOrPeriod]
const Dates.broadcast = Base.Broadcast.broadcast  [functionalias @ Dates.broadcast]
const Dates.div = Base.div  [functionalias @ Dates.div]
const Dates.fld = Base.fld  [functionalias @ Dates.fld]
const Dates.gcd = Base.gcd  [functionalias @ Dates.gcd]
const Dates.in = Base.in  [functionalias @ Dates.in]
const Dates.isless = Base.isless  [functionalias @ Dates.isless]
const Dates.lcm = Base.lcm  [functionalias @ Dates.lcm]
const Dates.mod = Base.mod  [functionalias @ Dates.mod]
const Dates.rem = Base.rem  [functionalias @ Dates.rem]
const Distributed.== = Base.==  [functionalias @ Distributed.==]
const Distributed.close = Base.close  [functionalias @ Distributed.close]
const Distributed.connect = Sockets.connect  [functionalias @ Distributed.connect]
const Distributed.deserialize = Serialization.deserialize  [functionalias @ Distributed.deserialize]
const Distributed.eltype = Base.eltype  [functionalias @ Distributed.eltype]
const Distributed.fetch = Base.fetch  [functionalias @ Distributed.fetch]
const Distributed.getindex = Base.getindex  [functionalias @ Distributed.getindex]
const Distributed.hash = Base.hash  [functionalias @ Distributed.hash]
const Distributed.isopen = Base.isopen  [functionalias @ Distributed.isopen]
const Distributed.isready = Base.isready  [functionalias @ Distributed.isready]
const Distributed.kill = Base.kill  [functionalias @ Distributed.kill]
const Distributed.length = Base.length  [functionalias @ Distributed.length]
const Distributed.lookup_object_number = Serialization.lookup_object_number  [functionalias @ Distributed.lookup_object_number]
const Distributed.object_number = Serialization.object_number  [functionalias @ Distributed.object_number]
const Distributed.push! = Base.push!  [functionalias @ Distributed.push!]
const Distributed.put! = Base.put!  [functionalias @ Distributed.put!]
const Distributed.remember_object = Serialization.remember_object  [functionalias @ Distributed.remember_object]
const Distributed.serialize = Serialization.serialize  [functionalias @ Distributed.serialize]
const Distributed.showerror = Base.showerror  [functionalias @ Distributed.showerror]
const Distributed.take! = Base.take!  [functionalias @ Distributed.take!]
const Distributed.wait = Base.wait  [functionalias @ Distributed.wait]
const Distributed.wait_connected = Sockets.wait_connected  [functionalias @ Distributed.wait_connected]
const InteractiveUtils.CodegenParams = Base.CodegenParams  [typealias @ InteractiveUtils.CodegenParams]
const InteractiveUtils.apropos = Base.Docs.apropos  [functionalias @ InteractiveUtils.apropos]
const InteractiveUtils.insert! = Base.insert!  [functionalias @ InteractiveUtils.insert!]
const InteractiveUtils.replace_ref_begin_end! = Base.replace_ref_begin_end!  [functionalias @ InteractiveUtils.replace_ref_begin_end!]
const InteractiveUtils.typesof = Base.typesof  [functionalias @ InteractiveUtils.typesof]
const LibGit2.== = Base.==  [functionalias @ LibGit2.==]
const LibGit2.@kwdef = Base.@kwdef  [functionalias @ LibGit2.@kwdef]
const LibGit2.Callbacks = Base.Dict{Core.Symbol, Tuple{Core.Ptr{Core.Nothing}, Core.Any}}  [typealias @ LibGit2.Callbacks]
const LibGit2.Consts.ensure_initialized = LibGit2.ensure_initialized  [functionalias @ LibGit2.Consts.ensure_initialized]
const LibGit2.Consts.version = LibGit2.version  [functionalias @ LibGit2.Consts.version]
const LibGit2.Creds = Union{Core.Nothing, LibGit2.AbstractCredential, LibGit2.CachedCredentials, LibGit2.CredentialPayload}  [typealias @ LibGit2.Creds]
const LibGit2.Error.ensure_initialized = LibGit2.ensure_initialized  [functionalias @ LibGit2.Error.ensure_initialized]
const LibGit2.GIT_CONFIG = LibGit2.Consts.GIT_CONFIG  [typealias @ LibGit2.GIT_CONFIG]
const LibGit2.GIT_MERGE_FILE = LibGit2.Consts.GIT_MERGE_FILE  [typealias @ LibGit2.GIT_MERGE_FILE]
const LibGit2.GIT_MERGE_FILE_FAVOR = LibGit2.Consts.GIT_MERGE_FILE_FAVOR  [typealias @ LibGit2.GIT_MERGE_FILE_FAVOR]
const LibGit2.GIT_SUBMODULE_IGNORE = LibGit2.Consts.GIT_SUBMODULE_IGNORE  [typealias @ LibGit2.GIT_SUBMODULE_IGNORE]
const Profile.Allocs.BTElement = Core.UInt64  [typealias @ Profile.Allocs.BTElement]
const Profile.Allocs.BacktraceCache = Base.Dict{Core.UInt64, Base.Vector{Base.StackTraces.StackFrame}}  [typealias @ Profile.Allocs.BacktraceCache]
const Profile.LineInfoDict = Base.Dict{Core.UInt64, Base.Vector{Base.StackTraces.StackFrame}}  [typealias @ Profile.LineInfoDict]
const Profile.LineInfoFlatDict = Base.Dict{Core.UInt64, Base.StackTraces.StackFrame}  [typealias @ Profile.LineInfoFlatDict]
const Profile.StackFrame = Base.StackTraces.StackFrame  [typealias @ Profile.StackFrame]
const Profile.lookup = Base.StackTraces.lookup  [functionalias @ Profile.lookup]
const Profile.show_spec_linfo = Base.StackTraces.show_spec_linfo  [functionalias @ Profile.show_spec_linfo]
const SparseArrays.& = Base.&  [functionalias @ SparseArrays.&]
const SparseArrays.* = Base.*  [functionalias @ SparseArrays.*]
const SparseArrays.+ = Base.+  [functionalias @ SparseArrays.+]
const SparseArrays.- = Base.-  [functionalias @ SparseArrays.-]
const SparseArrays./ = Base./  [functionalias @ SparseArrays./]
const SparseArrays.== = Base.==  [functionalias @ SparseArrays.==]
const SparseArrays.@propagate_inbounds = Base.@propagate_inbounds  [functionalias @ SparseArrays.@propagate_inbounds]
const SparseArrays.AbstractSparseMatrix = SparseArrays.AbstractSparseArray{Tv, Ti, 2} where {Tv, Ti}  [typealias @ SparseArrays.AbstractSparseMatrix]
const SparseArrays.AbstractSparseMatrixCSCInclAdjointAndTranspose = Union{LinearAlgebra.Adjoint{<:Core.Any, <:SparseArrays.AbstractSparseMatrixCSC}, LinearAlgebra.Transpose{<:Core.Any, <:SparseArrays.AbstractSparseMatrixCSC}, SparseArrays.AbstractSparseMatrixCSC}  [typealias @ SparseArrays.AbstractSparseMatrixCSCInclAdjointAndTranspose]
const SparseArrays.AbstractSparseVecOrMat = Union{SparseArrays.AbstractSparseArray{Tv, Ti, 1} where {Tv, Ti}, SparseArrays.AbstractSparseArray{Tv, Ti, 2} where {Tv, Ti}}  [typealias @ SparseArrays.AbstractSparseVecOrMat]
const SparseArrays.AbstractSparseVector = SparseArrays.AbstractSparseArray{Tv, Ti, 1} where {Tv, Ti}  [typealias @ SparseArrays.AbstractSparseVector]
const SparseArrays.AbstractTriangular = LinearAlgebra.AbstractTriangular  [typealias @ SparseArrays.AbstractTriangular]
const SparseArrays.AbstractTriangularSparse = LinearAlgebra.AbstractTriangular{Tv, <:Union{SparseArrays.AbstractSparseMatrixCSC{Tv, Ti}, Base.SubArray{Tv, 2, <:SparseArrays.AbstractSparseMatrixCSC{Tv, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange}} where {Tv, Ti}  [typealias @ SparseArrays.AbstractTriangularSparse]
const SparseArrays.AdjOrTransDenseMatrix = Union{LinearAlgebra.Adjoint{<:Core.Any, <:Union{LinearAlgebra.LowerTriangular, LinearAlgebra.UnitLowerTriangular, LinearAlgebra.UnitUpperTriangular, LinearAlgebra.UpperTriangular, Base.StridedMatrix, Base.BitMatrix}}, LinearAlgebra.LowerTriangular, LinearAlgebra.Transpose{<:Core.Any, <:Union{LinearAlgebra.LowerTriangular, LinearAlgebra.UnitLowerTriangular, LinearAlgebra.UnitUpperTriangular, LinearAlgebra.UpperTriangular, Base.StridedMatrix, Base.BitMatrix}}, LinearAlgebra.UnitLowerTriangular, LinearAlgebra.UnitUpperTriangular, LinearAlgebra.UpperTriangular, Base.StridedMatrix, Base.BitMatrix}  [typealias @ SparseArrays.AdjOrTransDenseMatrix]
const SparseArrays.AdjOrTransSparseVectorUnion = Union{LinearAlgebra.Adjoint{Tv, var"#s971"}, LinearAlgebra.Transpose{Tv, var"#s971"}} where {Tv, Ti, var"#s971"<:Union{SparseArrays.AbstractCompressedVector{Tv, Ti}, Base.SubArray{Tv, 1, <:SparseArrays.AbstractSparseMatrixCSC{Tv, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, Core.Int64}, false}, Base.SubArray{Tv, 1, <:SparseArrays.AbstractSparseVector{Tv, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}}, false}}}  [typealias @ SparseArrays.AdjOrTransSparseVectorUnion]
const SparseArrays.Array = Core.Array  [typealias @ SparseArrays.Array]
const SparseArrays.CHOLMOD.* = Base.*  [functionalias @ SparseArrays.CHOLMOD.*]
const SparseArrays.CHOLMOD.AbstractSparseMatrix = SparseArrays.AbstractSparseArray{Tv, Ti, 2} where {Tv, Ti}  [typealias @ SparseArrays.CHOLMOD.AbstractSparseMatrix]
const SparseArrays.CHOLMOD.AbstractSparseVecOrMatInclAdjAndTrans = Union{Union{LinearAlgebra.Adjoint{var"#s971", var"#s970"}, LinearAlgebra.Transpose{var"#s971", var"#s970"}} where {var"#s971", var"#s970"<:Union{SparseArrays.AbstractSparseMatrix, SparseArrays.AbstractSparseVector}}, SparseArrays.AbstractSparseMatrix, SparseArrays.AbstractSparseVector}  [typealias @ SparseArrays.CHOLMOD.AbstractSparseVecOrMatInclAdjAndTrans]
const SparseArrays.CHOLMOD.ITypes = Union{Core.Int32, Core.Int64}  [typealias @ SparseArrays.CHOLMOD.ITypes]
const SparseArrays.CHOLMOD.IndexCartesian = Base.IndexCartesian  [typealias @ SparseArrays.CHOLMOD.IndexCartesian]
const SparseArrays.CHOLMOD.IndexLinear = Base.IndexLinear  [typealias @ SparseArrays.CHOLMOD.IndexLinear]
const SparseArrays.CHOLMOD.IndexStyle = Base.IndexStyle  [typealias @ SparseArrays.CHOLMOD.IndexStyle]
const SparseArrays.CHOLMOD.Libdl = Libdl  [modulealias @ SparseArrays.CHOLMOD.Libdl]
const SparseArrays.CHOLMOD.RealHermSymComplexHermF64SSL = Union{LinearAlgebra.Hermitian{Base.ComplexF64, SparseArrays.SparseMatrixCSC{Base.ComplexF64, Core.Int64}}, LinearAlgebra.Hermitian{Core.Float64, SparseArrays.SparseMatrixCSC{Core.Float64, Core.Int64}}, LinearAlgebra.Symmetric{Core.Float64, SparseArrays.SparseMatrixCSC{Core.Float64, Core.Int64}}}  [typealias @ SparseArrays.CHOLMOD.RealHermSymComplexHermF64SSL]
const SparseArrays.CHOLMOD.SparseMatrixCSC = SparseArrays.SparseMatrixCSC  [typealias @ SparseArrays.CHOLMOD.SparseMatrixCSC]
const SparseArrays.CHOLMOD.SparseVecOrMat = Union{SparseArrays.SparseMatrixCSC{Tv, Ti}, SparseArrays.SparseVector{Tv, Ti}} where {Tv, Ti}  [typealias @ SparseArrays.CHOLMOD.SparseVecOrMat]
const SparseArrays.CHOLMOD.StridedVecOrMatInclAdjAndTrans = Union{LinearAlgebra.Adjoint{<:Core.Any, <:Base.StridedVecOrMat}, LinearAlgebra.Transpose{<:Core.Any, <:Base.StridedVecOrMat}, Base.StridedVecOrMat}  [typealias @ SparseArrays.CHOLMOD.StridedVecOrMatInclAdjAndTrans]
const SparseArrays.CHOLMOD.SuiteSparseStruct = Union{SparseArrays.LibSuiteSparse.cholmod_dense_struct, SparseArrays.LibSuiteSparse.cholmod_factor_struct, SparseArrays.LibSuiteSparse.cholmod_sparse_struct}  [typealias @ SparseArrays.CHOLMOD.SuiteSparseStruct]
const SparseArrays.CHOLMOD.SuiteSparse_long = Core.Int64  [typealias @ SparseArrays.CHOLMOD.SuiteSparse_long]
const SparseArrays.CHOLMOD.VRealTypes = Core.Float64  [typealias @ SparseArrays.CHOLMOD.VRealTypes]
const SparseArrays.CHOLMOD.VTypes = Union{Core.Float64, Base.ComplexF64}  [typealias @ SparseArrays.CHOLMOD.VTypes]
const SparseArrays.CHOLMOD.\ = Base.\  [functionalias @ SparseArrays.CHOLMOD.\]
const SparseArrays.CHOLMOD.adjoint = Base.adjoint  [functionalias @ SparseArrays.CHOLMOD.adjoint]
const SparseArrays.CHOLMOD.axes = Base.axes  [functionalias @ SparseArrays.CHOLMOD.axes]
const SparseArrays.CHOLMOD.cholesky = LinearAlgebra.cholesky  [functionalias @ SparseArrays.CHOLMOD.cholesky]
const SparseArrays.CHOLMOD.cholesky! = LinearAlgebra.cholesky!  [functionalias @ SparseArrays.CHOLMOD.cholesky!]
const SparseArrays.CHOLMOD.convert = Base.convert  [functionalias @ SparseArrays.CHOLMOD.convert]
const SparseArrays.CHOLMOD.copy = Base.copy  [functionalias @ SparseArrays.CHOLMOD.copy]
const SparseArrays.CHOLMOD.det = LinearAlgebra.det  [functionalias @ SparseArrays.CHOLMOD.det]
const SparseArrays.CHOLMOD.diag = LinearAlgebra.diag  [functionalias @ SparseArrays.CHOLMOD.diag]
const SparseArrays.CHOLMOD.eltype = Base.eltype  [functionalias @ SparseArrays.CHOLMOD.eltype]
const SparseArrays.CHOLMOD.getindex = Base.getindex  [functionalias @ SparseArrays.CHOLMOD.getindex]
const SparseArrays.CHOLMOD.getproperty = Base.getproperty  [functionalias @ SparseArrays.CHOLMOD.getproperty]
const SparseArrays.CHOLMOD.increment = SparseArrays.increment  [functionalias @ SparseArrays.CHOLMOD.increment]
const SparseArrays.CHOLMOD.increment! = SparseArrays.increment!  [functionalias @ SparseArrays.CHOLMOD.increment!]
const SparseArrays.CHOLMOD.indtype = SparseArrays.indtype  [functionalias @ SparseArrays.CHOLMOD.indtype]
const SparseArrays.CHOLMOD.ishermitian = LinearAlgebra.ishermitian  [functionalias @ SparseArrays.CHOLMOD.ishermitian]
const SparseArrays.CHOLMOD.isposdef = LinearAlgebra.isposdef  [functionalias @ SparseArrays.CHOLMOD.isposdef]
const SparseArrays.CHOLMOD.issuccess = LinearAlgebra.issuccess  [functionalias @ SparseArrays.CHOLMOD.issuccess]
const SparseArrays.CHOLMOD.issymmetric = LinearAlgebra.issymmetric  [functionalias @ SparseArrays.CHOLMOD.issymmetric]
const SparseArrays.CHOLMOD.ldlt = LinearAlgebra.ldlt  [functionalias @ SparseArrays.CHOLMOD.ldlt]
const SparseArrays.CHOLMOD.ldlt! = LinearAlgebra.ldlt!  [functionalias @ SparseArrays.CHOLMOD.ldlt!]
const SparseArrays.CHOLMOD.logdet = LinearAlgebra.logdet  [functionalias @ SparseArrays.CHOLMOD.logdet]
const SparseArrays.CHOLMOD.nnz = SparseArrays.nnz  [functionalias @ SparseArrays.CHOLMOD.nnz]
const SparseArrays.CHOLMOD.show = Base.show  [functionalias @ SparseArrays.CHOLMOD.show]
const SparseArrays.CHOLMOD.size = Base.size  [functionalias @ SparseArrays.CHOLMOD.size]
const SparseArrays.CHOLMOD.sparse = SparseArrays.sparse  [functionalias @ SparseArrays.CHOLMOD.sparse]
const SparseArrays.CHOLMOD.spzeros = SparseArrays.spzeros  [functionalias @ SparseArrays.CHOLMOD.spzeros]
const SparseArrays.Complex = Base.Complex  [typealias @ SparseArrays.Complex]
const SparseArrays.DenseInputVecOrMat = Union{LinearAlgebra.Adjoint{<:Core.Any, <:Union{LinearAlgebra.LowerTriangular, LinearAlgebra.UnitLowerTriangular, LinearAlgebra.UnitUpperTriangular, LinearAlgebra.UpperTriangular, Base.StridedMatrix, Base.BitMatrix}}, LinearAlgebra.LowerTriangular, LinearAlgebra.Transpose{<:Core.Any, <:Union{LinearAlgebra.LowerTriangular, LinearAlgebra.UnitLowerTriangular, LinearAlgebra.UnitUpperTriangular, LinearAlgebra.UpperTriangular, Base.StridedMatrix, Base.BitMatrix}}, LinearAlgebra.UnitLowerTriangular, LinearAlgebra.UnitUpperTriangular, LinearAlgebra.UpperTriangular, Base.StridedMatrix, Base.StridedVector, Base.BitVector, Base.BitMatrix}  [typealias @ SparseArrays.DenseInputVecOrMat]
const SparseArrays.DenseInputVector = Union{Base.BitArray{1}, Union{Core.DenseArray{T, 1}, Base.ReinterpretArray{T, 1, S, A, IsReshaped} where {A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, 1, A} where A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, Base.SubArray{T, 1, A, I} where {A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.ReshapedArray{T, N, A} where {T, N, A<:Union{Base.ReinterpretArray{T, N, S, A, IsReshaped} where {T, N, A<:Union{Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}, IsReshaped, S}, Base.SubArray{T, N, A, I, true} where {T, N, A<:Core.DenseArray, I<:Union{Tuple{Vararg{Core.Real}}, Tuple{Base.AbstractUnitRange, Vararg{Core.Any}}}}, Core.DenseArray}}, Core.DenseArray}, I<:Tuple{Vararg{Union{Base.AbstractCartesianIndex, Base.ReshapedArray{T, N, A, Tuple{}} where {T, N, A<:Base.AbstractUnitRange}, Union{Base.AbstractRange{<:Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}}, var"#s92"} where var"#s92"<:Union{Core.Int128, Core.Int16, Core.Int32, Core.Int64, Core.Int8, Core.UInt128, Core.UInt16, Core.UInt32, Core.UInt64, Core.UInt8}}}}}} where T}  [typealias @ SparseArrays.DenseInputVector]
const SparseArrays.DenseMatrixUnion = Union{LinearAlgebra.LowerTriangular, LinearAlgebra.UnitLowerTriangular, LinearAlgebra.UnitUpperTriangular, LinearAlgebra.UpperTriangular, Base.StridedMatrix, Base.BitMatrix}  [typealias @ SparseArrays.DenseMatrixUnion]
const SparseArrays.HigherOrderFns.Broadcasted0 = Base.Broadcast.Broadcasted{Style, Axes, F, Tuple{}} where {Style<:Union{Core.Nothing, Base.Broadcast.BroadcastStyle}, Axes, F}  [typealias @ SparseArrays.HigherOrderFns.Broadcasted0]
const SparseArrays.HigherOrderFns.SPVM = Union{SparseArrays.HigherOrderFns.SparseMatStyle, SparseArrays.HigherOrderFns.SparseVecStyle}  [typealias @ SparseArrays.HigherOrderFns.SPVM]
const SparseArrays.HigherOrderFns.SpBroadcasted1 = Base.Broadcast.Broadcasted{Style, Axes, F, Args} where {Style<:Union{SparseArrays.HigherOrderFns.SparseMatStyle, SparseArrays.HigherOrderFns.SparseVecStyle}, Axes, F, Args<:Tuple{Union{SparseArrays.AbstractCompressedVector, SparseArrays.AbstractSparseMatrixCSC}}}  [typealias @ SparseArrays.HigherOrderFns.SpBroadcasted1]
const SparseArrays.HigherOrderFns.SpBroadcasted2 = Base.Broadcast.Broadcasted{Style, Axes, F, Args} where {Style<:Union{SparseArrays.HigherOrderFns.SparseMatStyle, SparseArrays.HigherOrderFns.SparseVecStyle}, Axes, F, Args<:Tuple{Union{SparseArrays.AbstractCompressedVector, SparseArrays.AbstractSparseMatrixCSC}, Union{SparseArrays.AbstractCompressedVector, SparseArrays.AbstractSparseMatrixCSC}}}  [typealias @ SparseArrays.HigherOrderFns.SpBroadcasted2]
const SparseArrays.HigherOrderFns.SparseOrStructuredMatrix = Union{LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.LowerTriangular, LinearAlgebra.SymTridiagonal, LinearAlgebra.Tridiagonal, LinearAlgebra.UnitLowerTriangular, LinearAlgebra.UnitUpperTriangular, LinearAlgebra.UpperTriangular, SparseArrays.FixedSparseCSC, SparseArrays.SparseMatrixCSC}  [typealias @ SparseArrays.HigherOrderFns.SparseOrStructuredMatrix]
const SparseArrays.HigherOrderFns.SparseVecOrMat = Union{SparseArrays.AbstractCompressedVector, SparseArrays.AbstractSparseMatrixCSC}  [typealias @ SparseArrays.HigherOrderFns.SparseVecOrMat]
const SparseArrays.HigherOrderFns.StructuredMatrix = Union{LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Tridiagonal}  [typealias @ SparseArrays.HigherOrderFns.StructuredMatrix]
const SparseArrays.HigherOrderFns.broadcast = Base.Broadcast.broadcast  [functionalias @ SparseArrays.HigherOrderFns.broadcast]
const SparseArrays.HigherOrderFns.copy = Base.copy  [functionalias @ SparseArrays.HigherOrderFns.copy]
const SparseArrays.HigherOrderFns.copyto! = Base.copyto!  [functionalias @ SparseArrays.HigherOrderFns.copyto!]
const SparseArrays.HigherOrderFns.map = Base.map  [functionalias @ SparseArrays.HigherOrderFns.map]
const SparseArrays.HigherOrderFns.map! = Base.map!  [functionalias @ SparseArrays.HigherOrderFns.map!]
const SparseArrays.LibSuiteSparse.BLAS_DGEMM = SparseArrays.LibSuiteSparse.dgemm_64_  [functionalias @ SparseArrays.LibSuiteSparse.BLAS_DGEMM]
const SparseArrays.LibSuiteSparse.BLAS_DGEMV = SparseArrays.LibSuiteSparse.dgemv_64_  [functionalias @ SparseArrays.LibSuiteSparse.BLAS_DGEMV]
const SparseArrays.LibSuiteSparse.BLAS_DGER = SparseArrays.LibSuiteSparse.dger_64_  [functionalias @ SparseArrays.LibSuiteSparse.BLAS_DGER]
const SparseArrays.LibSuiteSparse.BLAS_DSCAL = SparseArrays.LibSuiteSparse.dscal_64_  [functionalias @ SparseArrays.LibSuiteSparse.BLAS_DSCAL]
const SparseArrays.LibSuiteSparse.BLAS_DSYRK = SparseArrays.LibSuiteSparse.dsyrk_64_  [functionalias @ SparseArrays.LibSuiteSparse.BLAS_DSYRK]
const SparseArrays.LibSuiteSparse.BLAS_DTRSM = SparseArrays.LibSuiteSparse.dtrsm_64_  [functionalias @ SparseArrays.LibSuiteSparse.BLAS_DTRSM]
const SparseArrays.LibSuiteSparse.BLAS_DTRSV = SparseArrays.LibSuiteSparse.dtrsv_64_  [functionalias @ SparseArrays.LibSuiteSparse.BLAS_DTRSV]
const SparseArrays.LibSuiteSparse.BLAS_INT = Core.Int32  [typealias @ SparseArrays.LibSuiteSparse.BLAS_INT]
const SparseArrays.LibSuiteSparse.BLAS_ZGEMM = SparseArrays.LibSuiteSparse.zgemm_64_  [functionalias @ SparseArrays.LibSuiteSparse.BLAS_ZGEMM]
const SparseArrays.LibSuiteSparse.BLAS_ZGEMV = SparseArrays.LibSuiteSparse.zgemv_64_  [functionalias @ SparseArrays.LibSuiteSparse.BLAS_ZGEMV]
const SparseArrays.LibSuiteSparse.BLAS_ZGER = SparseArrays.LibSuiteSparse.zgeru_64_  [functionalias @ SparseArrays.LibSuiteSparse.BLAS_ZGER]
const SparseArrays.LibSuiteSparse.BLAS_ZHERK = SparseArrays.LibSuiteSparse.zherk_64_  [functionalias @ SparseArrays.LibSuiteSparse.BLAS_ZHERK]
const SparseArrays.LibSuiteSparse.BLAS_ZSCAL = SparseArrays.LibSuiteSparse.zscal_64_  [functionalias @ SparseArrays.LibSuiteSparse.BLAS_ZSCAL]
const SparseArrays.LibSuiteSparse.BLAS_ZTRSM = SparseArrays.LibSuiteSparse.ztrsm_64_  [functionalias @ SparseArrays.LibSuiteSparse.BLAS_ZTRSM]
const SparseArrays.LibSuiteSparse.BLAS_ZTRSV = SparseArrays.LibSuiteSparse.ztrsv_64_  [functionalias @ SparseArrays.LibSuiteSparse.BLAS_ZTRSV]
const SparseArrays.LibSuiteSparse.Complex = Core.Float64  [typealias @ SparseArrays.LibSuiteSparse.Complex]
const SparseArrays.LibSuiteSparse.LAPACK_DPOTRF = SparseArrays.LibSuiteSparse.dpotrf_64_  [functionalias @ SparseArrays.LibSuiteSparse.LAPACK_DPOTRF]
const SparseArrays.LibSuiteSparse.LAPACK_ZPOTRF = SparseArrays.LibSuiteSparse.zpotrf_64_  [functionalias @ SparseArrays.LibSuiteSparse.LAPACK_ZPOTRF]
const SparseArrays.LibSuiteSparse.SuiteSparseQR_C_factorization = SparseArrays.LibSuiteSparse.SuiteSparseQR_C_factorization_struct  [typealias @ SparseArrays.LibSuiteSparse.SuiteSparseQR_C_factorization]
const SparseArrays.LibSuiteSparse.SuiteSparse_long = Core.Int64  [typealias @ SparseArrays.LibSuiteSparse.SuiteSparse_long]
const SparseArrays.LibSuiteSparse.cholmod_common = SparseArrays.LibSuiteSparse.cholmod_common_struct  [typealias @ SparseArrays.LibSuiteSparse.cholmod_common]
const SparseArrays.LibSuiteSparse.cholmod_dense = SparseArrays.LibSuiteSparse.cholmod_dense_struct  [typealias @ SparseArrays.LibSuiteSparse.cholmod_dense]
const SparseArrays.LibSuiteSparse.cholmod_factor = SparseArrays.LibSuiteSparse.cholmod_factor_struct  [typealias @ SparseArrays.LibSuiteSparse.cholmod_factor]
const SparseArrays.LibSuiteSparse.cholmod_sparse = SparseArrays.LibSuiteSparse.cholmod_sparse_struct  [typealias @ SparseArrays.LibSuiteSparse.cholmod_sparse]
const SparseArrays.LibSuiteSparse.cholmod_triplet = SparseArrays.LibSuiteSparse.cholmod_triplet_struct  [typealias @ SparseArrays.LibSuiteSparse.cholmod_triplet]
const SparseArrays.LibSuiteSparse.descendantScore = SparseArrays.LibSuiteSparse.cholmod_descendant_score_t  [typealias @ SparseArrays.LibSuiteSparse.descendantScore]
const SparseArrays.LowerTriangularPlain = Union{LinearAlgebra.LowerTriangular{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}, LinearAlgebra.UnitLowerTriangular{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}} where T  [typealias @ SparseArrays.LowerTriangularPlain]
const SparseArrays.LowerTriangularSparse = Union{LinearAlgebra.LowerTriangular{T, <:LinearAlgebra.Adjoint{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}}, LinearAlgebra.LowerTriangular{T, <:LinearAlgebra.Transpose{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}}, LinearAlgebra.LowerTriangular{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}, LinearAlgebra.UnitLowerTriangular{T, <:LinearAlgebra.Adjoint{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}}, LinearAlgebra.UnitLowerTriangular{T, <:LinearAlgebra.Transpose{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}}, LinearAlgebra.UnitLowerTriangular{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}} where T  [typealias @ SparseArrays.LowerTriangularSparse]
const SparseArrays.LowerTriangularWrapped = Union{LinearAlgebra.LowerTriangular{T, <:LinearAlgebra.Adjoint{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}}, LinearAlgebra.LowerTriangular{T, <:LinearAlgebra.Transpose{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}}, LinearAlgebra.UnitLowerTriangular{T, <:LinearAlgebra.Adjoint{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}}, LinearAlgebra.UnitLowerTriangular{T, <:LinearAlgebra.Transpose{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}}} where T  [typealias @ SparseArrays.LowerTriangularWrapped]
const SparseArrays.SPQR.* = Base.*  [functionalias @ SparseArrays.SPQR.*]
const SparseArrays.SPQR.\ = Base.\  [functionalias @ SparseArrays.SPQR.\]
const SparseArrays.SPQR.cholmod_l_free = SparseArrays.LibSuiteSparse.cholmod_l_free  [functionalias @ SparseArrays.SPQR.cholmod_l_free]
const SparseArrays.SVorFSV = Union{SparseArrays.FixedSparseVector{Tv, Ti}, SparseArrays.SparseVector{Tv, Ti}} where {Tv, Ti}  [typealias @ SparseArrays.SVorFSV]
const SparseArrays.SorF = Union{var"#s971", var"#s970"} where {var"#s971"<:SparseArrays.SparseMatrixCSC, var"#s970"<:SparseArrays.FixedSparseCSC}  [typealias @ SparseArrays.SorF]
const SparseArrays.SparseColumnView = Base.SubArray{Tv, 1, <:SparseArrays.AbstractSparseMatrixCSC{Tv, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, Core.Int64}, false} where {Tv, Ti}  [typealias @ SparseArrays.SparseColumnView]
const SparseArrays.SparseMatrixCSCSymmHerm = Union{LinearAlgebra.Hermitian{Tv, <:Union{SparseArrays.AbstractSparseMatrixCSC{Tv, Ti}, Base.SubArray{Tv, 2, <:SparseArrays.AbstractSparseMatrixCSC{Tv, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange}}, LinearAlgebra.Symmetric{Tv, <:Union{SparseArrays.AbstractSparseMatrixCSC{Tv, Ti}, Base.SubArray{Tv, 2, <:SparseArrays.AbstractSparseMatrixCSC{Tv, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange}}} where {Tv, Ti}  [typealias @ SparseArrays.SparseMatrixCSCSymmHerm]
const SparseArrays.SparseMatrixCSCUnion = Union{SparseArrays.AbstractSparseMatrixCSC{Tv, Ti}, Base.SubArray{Tv, 2, <:SparseArrays.AbstractSparseMatrixCSC{Tv, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where {Tv, Ti}  [typealias @ SparseArrays.SparseMatrixCSCUnion]
const SparseArrays.SparseMatrixCSCView = Base.SubArray{Tv, 2, <:SparseArrays.AbstractSparseMatrixCSC{Tv, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where {Tv, Ti, I<:Base.AbstractUnitRange}  [typealias @ SparseArrays.SparseMatrixCSCView]
const SparseArrays.SparseOrTri = Union{SparseArrays.AbstractSparseMatrixCSC{Tv, Ti}, Base.SubArray{Tv, 2, <:SparseArrays.AbstractSparseMatrixCSC{Tv, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange, LinearAlgebra.LowerTriangular{Tv, <:Union{SparseArrays.AbstractSparseMatrixCSC{Tv, Ti}, Base.SubArray{Tv, 2, <:SparseArrays.AbstractSparseMatrixCSC{Tv, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange}}, LinearAlgebra.UpperTriangular{Tv, <:Union{SparseArrays.AbstractSparseMatrixCSC{Tv, Ti}, Base.SubArray{Tv, 2, <:SparseArrays.AbstractSparseMatrixCSC{Tv, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange}}} where {Tv, Ti}  [typealias @ SparseArrays.SparseOrTri]
const SparseArrays.SparseTriangular = Union{LinearAlgebra.LowerTriangular{Tv, <:Union{SparseArrays.AbstractSparseMatrixCSC{Tv, Ti}, Base.SubArray{Tv, 2, <:SparseArrays.AbstractSparseMatrixCSC{Tv, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange}}, LinearAlgebra.UpperTriangular{Tv, <:Union{SparseArrays.AbstractSparseMatrixCSC{Tv, Ti}, Base.SubArray{Tv, 2, <:SparseArrays.AbstractSparseMatrixCSC{Tv, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange}}} where {Tv, Ti}  [typealias @ SparseArrays.SparseTriangular]
const SparseArrays.SparseVectorUnion = Union{SparseArrays.AbstractCompressedVector{Tv, Ti}, Base.SubArray{Tv, 1, <:SparseArrays.AbstractSparseMatrixCSC{Tv, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, Core.Int64}, false}, Base.SubArray{Tv, 1, <:SparseArrays.AbstractSparseVector{Tv, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}}, false}} where {Tv, Ti}  [typealias @ SparseArrays.SparseVectorUnion]
const SparseArrays.SparseVectorView = Base.SubArray{Tv, 1, <:SparseArrays.AbstractSparseVector{Tv, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}}, false} where {Tv, Ti}  [typealias @ SparseArrays.SparseVectorView]
const SparseArrays.StructuredMatrix = Union{LinearAlgebra.Bidiagonal{T, V} where V<:Base.AbstractVector{T}, LinearAlgebra.Diagonal{T, V} where V<:Base.AbstractVector{T}, LinearAlgebra.SymTridiagonal{T, V} where V<:Base.AbstractVector{T}, LinearAlgebra.Tridiagonal{T, V} where V<:Base.AbstractVector{T}} where T  [typealias @ SparseArrays.StructuredMatrix]
const SparseArrays.TriangularSparse = Union{LinearAlgebra.LowerTriangular{T, <:LinearAlgebra.Adjoint{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}}, LinearAlgebra.LowerTriangular{T, <:LinearAlgebra.Transpose{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}}, LinearAlgebra.LowerTriangular{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}, LinearAlgebra.UnitLowerTriangular{T, <:LinearAlgebra.Adjoint{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}}, LinearAlgebra.UnitLowerTriangular{T, <:LinearAlgebra.Transpose{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}}, LinearAlgebra.UnitLowerTriangular{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}, LinearAlgebra.UnitUpperTriangular{T, <:LinearAlgebra.Adjoint{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}}, LinearAlgebra.UnitUpperTriangular{T, <:LinearAlgebra.Transpose{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}}, LinearAlgebra.UnitUpperTriangular{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}, LinearAlgebra.UpperTriangular{T, <:LinearAlgebra.Adjoint{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}}, LinearAlgebra.UpperTriangular{T, <:LinearAlgebra.Transpose{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}}, LinearAlgebra.UpperTriangular{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}} where T  [typealias @ SparseArrays.TriangularSparse]
const SparseArrays.UMFPACK.ATLU = Union{LinearAlgebra.Adjoint{<:Core.Any, <:SparseArrays.UMFPACK.UmfpackLU}, LinearAlgebra.Transpose{<:Core.Any, <:SparseArrays.UMFPACK.UmfpackLU}}  [typealias @ SparseArrays.UMFPACK.ATLU]
const SparseArrays.UMFPACK.AbstractSerializer = Serialization.AbstractSerializer  [typealias @ SparseArrays.UMFPACK.AbstractSerializer]
const SparseArrays.UMFPACK.Factorization = LinearAlgebra.Factorization  [typealias @ SparseArrays.UMFPACK.Factorization]
const SparseArrays.UMFPACK.SuiteSparse_long = Core.Int64  [typealias @ SparseArrays.UMFPACK.SuiteSparse_long]
const SparseArrays.UMFPACK.UMFITypes = Union{Core.Int32, Core.Int64}  [typealias @ SparseArrays.UMFPACK.UMFITypes]
const SparseArrays.UMFPACK.UMFVTypes = Union{Core.Float64, Base.ComplexF64}  [typealias @ SparseArrays.UMFPACK.UMFVTypes]
const SparseArrays.UMFPACK.\ = Base.\  [functionalias @ SparseArrays.UMFPACK.\]
const SparseArrays.UMFPACK.checksquare = LinearAlgebra.checksquare  [functionalias @ SparseArrays.UMFPACK.checksquare]
const SparseArrays.UMFPACK.decrement = SparseArrays.decrement  [functionalias @ SparseArrays.UMFPACK.decrement]
const SparseArrays.UMFPACK.decrement! = SparseArrays.decrement!  [functionalias @ SparseArrays.UMFPACK.decrement!]
const SparseArrays.UMFPACK.deserialize = Serialization.deserialize  [functionalias @ SparseArrays.UMFPACK.deserialize]
const SparseArrays.UMFPACK.det = LinearAlgebra.det  [functionalias @ SparseArrays.UMFPACK.det]
const SparseArrays.UMFPACK.getproperty = Base.getproperty  [functionalias @ SparseArrays.UMFPACK.getproperty]
const SparseArrays.UMFPACK.increment = SparseArrays.increment  [functionalias @ SparseArrays.UMFPACK.increment]
const SparseArrays.UMFPACK.increment! = SparseArrays.increment!  [functionalias @ SparseArrays.UMFPACK.increment!]
const SparseArrays.UMFPACK.ldiv! = LinearAlgebra.ldiv!  [functionalias @ SparseArrays.UMFPACK.ldiv!]
const SparseArrays.UMFPACK.logabsdet = LinearAlgebra.logabsdet  [functionalias @ SparseArrays.UMFPACK.logabsdet]
const SparseArrays.UMFPACK.lu = LinearAlgebra.lu  [functionalias @ SparseArrays.UMFPACK.lu]
const SparseArrays.UMFPACK.lu! = LinearAlgebra.lu!  [functionalias @ SparseArrays.UMFPACK.lu!]
const SparseArrays.UMFPACK.nnz = SparseArrays.nnz  [functionalias @ SparseArrays.UMFPACK.nnz]
const SparseArrays.UMFPACK.serialize = Serialization.serialize  [functionalias @ SparseArrays.UMFPACK.serialize]
const SparseArrays.UMFPACK.show = Base.show  [functionalias @ SparseArrays.UMFPACK.show]
const SparseArrays.UMFPACK.size = Base.size  [functionalias @ SparseArrays.UMFPACK.size]
const SparseArrays.UMFPACK.umfpack_dl_defaults = SparseArrays.LibSuiteSparse.umfpack_dl_defaults  [functionalias @ SparseArrays.UMFPACK.umfpack_dl_defaults]
const SparseArrays.UMFPACK.umfpack_dl_report_control = SparseArrays.LibSuiteSparse.umfpack_dl_report_control  [functionalias @ SparseArrays.UMFPACK.umfpack_dl_report_control]
const SparseArrays.UMFPACK.umfpack_dl_report_info = SparseArrays.LibSuiteSparse.umfpack_dl_report_info  [functionalias @ SparseArrays.UMFPACK.umfpack_dl_report_info]
const SparseArrays.UnitDiagonalTriangular = Union{LinearAlgebra.UnitLowerTriangular, LinearAlgebra.UnitUpperTriangular}  [typealias @ SparseArrays.UnitDiagonalTriangular]
const SparseArrays.UpperTriangularPlain = Union{LinearAlgebra.UnitUpperTriangular{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}, LinearAlgebra.UpperTriangular{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}} where T  [typealias @ SparseArrays.UpperTriangularPlain]
const SparseArrays.UpperTriangularSparse = Union{LinearAlgebra.UnitUpperTriangular{T, <:LinearAlgebra.Adjoint{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}}, LinearAlgebra.UnitUpperTriangular{T, <:LinearAlgebra.Transpose{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}}, LinearAlgebra.UnitUpperTriangular{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}, LinearAlgebra.UpperTriangular{T, <:LinearAlgebra.Adjoint{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}}, LinearAlgebra.UpperTriangular{T, <:LinearAlgebra.Transpose{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}}, LinearAlgebra.UpperTriangular{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}} where T  [typealias @ SparseArrays.UpperTriangularSparse]
const SparseArrays.UpperTriangularWrapped = Union{LinearAlgebra.UnitUpperTriangular{T, <:LinearAlgebra.Adjoint{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}}, LinearAlgebra.UnitUpperTriangular{T, <:LinearAlgebra.Transpose{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}}, LinearAlgebra.UpperTriangular{T, <:LinearAlgebra.Adjoint{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}}, LinearAlgebra.UpperTriangular{T, <:LinearAlgebra.Transpose{T, <:Union{SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Base.SubArray{T, 2, <:SparseArrays.AbstractSparseMatrixCSC{T, Ti}, Tuple{Base.Slice{Base.OneTo{Core.Int64}}, I}} where I<:Base.AbstractUnitRange} where Ti}}} where T  [typealias @ SparseArrays.UpperTriangularWrapped]
const SparseArrays.WrapperMatrixTypes = Union{LinearAlgebra.AbstractTriangular{T, MT}, LinearAlgebra.Adjoint{T, MT}, LinearAlgebra.Hermitian{T, MT}, LinearAlgebra.Symmetric{T, MT}, LinearAlgebra.Transpose{T, MT}, LinearAlgebra.UpperHessenberg{T, MT}, Base.SubArray{T, 2, MT}} where {T, MT}  [typealias @ SparseArrays.WrapperMatrixTypes]
const SparseArrays.\ = Base.\  [functionalias @ SparseArrays.\]
const SparseArrays._Annotated_SparseConcatArrays = Union{LinearAlgebra.AbstractTriangular{T, A} where {T, A<:Union{LinearAlgebra.Adjoint{<:Core.Any, <:SparseArrays.SparseVector}, LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Transpose{<:Core.Any, <:SparseArrays.SparseVector}, LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector}}, LinearAlgebra.Hermitian{T, A} where {T, A<:Union{LinearAlgebra.Adjoint{<:Core.Any, <:SparseArrays.SparseVector}, LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Transpose{<:Core.Any, <:SparseArrays.SparseVector}, LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector}}, LinearAlgebra.Symmetric{T, A} where {T, A<:Union{LinearAlgebra.Adjoint{<:Core.Any, <:SparseArrays.SparseVector}, LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Transpose{<:Core.Any, <:SparseArrays.SparseVector}, LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector}}}  [typealias @ SparseArrays._Annotated_SparseConcatArrays]
const SparseArrays._Hermitian_SparseConcatArrays = LinearAlgebra.Hermitian{T, A} where {T, A<:Union{LinearAlgebra.Adjoint{<:Core.Any, <:SparseArrays.SparseVector}, LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Transpose{<:Core.Any, <:SparseArrays.SparseVector}, LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector}}  [typealias @ SparseArrays._Hermitian_SparseConcatArrays]
const SparseArrays._SparseArrays = Union{LinearAlgebra.Adjoint{<:Core.Any, <:SparseArrays.SparseVector}, LinearAlgebra.Transpose{<:Core.Any, <:SparseArrays.SparseVector}, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector}  [typealias @ SparseArrays._SparseArrays]
const SparseArrays._SparseConcatArrays = Union{LinearAlgebra.Adjoint{<:Core.Any, <:SparseArrays.SparseVector}, LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Transpose{<:Core.Any, <:SparseArrays.SparseVector}, LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector}  [typealias @ SparseArrays._SparseConcatArrays]
const SparseArrays._SparseConcatGroup = Union{Core.Number, LinearAlgebra.AbstractTriangular{T, A} where {T, A<:(Base.Matrix)}, LinearAlgebra.AbstractTriangular{T, A} where {T, A<:Union{LinearAlgebra.Adjoint{<:Core.Any, <:SparseArrays.SparseVector}, LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Transpose{<:Core.Any, <:SparseArrays.SparseVector}, LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector}}, LinearAlgebra.Adjoint{<:Core.Any, <:Base.Vector}, LinearAlgebra.Adjoint{<:Core.Any, <:SparseArrays.SparseVector}, LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.Hermitian{T, A} where {T, A<:(Base.Matrix)}, LinearAlgebra.Hermitian{T, A} where {T, A<:Union{LinearAlgebra.Adjoint{<:Core.Any, <:SparseArrays.SparseVector}, LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Transpose{<:Core.Any, <:SparseArrays.SparseVector}, LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector}}, LinearAlgebra.SymTridiagonal, LinearAlgebra.Symmetric{T, A} where {T, A<:(Base.Matrix)}, LinearAlgebra.Symmetric{T, A} where {T, A<:Union{LinearAlgebra.Adjoint{<:Core.Any, <:SparseArrays.SparseVector}, LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Transpose{<:Core.Any, <:SparseArrays.SparseVector}, LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector}}, LinearAlgebra.Transpose{<:Core.Any, <:Base.Vector}, LinearAlgebra.Transpose{<:Core.Any, <:SparseArrays.SparseVector}, LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector, Base.Vector, Base.Matrix}  [typealias @ SparseArrays._SparseConcatGroup]
const SparseArrays._StridedOrTriangularMatrix = Union{LinearAlgebra.LowerTriangular{T, S} where S<:Base.AbstractMatrix{T}, LinearAlgebra.UnitLowerTriangular{T, S} where S<:Base.AbstractMatrix{T}, LinearAlgebra.UnitUpperTriangular{T, S} where S<:Base.AbstractMatrix{T}, LinearAlgebra.UpperTriangular{T, S} where S<:Base.AbstractMatrix{T}, Base.StridedArray{T, 2}} where T  [typealias @ SparseArrays._StridedOrTriangularMatrix]
const SparseArrays._Symmetric_SparseConcatArrays = LinearAlgebra.Symmetric{T, A} where {T, A<:Union{LinearAlgebra.Adjoint{<:Core.Any, <:SparseArrays.SparseVector}, LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Transpose{<:Core.Any, <:SparseArrays.SparseVector}, LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector}}  [typealias @ SparseArrays._Symmetric_SparseConcatArrays]
const SparseArrays._Triangular_SparseConcatArrays = LinearAlgebra.AbstractTriangular{T, A} where {T, A<:Union{LinearAlgebra.Adjoint{<:Core.Any, <:SparseArrays.SparseVector}, LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Transpose{<:Core.Any, <:SparseArrays.SparseVector}, LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector}}  [typealias @ SparseArrays._Triangular_SparseConcatArrays]
const SparseArrays._one = Base._one  [functionalias @ SparseArrays._one]
const SparseArrays.adjoint = Base.adjoint  [functionalias @ SparseArrays.adjoint]
const SparseArrays.adjoint! = LinearAlgebra.adjoint!  [functionalias @ SparseArrays.adjoint!]
const SparseArrays.argmax = Base.argmax  [functionalias @ SparseArrays.argmax]
const SparseArrays.argmin = Base.argmin  [functionalias @ SparseArrays.argmin]
const SparseArrays.broadcast = Base.Broadcast.broadcast  [functionalias @ SparseArrays.broadcast]
const SparseArrays.cat = Base.cat  [functionalias @ SparseArrays.cat]
const SparseArrays.checksquare = LinearAlgebra.checksquare  [functionalias @ SparseArrays.checksquare]
const SparseArrays.cholesky = LinearAlgebra.cholesky  [functionalias @ SparseArrays.cholesky]
const SparseArrays.circshift! = Base.circshift!  [functionalias @ SparseArrays.circshift!]
const SparseArrays.complex = Base.complex  [functionalias @ SparseArrays.complex]
const SparseArrays.cond = LinearAlgebra.cond  [functionalias @ SparseArrays.cond]
const SparseArrays.conj = Base.conj  [functionalias @ SparseArrays.conj]
const SparseArrays.conj! = Base.conj!  [functionalias @ SparseArrays.conj!]
const SparseArrays.convert = Base.convert  [functionalias @ SparseArrays.convert]
const SparseArrays.copy = Base.copy  [functionalias @ SparseArrays.copy]
const SparseArrays.copy! = Base.copy!  [functionalias @ SparseArrays.copy!]
const SparseArrays.copyto! = Base.copyto!  [functionalias @ SparseArrays.copyto!]
const SparseArrays.count = Base.count  [functionalias @ SparseArrays.count]
const SparseArrays.diag = LinearAlgebra.diag  [functionalias @ SparseArrays.diag]
const SparseArrays.diagm = LinearAlgebra.diagm  [functionalias @ SparseArrays.diagm]
const SparseArrays.diff = Base.diff  [functionalias @ SparseArrays.diff]
const SparseArrays.dot = LinearAlgebra.dot  [functionalias @ SparseArrays.dot]
const SparseArrays.eigen = LinearAlgebra.eigen  [functionalias @ SparseArrays.eigen]
const SparseArrays.factorize = LinearAlgebra.factorize  [functionalias @ SparseArrays.factorize]
const SparseArrays.fill! = Base.fill!  [functionalias @ SparseArrays.fill!]
const SparseArrays.findall = Base.findall  [functionalias @ SparseArrays.findall]
const SparseArrays.findmax = Base.findmax  [functionalias @ SparseArrays.findmax]
const SparseArrays.findmin = Base.findmin  [functionalias @ SparseArrays.findmin]
const SparseArrays.float = Base.float  [functionalias @ SparseArrays.float]
const SparseArrays.getindex = Base.getindex  [functionalias @ SparseArrays.getindex]
const SparseArrays.hcat = Base.hcat  [functionalias @ SparseArrays.hcat]
const SparseArrays.hvcat = Base.hvcat  [functionalias @ SparseArrays.hvcat]
const SparseArrays.imag = Base.imag  [functionalias @ SparseArrays.imag]
const SparseArrays.inv = Base.inv  [functionalias @ SparseArrays.inv]
const SparseArrays.isbanded = LinearAlgebra.isbanded  [functionalias @ SparseArrays.isbanded]
const SparseArrays.ishermitian = LinearAlgebra.ishermitian  [functionalias @ SparseArrays.ishermitian]
const SparseArrays.issymmetric = LinearAlgebra.issymmetric  [functionalias @ SparseArrays.issymmetric]
const SparseArrays.istril = LinearAlgebra.istril  [functionalias @ SparseArrays.istril]
const SparseArrays.istriu = LinearAlgebra.istriu  [functionalias @ SparseArrays.istriu]
const SparseArrays.kron = Base.kron  [functionalias @ SparseArrays.kron]
const SparseArrays.kron! = Base.kron!  [functionalias @ SparseArrays.kron!]
const SparseArrays.ldiv! = LinearAlgebra.ldiv!  [functionalias @ SparseArrays.ldiv!]
const SparseArrays.length = Base.length  [functionalias @ SparseArrays.length]
const SparseArrays.lmul! = LinearAlgebra.lmul!  [functionalias @ SparseArrays.lmul!]
const SparseArrays.lu = LinearAlgebra.lu  [functionalias @ SparseArrays.lu]
const SparseArrays.map = Base.map  [functionalias @ SparseArrays.map]
const SparseArrays.maximum = Base.maximum  [functionalias @ SparseArrays.maximum]
const SparseArrays.minimum = Base.minimum  [functionalias @ SparseArrays.minimum]
const SparseArrays.mul! = LinearAlgebra.mul!  [functionalias @ SparseArrays.mul!]
const SparseArrays.norm = LinearAlgebra.norm  [functionalias @ SparseArrays.norm]
const SparseArrays.opnorm = LinearAlgebra.opnorm  [functionalias @ SparseArrays.opnorm]
const SparseArrays.permute! = Base.permute!  [functionalias @ SparseArrays.permute!]
const SparseArrays.promote_to_array_type = LinearAlgebra.promote_to_array_type  [functionalias @ SparseArrays.promote_to_array_type]
const SparseArrays.promote_to_arrays_ = LinearAlgebra.promote_to_arrays_  [functionalias @ SparseArrays.promote_to_arrays_]
const SparseArrays.rdiv! = LinearAlgebra.rdiv!  [functionalias @ SparseArrays.rdiv!]
const SparseArrays.real = Base.real  [functionalias @ SparseArrays.real]
const SparseArrays.rmul! = LinearAlgebra.rmul!  [functionalias @ SparseArrays.rmul!]
const SparseArrays.rot180 = Base.rot180  [functionalias @ SparseArrays.rot180]
const SparseArrays.rotl90 = Base.rotl90  [functionalias @ SparseArrays.rotl90]
const SparseArrays.rotr90 = Base.rotr90  [functionalias @ SparseArrays.rotr90]
const SparseArrays.setindex! = Base.setindex!  [functionalias @ SparseArrays.setindex!]
const SparseArrays.show = Base.show  [functionalias @ SparseArrays.show]
const SparseArrays.similar = Base.similar  [functionalias @ SparseArrays.similar]
const SparseArrays.size = Base.size  [functionalias @ SparseArrays.size]
const SparseArrays.sort! = Base.sort!  [functionalias @ SparseArrays.sort!]
const SparseArrays.sum = Base.sum  [functionalias @ SparseArrays.sum]
const SparseArrays.sym_uplo = LinearAlgebra.sym_uplo  [functionalias @ SparseArrays.sym_uplo]
const SparseArrays.tr = LinearAlgebra.tr  [functionalias @ SparseArrays.tr]
const SparseArrays.transpose = Base.transpose  [functionalias @ SparseArrays.transpose]
const SparseArrays.transpose! = LinearAlgebra.transpose!  [functionalias @ SparseArrays.transpose!]
const SparseArrays.tril = LinearAlgebra.tril  [functionalias @ SparseArrays.tril]
const SparseArrays.tril! = LinearAlgebra.tril!  [functionalias @ SparseArrays.tril!]
const SparseArrays.triu = LinearAlgebra.triu  [functionalias @ SparseArrays.triu]
const SparseArrays.triu! = LinearAlgebra.triu!  [functionalias @ SparseArrays.triu!]
const SparseArrays.vcat = Base.vcat  [functionalias @ SparseArrays.vcat]
const SparseArrays.vec = Base.vec  [functionalias @ SparseArrays.vec]
const SparseArrays.xor = Base.xor  [functionalias @ SparseArrays.xor]
const SparseArrays.zero = Base.zero  [functionalias @ SparseArrays.zero]
const SparseArrays.| = Base.|  [functionalias @ SparseArrays.|]
const UUIDs.SHA = SHA  [modulealias @ UUIDs.SHA]
const UUIDs.UUID = Base.UUID  [typealias @ UUIDs.UUID]
const REPL.== = Base.==  [functionalias @ REPL.==]
const REPL.AbstractDisplay = Base.Multimedia.AbstractDisplay  [typealias @ REPL.AbstractDisplay]
const REPL.AnyDict = Base.Dict{Core.Any, Core.Any}  [typealias @ REPL.AnyDict]
const REPL.CompletionProvider = REPL.LineEdit.CompletionProvider  [typealias @ REPL.CompletionProvider]
const REPL.HistoryProvider = REPL.LineEdit.HistoryProvider  [typealias @ REPL.HistoryProvider]
const REPL.InteractiveUtils = InteractiveUtils  [modulealias @ REPL.InteractiveUtils]
const REPL.LineEdit.AnyDict = Base.Dict{Core.Any, Core.Any}  [typealias @ REPL.LineEdit.AnyDict]
const REPL.LineEdit.BufferLike = Union{REPL.LineEdit.MIState, REPL.LineEdit.ModeState, Base.IOBuffer}  [typealias @ REPL.LineEdit.BufferLike]
const REPL.LineEdit.REPL = REPL  [modulealias @ REPL.LineEdit.REPL]
const REPL.LineEdit.Region = Core.Pair{Core.Int64, Core.Int64}  [typealias @ REPL.LineEdit.Region]
const REPL.LineEdit.State = Union{REPL.LineEdit.MIState, REPL.LineEdit.ModeState}  [typealias @ REPL.LineEdit.State]
const REPL.LineEdit.StringLike = Union{Core.Char, Base.SubString{Core.String}, Core.String}  [typealias @ REPL.LineEdit.StringLike]
const REPL.LineEdit.beep = REPL.Terminals.beep  [functionalias @ REPL.LineEdit.beep]
const REPL.LineEdit.clear_line = REPL.Terminals.clear_line  [functionalias @ REPL.LineEdit.clear_line]
const REPL.LineEdit.cmove = REPL.Terminals.cmove  [functionalias @ REPL.LineEdit.cmove]
const REPL.LineEdit.ensureroom = Base.ensureroom  [functionalias @ REPL.LineEdit.ensureroom]
const REPL.LineEdit.getX = REPL.Terminals.getX  [functionalias @ REPL.LineEdit.getX]
const REPL.LineEdit.getY = REPL.Terminals.getY  [functionalias @ REPL.LineEdit.getY]
const REPL.LineEdit.height = REPL.Terminals.height  [functionalias @ REPL.LineEdit.height]
const REPL.LineEdit.position = Base.position  [functionalias @ REPL.LineEdit.position]
const REPL.LineEdit.raw! = REPL.Terminals.raw!  [functionalias @ REPL.LineEdit.raw!]
const REPL.LineEdit.show = Base.show  [functionalias @ REPL.LineEdit.show]
const REPL.LineEdit.width = REPL.Terminals.width  [functionalias @ REPL.LineEdit.width]
const REPL.MIState = REPL.LineEdit.MIState  [typealias @ REPL.MIState]
const REPL.PromptState = REPL.LineEdit.PromptState  [typealias @ REPL.PromptState]
const REPL.REPLCompletions.Completions = Tuple{Base.Vector{REPL.REPLCompletions.Completion}, Base.UnitRange{Core.Int64}, Core.Bool}  [typealias @ REPL.REPLCompletions.Completions]
const REPL.TerminalMenus.ConfiguredMenu = REPL.TerminalMenus._ConfiguredMenu{<:REPL.TerminalMenus.AbstractConfig}  [typealias @ REPL.TerminalMenus.ConfiguredMenu]
const REPL.TerminalMenus.REPL = REPL  [modulealias @ REPL.TerminalMenus.REPL]
const REPL.Terminals.check_open = Base.check_open  [functionalias @ REPL.Terminals.check_open]
const REPL.Terminals.displaysize = Base.displaysize  [functionalias @ REPL.Terminals.displaysize]
const REPL.Terminals.flush = Base.flush  [functionalias @ REPL.Terminals.flush]
const REPL.Terminals.pipe_reader = Base.pipe_reader  [functionalias @ REPL.Terminals.pipe_reader]
const REPL.Terminals.pipe_writer = Base.pipe_writer  [functionalias @ REPL.Terminals.pipe_writer]
const REPL.Terminals.read = Base.read  [functionalias @ REPL.Terminals.read]
const REPL.Terminals.readuntil = Base.readuntil  [functionalias @ REPL.Terminals.readuntil]
const REPL.TextInterface = REPL.LineEdit.TextInterface  [typealias @ REPL.TextInterface]
const REPL.accept_result = REPL.LineEdit.accept_result  [functionalias @ REPL.accept_result]
const REPL.add_history = REPL.LineEdit.add_history  [functionalias @ REPL.add_history]
const REPL.apropos = Base.Docs.apropos  [functionalias @ REPL.apropos]
const REPL.complete_line = REPL.LineEdit.complete_line  [functionalias @ REPL.complete_line]
const REPL.display = Base.Multimedia.display  [functionalias @ REPL.display]
const REPL.doc = Base.Docs.doc  [functionalias @ REPL.doc]
const REPL.formatdoc = Base.Docs.formatdoc  [functionalias @ REPL.formatdoc]
const REPL.history_first = REPL.LineEdit.history_first  [functionalias @ REPL.history_first]
const REPL.history_last = REPL.LineEdit.history_last  [functionalias @ REPL.history_last]
const REPL.history_next = REPL.LineEdit.history_next  [functionalias @ REPL.history_next]
const REPL.history_next_prefix = REPL.LineEdit.history_next_prefix  [functionalias @ REPL.history_next_prefix]
const REPL.history_prev = REPL.LineEdit.history_prev  [functionalias @ REPL.history_prev]
const REPL.history_prev_prefix = REPL.LineEdit.history_prev_prefix  [functionalias @ REPL.history_prev_prefix]
const REPL.history_search = REPL.LineEdit.history_search  [functionalias @ REPL.history_search]
const REPL.mode_idx = REPL.LineEdit.mode_idx  [functionalias @ REPL.mode_idx]
const REPL.numbered_prompt! = REPL.Numbered.numbered_prompt!  [functionalias @ REPL.numbered_prompt!]
const REPL.parsedoc = Base.Docs.parsedoc  [functionalias @ REPL.parsedoc]
const REPL.setmodifiers! = REPL.LineEdit.setmodifiers!  [functionalias @ REPL.setmodifiers!]
const REPL.show = Base.show  [functionalias @ REPL.show]
const REPL.softscope! = REPL.softscope  [functionalias @ REPL.softscope!]
const REPL.terminal = REPL.LineEdit.terminal  [functionalias @ REPL.terminal]
const SharedArrays.IndexStyle = Base.IndexStyle  [typealias @ SharedArrays.IndexStyle]
const SharedArrays.RRID = Distributed.RRID  [typealias @ SharedArrays.RRID]
const SharedArrays.Random = Random  [modulealias @ SharedArrays.Random]
const SharedArrays.SharedMatrix = SharedArrays.SharedArray{T, 2} where T  [typealias @ SharedArrays.SharedMatrix]
const SharedArrays.SharedVector = SharedArrays.SharedArray{T, 1} where T  [typealias @ SharedArrays.SharedVector]
const SharedArrays.convert = Base.convert  [functionalias @ SharedArrays.convert]
const SharedArrays.copyto! = Base.copyto!  [functionalias @ SharedArrays.copyto!]
const SharedArrays.deepcopy_internal = Base.deepcopy_internal  [functionalias @ SharedArrays.deepcopy_internal]
const SharedArrays.deserialize = Serialization.deserialize  [functionalias @ SharedArrays.deserialize]
const SharedArrays.elsize = Base.elsize  [functionalias @ SharedArrays.elsize]
const SharedArrays.fill! = Base.fill!  [functionalias @ SharedArrays.fill!]
const SharedArrays.getindex = Base.getindex  [functionalias @ SharedArrays.getindex]
const SharedArrays.length = Base.length  [functionalias @ SharedArrays.length]
const SharedArrays.map! = Base.map!  [functionalias @ SharedArrays.map!]
const SharedArrays.ndims = Base.ndims  [functionalias @ SharedArrays.ndims]
const SharedArrays.procs = Distributed.procs  [functionalias @ SharedArrays.procs]
const SharedArrays.reduce = Base.reduce  [functionalias @ SharedArrays.reduce]
const SharedArrays.remotecall_fetch = Distributed.remotecall_fetch  [functionalias @ SharedArrays.remotecall_fetch]
const SharedArrays.reshape = Base.reshape  [functionalias @ SharedArrays.reshape]
const SharedArrays.serialize = Serialization.serialize  [functionalias @ SharedArrays.serialize]
const SharedArrays.setindex! = Base.setindex!  [functionalias @ SharedArrays.setindex!]
const SharedArrays.show = Base.show  [functionalias @ SharedArrays.show]
const SharedArrays.similar = Base.similar  [functionalias @ SharedArrays.similar]
const SharedArrays.size = Base.size  [functionalias @ SharedArrays.size]
const SharedArrays.unsafe_convert = Base.unsafe_convert  [functionalias @ SharedArrays.unsafe_convert]
const TOML.Internals.Printer.@invokelatest = Base.@invokelatest  [functionalias @ TOML.Internals.Printer.@invokelatest]
const TOML.Internals.Printer.Dates = Dates  [modulealias @ TOML.Internals.Printer.Dates]
const TOML.Internals.Printer.MbyFunc = Union{Core.Nothing, Core.Function}  [typealias @ TOML.Internals.Printer.MbyFunc]
const TOML.Internals.Printer.TOMLValue = Union{Dates.Date, Dates.DateTime, Dates.Time, Core.AbstractFloat, Core.AbstractString, Core.Integer, Base.AbstractDict, Base.AbstractVector}  [typealias @ TOML.Internals.Printer.TOMLValue]
const TOML.Internals.Printer.isvalid_barekey_char = Base.TOML.isvalid_barekey_char  [functionalias @ TOML.Internals.Printer.isvalid_barekey_char]
const TOML.Parser = Base.TOML.Parser  [typealias @ TOML.Parser]
const TOML.ParserError = Base.TOML.ParserError  [typealias @ TOML.ParserError]
const TOML.print = TOML.Internals.Printer.print  [functionalias @ TOML.print]
const Test.occursin = Base.occursin  [functionalias @ Test.occursin]
const LibCURL.CURL = Core.Nothing  [typealias @ LibCURL.CURL]
const LibCURL.CURLFORMcode = Core.UInt32  [typealias @ LibCURL.CURLFORMcode]
const LibCURL.CURLINFO = Core.UInt32  [typealias @ LibCURL.CURLINFO]
const LibCURL.CURLM = Core.Nothing  [typealias @ LibCURL.CURLM]
const LibCURL.CURLMSG = Core.UInt32  [typealias @ LibCURL.CURLMSG]
const LibCURL.CURLMcode = Core.Int32  [typealias @ LibCURL.CURLMcode]
const LibCURL.CURLMoption = Core.UInt32  [typealias @ LibCURL.CURLMoption]
const LibCURL.CURLSH = Core.Nothing  [typealias @ LibCURL.CURLSH]
const LibCURL.CURLSHcode = Core.UInt32  [typealias @ LibCURL.CURLSHcode]
const LibCURL.CURLSHoption = Core.UInt32  [typealias @ LibCURL.CURLSHoption]
const LibCURL.CURL_NETRC_OPTION = Core.UInt32  [typealias @ LibCURL.CURL_NETRC_OPTION]
const LibCURL.CURL_SUFFIX_CURL_OFF_T = Core.Int64  [typealias @ LibCURL.CURL_SUFFIX_CURL_OFF_T]
const LibCURL.CURL_SUFFIX_CURL_OFF_TU = Core.UInt64  [typealias @ LibCURL.CURL_SUFFIX_CURL_OFF_TU]
const LibCURL.CURL_TLSAUTH = Core.UInt32  [typealias @ LibCURL.CURL_TLSAUTH]
const LibCURL.CURL_TYPEOF_CURL_OFF_T = Core.Int64  [typealias @ LibCURL.CURL_TYPEOF_CURL_OFF_T]
const LibCURL.CURL_TYPEOF_CURL_SOCKLEN_T = Core.Int32  [typealias @ LibCURL.CURL_TYPEOF_CURL_SOCKLEN_T]
const LibCURL.CURLcode = Core.UInt32  [typealias @ LibCURL.CURLcode]
const LibCURL.CURLformoption = Core.UInt32  [typealias @ LibCURL.CURLformoption]
const LibCURL.CURLoption = Core.UInt32  [typealias @ LibCURL.CURLoption]
const LibCURL.CURLsslset = Core.UInt32  [typealias @ LibCURL.CURLsslset]
const LibCURL.CURLversion = Core.UInt32  [typealias @ LibCURL.CURLversion]
const LibCURL.curl_TimeCond = Core.UInt32  [typealias @ LibCURL.curl_TimeCond]
const LibCURL.curl_calloc_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_calloc_callback]
const LibCURL.curl_chunk_bgn_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_chunk_bgn_callback]
const LibCURL.curl_chunk_end_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_chunk_end_callback]
const LibCURL.curl_closepolicy = Core.UInt32  [typealias @ LibCURL.curl_closepolicy]
const LibCURL.curl_closesocket_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_closesocket_callback]
const LibCURL.curl_conv_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_conv_callback]
const LibCURL.curl_debug_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_debug_callback]
const LibCURL.curl_fnmatch_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_fnmatch_callback]
const LibCURL.curl_formget_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_formget_callback]
const LibCURL.curl_free_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_free_callback]
const LibCURL.curl_ftpauth = Core.UInt32  [typealias @ LibCURL.curl_ftpauth]
const LibCURL.curl_ftpccc = Core.UInt32  [typealias @ LibCURL.curl_ftpccc]
const LibCURL.curl_ftpcreatedir = Core.UInt32  [typealias @ LibCURL.curl_ftpcreatedir]
const LibCURL.curl_ftpmethod = Core.UInt32  [typealias @ LibCURL.curl_ftpmethod]
const LibCURL.curl_ftpssl = Core.UInt32  [typealias @ LibCURL.curl_ftpssl]
const LibCURL.curl_infotype = Core.UInt32  [typealias @ LibCURL.curl_infotype]
const LibCURL.curl_ioctl_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_ioctl_callback]
const LibCURL.curl_khmatch = Core.UInt32  [typealias @ LibCURL.curl_khmatch]
const LibCURL.curl_khstat = Core.UInt32  [typealias @ LibCURL.curl_khstat]
const LibCURL.curl_khtype = Core.UInt32  [typealias @ LibCURL.curl_khtype]
const LibCURL.curl_lock_access = Core.UInt32  [typealias @ LibCURL.curl_lock_access]
const LibCURL.curl_lock_data = Core.UInt32  [typealias @ LibCURL.curl_lock_data]
const LibCURL.curl_lock_function = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_lock_function]
const LibCURL.curl_malloc_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_malloc_callback]
const LibCURL.curl_mime = Core.Nothing  [typealias @ LibCURL.curl_mime]
const LibCURL.curl_mimepart = Core.Nothing  [typealias @ LibCURL.curl_mimepart]
const LibCURL.curl_multi_timer_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_multi_timer_callback]
const LibCURL.curl_off_t = Core.Int64  [typealias @ LibCURL.curl_off_t]
const LibCURL.curl_opensocket_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_opensocket_callback]
const LibCURL.curl_progress_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_progress_callback]
const LibCURL.curl_proxytype = Core.UInt32  [typealias @ LibCURL.curl_proxytype]
const LibCURL.curl_push_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_push_callback]
const LibCURL.curl_read_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_read_callback]
const LibCURL.curl_realloc_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_realloc_callback]
const LibCURL.curl_resolver_start_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_resolver_start_callback]
const LibCURL.curl_seek_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_seek_callback]
const LibCURL.curl_socket_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_socket_callback]
const LibCURL.curl_socket_t = Core.Int32  [typealias @ LibCURL.curl_socket_t]
const LibCURL.curl_sockopt_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_sockopt_callback]
const LibCURL.curl_sshkeycallback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_sshkeycallback]
const LibCURL.curl_ssl_backend = Core.Nothing  [typealias @ LibCURL.curl_ssl_backend]
const LibCURL.curl_ssl_ctx_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_ssl_ctx_callback]
const LibCURL.curl_sslbackend = Core.UInt32  [typealias @ LibCURL.curl_sslbackend]
const LibCURL.curl_strdup_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_strdup_callback]
const LibCURL.curl_unlock_function = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_unlock_function]
const LibCURL.curl_usessl = Core.UInt32  [typealias @ LibCURL.curl_usessl]
const LibCURL.curl_write_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_write_callback]
const LibCURL.curl_xferinfo_callback = Core.Ptr{Core.Nothing}  [typealias @ LibCURL.curl_xferinfo_callback]
const LibCURL.curlfiletype = Core.UInt32  [typealias @ LibCURL.curlfiletype]
const LibCURL.curliocmd = Core.UInt32  [typealias @ LibCURL.curliocmd]
const LibCURL.curlioerr = Core.UInt32  [typealias @ LibCURL.curlioerr]
const LibCURL.curlsocktype = Core.UInt32  [typealias @ LibCURL.curlsocktype]
const LibCURL.size_t = Core.UInt64  [typealias @ LibCURL.size_t]
const LibCURL.socklen_t = Core.Int32  [typealias @ LibCURL.socklen_t]
const LibCURL.time_t = Core.Int64  [typealias @ LibCURL.time_t]
const Downloads.Curl.curl_socket_t = Core.Int32  [typealias @ Downloads.Curl.curl_socket_t]
const Pkg.@pkg_str = Pkg.REPLMode.@pkg_str  [functionalias @ Pkg.@pkg_str]
const Pkg.API.GitTools = Pkg.GitTools  [modulealias @ Pkg.API.GitTools]
const Pkg.GitTools.LibGit2 = LibGit2  [modulealias @ Pkg.GitTools.LibGit2]
const Pkg.GitTools.SHA1 = Base.SHA1  [typealias @ Pkg.GitTools.SHA1]
const Pkg.GitTools.can_fancyprint = Pkg.can_fancyprint  [functionalias @ Pkg.GitTools.can_fancyprint]
const Pkg.GitTools.get_bool_env = Pkg.get_bool_env  [functionalias @ Pkg.GitTools.get_bool_env]
const Pkg.GitTools.printpkgstyle = Pkg.printpkgstyle  [functionalias @ Pkg.GitTools.printpkgstyle]
const Pkg.GitTools.stdout_f = Pkg.stdout_f  [functionalias @ Pkg.GitTools.stdout_f]
const Pkg.API.LibGit2 = LibGit2  [modulealias @ Pkg.API.LibGit2]
const Pkg.API.Logging = Logging  [modulealias @ Pkg.API.Logging]
const Pkg.API.Operations = Pkg.Operations  [modulealias @ Pkg.API.Operations]
const Pkg.Operations.Dates = Dates  [modulealias @ Pkg.Operations.Dates]
const Pkg.Operations.LibGit2 = LibGit2  [modulealias @ Pkg.Operations.LibGit2]
const Pkg.Operations.PackageEntry = Pkg.Types.PackageEntry  [typealias @ Pkg.Operations.PackageEntry]
const Pkg.Operations.Pkg = Pkg  [modulealias @ Pkg.Operations.Pkg]
const Pkg.Operations.REPL = REPL  [modulealias @ Pkg.Operations.REPL]
const Pkg.Operations.Registry = Pkg.Registry  [modulealias @ Pkg.Operations.Registry]
const Pkg.Registry.FileWatching = FileWatching  [modulealias @ Pkg.Registry.FileWatching]
const Pkg.Registry.Pkg = Pkg  [modulealias @ Pkg.Registry.Pkg]
const Pkg.Operations.TOML = TOML  [modulealias @ Pkg.Operations.TOML]
const Pkg.Operations.artifact_exists = Artifacts.artifact_exists  [functionalias @ Pkg.Operations.artifact_exists]
const Pkg.Operations.can_fancyprint = Pkg.can_fancyprint  [functionalias @ Pkg.Operations.can_fancyprint]
const Pkg.Operations.depots = Pkg.depots  [functionalias @ Pkg.Operations.depots]
const Pkg.Operations.depots1 = Pkg.depots1  [functionalias @ Pkg.Operations.depots1]
const Pkg.Operations.devdir = Pkg.devdir  [functionalias @ Pkg.Operations.devdir]
const Pkg.Operations.ensure_artifact_installed = Pkg.Artifacts.ensure_artifact_installed  [functionalias @ Pkg.Operations.ensure_artifact_installed]
const Pkg.Operations.extract_all_hashes = Pkg.Artifacts.extract_all_hashes  [functionalias @ Pkg.Operations.extract_all_hashes]
const Pkg.Operations.get_bool_env = Pkg.get_bool_env  [functionalias @ Pkg.Operations.get_bool_env]
const Pkg.Operations.pathrepr = Pkg.pathrepr  [functionalias @ Pkg.Operations.pathrepr]
const Pkg.Operations.pkg_server = Pkg.pkg_server  [functionalias @ Pkg.Operations.pkg_server]
const Pkg.Operations.printpkgstyle = Pkg.printpkgstyle  [functionalias @ Pkg.Operations.printpkgstyle]
const Pkg.Operations.select_downloadable_artifacts = Artifacts.select_downloadable_artifacts  [functionalias @ Pkg.Operations.select_downloadable_artifacts]
const Pkg.Operations.set_readonly = Pkg.set_readonly  [functionalias @ Pkg.Operations.set_readonly]
const Pkg.Operations.should_autoprecompile = Pkg.should_autoprecompile  [functionalias @ Pkg.Operations.should_autoprecompile]
const Pkg.Operations.stderr_f = Pkg.stderr_f  [functionalias @ Pkg.Operations.stderr_f]
const Pkg.API.Pkg = Pkg  [modulealias @ Pkg.API.Pkg]
const Pkg.API.Random = Random  [modulealias @ Pkg.API.Random]
const Pkg.API.Registry = Pkg.Registry  [modulealias @ Pkg.API.Registry]
const Pkg.API.ResolverError = Pkg.Resolve.ResolverError  [typealias @ Pkg.API.ResolverError]
const Pkg.API.StaleCacheKey = Tuple{Base.PkgId, Core.UInt128, Core.String, Core.String}  [typealias @ Pkg.API.StaleCacheKey]
const Pkg.API.UsageByDepotDict = Base.Dict{Core.String, Base.Dict{Core.String, Dates.DateTime}}  [typealias @ Pkg.API.UsageByDepotDict]
const Pkg.API.UsageDict = Base.Dict{Core.String, Dates.DateTime}  [typealias @ Pkg.API.UsageDict]
const Pkg.API.can_fancyprint = Pkg.can_fancyprint  [functionalias @ Pkg.API.can_fancyprint]
const Pkg.API.depots = Pkg.depots  [functionalias @ Pkg.API.depots]
const Pkg.API.depots1 = Pkg.depots1  [functionalias @ Pkg.API.depots1]
const Pkg.API.devdir = Pkg.devdir  [functionalias @ Pkg.API.devdir]
const Pkg.API.isurl = Pkg.isurl  [functionalias @ Pkg.API.isurl]
const Pkg.API.logdir = Pkg.logdir  [functionalias @ Pkg.API.logdir]
const Pkg.API.pathrepr = Pkg.pathrepr  [functionalias @ Pkg.API.pathrepr]
const Pkg.API.printpkgstyle = Pkg.printpkgstyle  [functionalias @ Pkg.API.printpkgstyle]
const Pkg.API.stderr_f = Pkg.stderr_f  [functionalias @ Pkg.API.stderr_f]
const Pkg.API.stdout_f = Pkg.stdout_f  [functionalias @ Pkg.API.stdout_f]
const Pkg.Artifacts.@artifact_str = Artifacts.@artifact_str  [functionalias @ Pkg.Artifacts.@artifact_str]
const Pkg.Artifacts.GitTools = Pkg.GitTools  [modulealias @ Pkg.Artifacts.GitTools]
const Pkg.Artifacts.SHA1 = Base.SHA1  [typealias @ Pkg.Artifacts.SHA1]
const Pkg.Artifacts.TOML = TOML  [modulealias @ Pkg.Artifacts.TOML]
const Pkg.Artifacts.artifact_exists = Artifacts.artifact_exists  [functionalias @ Pkg.Artifacts.artifact_exists]
const Pkg.Artifacts.artifact_hash = Artifacts.artifact_hash  [functionalias @ Pkg.Artifacts.artifact_hash]
const Pkg.Artifacts.artifact_meta = Artifacts.artifact_meta  [functionalias @ Pkg.Artifacts.artifact_meta]
const Pkg.Artifacts.artifact_path = Artifacts.artifact_path  [functionalias @ Pkg.Artifacts.artifact_path]
const Pkg.Artifacts.artifact_paths = Artifacts.artifact_paths  [functionalias @ Pkg.Artifacts.artifact_paths]
const Pkg.Artifacts.artifacts_dirs = Artifacts.artifacts_dirs  [functionalias @ Pkg.Artifacts.artifacts_dirs]
const Pkg.Artifacts.can_fancyprint = Pkg.can_fancyprint  [functionalias @ Pkg.Artifacts.can_fancyprint]
const Pkg.Artifacts.find_artifacts_toml = Artifacts.find_artifacts_toml  [functionalias @ Pkg.Artifacts.find_artifacts_toml]
const Pkg.Artifacts.get = Base.get  [functionalias @ Pkg.Artifacts.get]
const Pkg.Artifacts.get_bool_env = Pkg.get_bool_env  [functionalias @ Pkg.Artifacts.get_bool_env]
const Pkg.Artifacts.load_artifacts_toml = Artifacts.load_artifacts_toml  [functionalias @ Pkg.Artifacts.load_artifacts_toml]
const Pkg.Artifacts.load_overrides = Artifacts.load_overrides  [functionalias @ Pkg.Artifacts.load_overrides]
const Pkg.Artifacts.pack_platform! = Artifacts.pack_platform!  [functionalias @ Pkg.Artifacts.pack_platform!]
const Pkg.Artifacts.parse_toml = Pkg.Types.parse_toml  [functionalias @ Pkg.Artifacts.parse_toml]
const Pkg.Artifacts.pkg_server = Pkg.pkg_server  [functionalias @ Pkg.Artifacts.pkg_server]
const Pkg.Artifacts.printpkgstyle = Pkg.printpkgstyle  [functionalias @ Pkg.Artifacts.printpkgstyle]
const Pkg.Artifacts.query_override = Artifacts.query_override  [functionalias @ Pkg.Artifacts.query_override]
const Pkg.Artifacts.select_downloadable_artifacts = Artifacts.select_downloadable_artifacts  [functionalias @ Pkg.Artifacts.select_downloadable_artifacts]
const Pkg.Artifacts.set_readonly = Pkg.set_readonly  [functionalias @ Pkg.Artifacts.set_readonly]
const Pkg.Artifacts.stderr_f = Pkg.stderr_f  [functionalias @ Pkg.Artifacts.stderr_f]
const Pkg.Artifacts.unpack_platform = Artifacts.unpack_platform  [functionalias @ Pkg.Artifacts.unpack_platform]
const Pkg.Artifacts.with_artifacts_directory = Artifacts.with_artifacts_directory  [functionalias @ Pkg.Artifacts.with_artifacts_directory]
const Pkg.Artifacts.write_env_usage = Pkg.Types.write_env_usage  [functionalias @ Pkg.Artifacts.write_env_usage]
const Pkg.BinaryPlatforms.Platform = Base.BinaryPlatforms.Platform  [typealias @ Pkg.BinaryPlatforms.Platform]
const Pkg.BinaryPlatforms.PlatformUnion = Union{Pkg.BinaryPlatforms.FreeBSD, Pkg.BinaryPlatforms.Linux, Pkg.BinaryPlatforms.MacOS, Pkg.BinaryPlatforms.Windows}  [typealias @ Pkg.BinaryPlatforms.PlatformUnion]
const Pkg.BinaryPlatforms.arch = Base.BinaryPlatforms.arch  [functionalias @ Pkg.BinaryPlatforms.arch]
const Pkg.BinaryPlatforms.call_abi = Base.BinaryPlatforms.call_abi  [functionalias @ Pkg.BinaryPlatforms.call_abi]
const Pkg.BinaryPlatforms.cxxstring_abi = Base.BinaryPlatforms.cxxstring_abi  [functionalias @ Pkg.BinaryPlatforms.cxxstring_abi]
const Pkg.BinaryPlatforms.detect_cxxstring_abi = Base.BinaryPlatforms.detect_cxxstring_abi  [functionalias @ Pkg.BinaryPlatforms.detect_cxxstring_abi]
const Pkg.BinaryPlatforms.detect_libgfortran_version = Base.BinaryPlatforms.detect_libgfortran_version  [functionalias @ Pkg.BinaryPlatforms.detect_libgfortran_version]
const Pkg.BinaryPlatforms.detect_libstdcxx_version = Base.BinaryPlatforms.detect_libstdcxx_version  [functionalias @ Pkg.BinaryPlatforms.detect_libstdcxx_version]
const Pkg.BinaryPlatforms.libc = Base.BinaryPlatforms.libc  [functionalias @ Pkg.BinaryPlatforms.libc]
const Pkg.BinaryPlatforms.libgfortran_version = Base.BinaryPlatforms.libgfortran_version  [functionalias @ Pkg.BinaryPlatforms.libgfortran_version]
const Pkg.BinaryPlatforms.libstdcxx_version = Base.BinaryPlatforms.libstdcxx_version  [functionalias @ Pkg.BinaryPlatforms.libstdcxx_version]
const Pkg.BinaryPlatforms.parse_dl_name_version = Base.BinaryPlatforms.parse_dl_name_version  [functionalias @ Pkg.BinaryPlatforms.parse_dl_name_version]
const Pkg.BinaryPlatforms.platform_dlext = Base.BinaryPlatforms.platform_dlext  [functionalias @ Pkg.BinaryPlatforms.platform_dlext]
const Pkg.BinaryPlatforms.platform_name = Base.BinaryPlatforms.platform_name  [functionalias @ Pkg.BinaryPlatforms.platform_name]
const Pkg.BinaryPlatforms.platforms_match = Base.BinaryPlatforms.platforms_match  [functionalias @ Pkg.BinaryPlatforms.platforms_match]
const Pkg.BinaryPlatforms.select_platform = Base.BinaryPlatforms.select_platform  [functionalias @ Pkg.BinaryPlatforms.select_platform]
const Pkg.BinaryPlatforms.tags = Base.BinaryPlatforms.tags  [functionalias @ Pkg.BinaryPlatforms.tags]
const Pkg.BinaryPlatforms.wordsize = Base.BinaryPlatforms.wordsize  [functionalias @ Pkg.BinaryPlatforms.wordsize]
const Pkg.PackageMode = Pkg.Types.PackageMode  [typealias @ Pkg.PackageMode]
const Pkg.PackageSpec = Pkg.Types.PackageSpec  [typealias @ Pkg.PackageSpec]
const Pkg.PlatformEngines.Pkg = Pkg  [modulealias @ Pkg.PlatformEngines.Pkg]
const Pkg.PlatformEngines.TOML = TOML  [modulealias @ Pkg.PlatformEngines.TOML]
const Pkg.PlatformEngines.can_fancyprint = Pkg.can_fancyprint  [functionalias @ Pkg.PlatformEngines.can_fancyprint]
const Pkg.PlatformEngines.depots1 = Pkg.depots1  [functionalias @ Pkg.PlatformEngines.depots1]
const Pkg.PlatformEngines.pkg_server = Pkg.pkg_server  [functionalias @ Pkg.PlatformEngines.pkg_server]
const Pkg.PlatformEngines.stderr_f = Pkg.stderr_f  [functionalias @ Pkg.PlatformEngines.stderr_f]
const Pkg.PreserveLevel = Pkg.Types.PreserveLevel  [typealias @ Pkg.PreserveLevel]
const Pkg.REPL = REPL  [modulealias @ Pkg.REPL]
const Pkg.REPLMode.APIOptions = Base.Dict{Core.Symbol, Core.Any}  [typealias @ Pkg.REPLMode.APIOptions]
const Pkg.REPLMode.CommandDeclaration = Core.Array{Core.Pair{Core.Symbol, Core.Any}, 1}  [typealias @ Pkg.REPLMode.CommandDeclaration]
const Pkg.REPLMode.LineEdit = REPL.LineEdit  [modulealias @ Pkg.REPLMode.LineEdit]
const Pkg.REPLMode.OptionDeclaration = Core.Array{Core.Pair{Core.Symbol, Core.Any}, 1}  [typealias @ Pkg.REPLMode.OptionDeclaration]
const Pkg.REPLMode.PSA = Core.Pair{Core.Symbol, Core.Any}  [typealias @ Pkg.REPLMode.PSA]
const Pkg.REPLMode.PackageToken = Union{Pkg.REPLMode.PackageIdentifier, Pkg.REPLMode.Rev, Pkg.REPLMode.Subdir, Pkg.REPLMode.VersionToken}  [typealias @ Pkg.REPLMode.PackageToken]
const Pkg.REPLMode.REPL = REPL  [modulealias @ Pkg.REPLMode.REPL]
const Pkg.REPLMode.REPLCompletions = REPL.REPLCompletions  [modulealias @ Pkg.REPLMode.REPLCompletions]
const Pkg.REPLMode.RegistrySpec = Pkg.Registry.RegistrySpec  [typealias @ Pkg.REPLMode.RegistrySpec]
const Pkg.REPLMode.TerminalMenus = REPL.TerminalMenus  [modulealias @ Pkg.REPLMode.TerminalMenus]
const Pkg.REPLMode.casesensitive_isdir = Pkg.casesensitive_isdir  [functionalias @ Pkg.REPLMode.casesensitive_isdir]
const Pkg.REPLMode.isdir_nothrow = Pkg.isdir_nothrow  [functionalias @ Pkg.REPLMode.isdir_nothrow]
const Pkg.REPLMode.isurl = Pkg.isurl  [functionalias @ Pkg.REPLMode.isurl]
const Pkg.REPLMode.linewrap = Pkg.linewrap  [functionalias @ Pkg.REPLMode.linewrap]
const Pkg.REPLMode.pathrepr = Pkg.pathrepr  [functionalias @ Pkg.REPLMode.pathrepr]
const Pkg.REPLMode.stderr_f = Pkg.stderr_f  [functionalias @ Pkg.REPLMode.stderr_f]
const Pkg.REPLMode.stdout_f = Pkg.stdout_f  [functionalias @ Pkg.REPLMode.stdout_f]
const Pkg.Random = Random  [modulealias @ Pkg.Random]
const Pkg.RegistrySpec = Pkg.Registry.RegistrySpec  [typealias @ Pkg.RegistrySpec]
const Pkg.Resolve.Field = Core.Array{Pkg.Resolve.FieldValue, 1}  [typealias @ Pkg.Resolve.Field]
const Pkg.Resolve.InstState = Union{Core.Nothing, Base.VersionNumber}  [typealias @ Pkg.Resolve.InstState]
const Pkg.Resolve.Requires = Base.Dict{Base.UUID, Pkg.Versions.VersionSpec}  [typealias @ Pkg.Resolve.Requires]
const Pkg.Resolve.ResolveJournal = Core.Array{Tuple{Base.UUID, Core.String}, 1}  [typealias @ Pkg.Resolve.ResolveJournal]
const Pkg.Resolve.stderr_f = Pkg.stderr_f  [functionalias @ Pkg.Resolve.stderr_f]
const Pkg.Resolve.stdout_f = Pkg.stdout_f  [functionalias @ Pkg.Resolve.stdout_f]
const Pkg.TOML = TOML  [modulealias @ Pkg.TOML]
const Pkg.Types.DictStdLibs = Base.Dict{Base.UUID, Tuple{Core.String, Union{Core.Nothing, Base.VersionNumber}}}  [typealias @ Pkg.Types.DictStdLibs]
const Pkg.Types.FileWatching = FileWatching  [modulealias @ Pkg.Types.FileWatching]
const Pkg.Types.GitTools = Pkg.GitTools  [modulealias @ Pkg.Types.GitTools]
const Pkg.Types.LibGit2 = LibGit2  [modulealias @ Pkg.Types.LibGit2]
const Pkg.Types.Pkg = Pkg  [modulealias @ Pkg.Types.Pkg]
const Pkg.Types.Platform = Base.BinaryPlatforms.Platform  [typealias @ Pkg.Types.Platform]
const Pkg.Types.REPL = REPL  [modulealias @ Pkg.Types.REPL]
const Pkg.Types.Registry = Pkg.Registry  [modulealias @ Pkg.Types.Registry]
const Pkg.Types.SHA1 = Base.SHA1  [typealias @ Pkg.Types.SHA1]
const Pkg.Types.UUID = Base.UUID  [typealias @ Pkg.Types.UUID]
const Pkg.Types.VersionRange = Pkg.Versions.VersionRange  [typealias @ Pkg.Types.VersionRange]
const Pkg.Types.VersionSpec = Pkg.Versions.VersionSpec  [typealias @ Pkg.Types.VersionSpec]
const Pkg.Types.VersionTypes = Union{Pkg.Types.UpgradeLevel, Base.VersionNumber, Pkg.Versions.VersionSpec}  [typealias @ Pkg.Types.VersionTypes]
const Pkg.Types.depots = Pkg.depots  [functionalias @ Pkg.Types.depots]
const Pkg.Types.depots1 = Pkg.depots1  [functionalias @ Pkg.Types.depots1]
const Pkg.Types.isurl = Pkg.isurl  [functionalias @ Pkg.Types.isurl]
const Pkg.Types.logdir = Pkg.logdir  [functionalias @ Pkg.Types.logdir]
const Pkg.Types.pkg_server = Pkg.pkg_server  [functionalias @ Pkg.Types.pkg_server]
const Pkg.Types.safe_realpath = Pkg.safe_realpath  [functionalias @ Pkg.Types.safe_realpath]
const Pkg.Types.set_readonly = Pkg.set_readonly  [functionalias @ Pkg.Types.set_readonly]
const Pkg.Types.stderr_f = Pkg.stderr_f  [functionalias @ Pkg.Types.stderr_f]
const Pkg.Types.stdlib_dir = Pkg.stdlib_dir  [functionalias @ Pkg.Types.stdlib_dir]
const Pkg.Types.stdlib_path = Pkg.stdlib_path  [functionalias @ Pkg.Types.stdlib_path]
const Pkg.Types.string = Base.string  [functionalias @ Pkg.Types.string]
const Pkg.UpgradeLevel = Pkg.Types.UpgradeLevel  [typealias @ Pkg.UpgradeLevel]
const Pkg.activate = Pkg.API.activate  [functionalias @ Pkg.activate]
const Pkg.add = Pkg.API.add  [functionalias @ Pkg.add]
const Pkg.build = Pkg.API.build  [functionalias @ Pkg.build]
const Pkg.compat = Pkg.API.compat  [functionalias @ Pkg.compat]
const Pkg.dependencies = Pkg.API.dependencies  [functionalias @ Pkg.dependencies]
const Pkg.develop = Pkg.API.develop  [functionalias @ Pkg.develop]
const Pkg.free = Pkg.API.free  [functionalias @ Pkg.free]
const Pkg.gc = Pkg.API.gc  [functionalias @ Pkg.gc]
const Pkg.generate = Pkg.API.generate  [functionalias @ Pkg.generate]
const Pkg.instantiate = Pkg.API.instantiate  [functionalias @ Pkg.instantiate]
const Pkg.is_manifest_current = Pkg.API.is_manifest_current  [functionalias @ Pkg.is_manifest_current]
const Pkg.pin = Pkg.API.pin  [functionalias @ Pkg.pin]
const Pkg.precompile = Pkg.API.precompile  [functionalias @ Pkg.precompile]
const Pkg.project = Pkg.API.project  [functionalias @ Pkg.project]
const Pkg.redo = Pkg.API.redo  [functionalias @ Pkg.redo]
const Pkg.resolve = Pkg.API.resolve  [functionalias @ Pkg.resolve]
const Pkg.rm = Pkg.API.rm  [functionalias @ Pkg.rm]
const Pkg.setprotocol! = Pkg.API.setprotocol!  [functionalias @ Pkg.setprotocol!]
const Pkg.status = Pkg.API.status  [functionalias @ Pkg.status]
const Pkg.test = Pkg.API.test  [functionalias @ Pkg.test]
const Pkg.undo = Pkg.API.undo  [functionalias @ Pkg.undo]
const Pkg.update = Pkg.API.up  [functionalias @ Pkg.update]
const Pkg.upgrade_manifest = Pkg.API.upgrade_manifest  [functionalias @ Pkg.upgrade_manifest]
const Pkg.why = Pkg.API.why  [functionalias @ Pkg.why]
const LazyArtifacts.@artifact_str = Artifacts.@artifact_str  [functionalias @ LazyArtifacts.@artifact_str]
const LazyArtifacts.artifact_exists = Artifacts.artifact_exists  [functionalias @ LazyArtifacts.artifact_exists]
const LazyArtifacts.artifact_hash = Artifacts.artifact_hash  [functionalias @ LazyArtifacts.artifact_hash]
const LazyArtifacts.artifact_meta = Artifacts.artifact_meta  [functionalias @ LazyArtifacts.artifact_meta]
const LazyArtifacts.artifact_path = Artifacts.artifact_path  [functionalias @ LazyArtifacts.artifact_path]
const LazyArtifacts.find_artifacts_toml = Artifacts.find_artifacts_toml  [functionalias @ LazyArtifacts.find_artifacts_toml]
const LazyArtifacts.select_downloadable_artifacts = Artifacts.select_downloadable_artifacts  [functionalias @ LazyArtifacts.select_downloadable_artifacts]
